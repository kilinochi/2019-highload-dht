<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1013"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1013"> </text>
<g id="frames">
<g>
<title>all (7,679 samples, 100.00%)</title><rect x="10.0" y="979.0" width="1180.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.0" y="990.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (24 samples, 0.31%)</title><rect x="10.3" y="963.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.3" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (5 samples, 0.07%)</title><rect x="10.6" y="947.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.6" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.07%)</title><rect x="10.6" y="931.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.6" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="10.6" y="915.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.6" y="926.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)</title><rect x="10.6" y="899.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.6" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)</title><rect x="10.6" y="883.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.6" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (16 samples, 0.21%)</title><rect x="11.5" y="947.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.5" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (15 samples, 0.20%)</title><rect x="11.7" y="931.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.7" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (14 samples, 0.18%)</title><rect x="11.8" y="915.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.8" y="926.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (7 samples, 0.09%)</title><rect x="12.2" y="899.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.2" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (3 samples, 0.04%)</title><rect x="12.2" y="883.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.2" y="894.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)</title><rect x="12.6" y="883.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="15.6" y="894.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.03%)</title><rect x="12.8" y="867.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.8" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (2 samples, 0.03%)</title><rect x="12.8" y="851.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.8" y="862.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.03%)</title><rect x="12.8" y="835.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="15.8" y="846.0"></text>
</g>
<g>
<title>__memset_avx2_erms (4 samples, 0.05%)</title><rect x="13.4" y="899.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="16.4" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.10%)</title><rect x="14.0" y="963.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.0" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.09%)</title><rect x="14.1" y="947.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.1" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.08%)</title><rect x="14.3" y="931.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="17.3" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.07%)</title><rect x="14.3" y="915.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="17.3" y="926.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (5 samples, 0.07%)</title><rect x="14.3" y="899.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="17.3" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.05%)</title><rect x="14.5" y="883.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="17.5" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="14.5" y="867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (14 samples, 0.18%)</title><rect x="15.2" y="963.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="18.2" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (12 samples, 0.16%)</title><rect x="15.5" y="947.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="18.5" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (12 samples, 0.16%)</title><rect x="15.5" y="931.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="18.5" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (11 samples, 0.14%)</title><rect x="15.5" y="915.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="18.5" y="926.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (6 samples, 0.08%)</title><rect x="15.8" y="899.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="18.8" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (6 samples, 0.08%)</title><rect x="15.8" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="18.8" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="16.1" y="867.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="19.1" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.03%)</title><rect x="16.1" y="851.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="19.1" y="862.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (2 samples, 0.03%)</title><rect x="16.8" y="899.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="19.8" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="17.4" y="963.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="20.4" y="974.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.03%)</title><rect x="17.4" y="947.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="20.4" y="958.0"></text>
</g>
<g>
<title>[not_walkable_Java] (17 samples, 0.22%)</title><rect x="17.7" y="963.0" width="2.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="20.7" y="974.0"></text>
</g>
<g>
<title>G1BarrierSet::write_ref_array_work(MemRegion) (3 samples, 0.04%)</title><rect x="17.8" y="947.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="20.8" y="958.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_array_post_entry(HeapWord*, unsigned long) (2 samples, 0.03%)</title><rect x="18.3" y="947.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="21.3" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.09%)</title><rect x="18.6" y="947.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="21.6" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.08%)</title><rect x="18.8" y="931.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="21.8" y="942.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.04%)</title><rect x="18.8" y="915.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="21.8" y="926.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="18.9" y="899.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="21.9" y="910.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.03%)</title><rect x="19.4" y="915.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="22.4" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (3 samples, 0.04%)</title><rect x="19.8" y="947.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="22.8" y="958.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.07%)</title><rect x="20.3" y="963.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="23.3" y="974.0"></text>
</g>
<g>
<title>[unknown_Java] (27 samples, 0.35%)</title><rect x="21.1" y="963.0" width="4.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="24.1" y="974.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_array_post_entry(HeapWord*, unsigned long) (5 samples, 0.07%)</title><rect x="23.5" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="26.5" y="958.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="24.4" y="947.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="27.4" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="24.4" y="931.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="27.4" y="942.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (2 samples, 0.03%)</title><rect x="24.9" y="947.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="27.9" y="958.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="24.9" y="931.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="27.9" y="942.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="24.9" y="915.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="27.9" y="926.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="24.9" y="899.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="27.9" y="910.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="24.9" y="883.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="27.9" y="894.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="24.9" y="867.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="27.9" y="878.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="24.9" y="851.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="27.9" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="24.9" y="835.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="27.9" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="24.9" y="819.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="27.9" y="830.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (3 samples, 0.04%)</title><rect x="25.4" y="963.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="28.4" y="974.0"></text>
</g>
<g>
<title>java/lang/Thread.run (5,710 samples, 74.36%)</title><rect x="25.8" y="963.0" width="877.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.8" y="974.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (5,710 samples, 74.36%)</title><rect x="25.8" y="947.0" width="877.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="28.8" y="958.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (5,710 samples, 74.36%)</title><rect x="25.8" y="931.0" width="877.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.8" y="942.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.03%)</title><rect x="28.7" y="915.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.7" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.03%)</title><rect x="28.7" y="899.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.04%)</title><rect x="29.2" y="915.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.04%)</title><rect x="29.2" y="899.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="32.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (3 samples, 0.04%)</title><rect x="29.2" y="883.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.04%)</title><rect x="29.2" y="867.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2,517 samples, 32.78%)</title><rect x="29.7" y="915.0" width="386.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.7" y="926.0">java/util/concurrent/ThreadPoolExecutor.getTask</text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (6 samples, 0.08%)</title><rect x="31.7" y="899.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.take (2,498 samples, 32.53%)</title><rect x="32.6" y="899.0" width="383.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.6" y="910.0">java/util/concurrent/SynchronousQueue.take</text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (2,498 samples, 32.53%)</title><rect x="32.6" y="883.0" width="383.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.6" y="894.0">java/util/concurrent/SynchronousQueue$TransferStack...</text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack$SNode.tryMatch (1,968 samples, 25.63%)</title><rect x="36.0" y="867.0" width="302.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="39.0" y="878.0">java/util/concurrent/SynchronousQueue$Tra..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1,968 samples, 25.63%)</title><rect x="36.0" y="851.0" width="302.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="39.0" y="862.0">java/lang/invoke/VarHandleGuards.guard_LL..</text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (4 samples, 0.05%)</title><rect x="36.0" y="835.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.0" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1,964 samples, 25.58%)</title><rect x="36.6" y="835.0" width="301.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.6" y="846.0">java/lang/invoke/VarHandleObjects$FieldIn..</text>
</g>
<g>
<title>[unknown] (26 samples, 0.34%)</title><rect x="334.4" y="819.0" width="4.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="337.4" y="830.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 0.34%)</title><rect x="334.4" y="803.0" width="4.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="337.4" y="814.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 0.34%)</title><rect x="334.4" y="787.0" width="4.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="337.4" y="798.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 0.34%)</title><rect x="334.4" y="771.0" width="4.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="337.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.31%)</title><rect x="334.7" y="755.0" width="3.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="337.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.31%)</title><rect x="334.7" y="739.0" width="3.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="337.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.31%)</title><rect x="334.7" y="723.0" width="3.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="337.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="337.9" y="707.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="340.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="337.9" y="691.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="340.9" y="702.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="337.9" y="675.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="340.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.awaitFulfill (354 samples, 4.61%)</title><rect x="338.4" y="867.0" width="54.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="341.4" y="878.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (339 samples, 4.41%)</title><rect x="340.7" y="851.0" width="52.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="343.7" y="862.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (339 samples, 4.41%)</title><rect x="340.7" y="835.0" width="52.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="343.7" y="846.0">jdk/i..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (2 samples, 0.03%)</title><rect x="341.8" y="819.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="344.8" y="830.0"></text>
</g>
<g>
<title>Unsafe_Park (136 samples, 1.77%)</title><rect x="342.1" y="819.0" width="20.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="345.1" y="830.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.03%)</title><rect x="344.5" y="803.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="347.5" y="814.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (35 samples, 0.46%)</title><rect x="345.1" y="803.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="348.1" y="814.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (7 samples, 0.09%)</title><rect x="347.9" y="787.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="350.9" y="798.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.04%)</title><rect x="348.5" y="771.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="351.5" y="782.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.04%)</title><rect x="349.0" y="787.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="352.0" y="798.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.08%)</title><rect x="349.6" y="787.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="352.6" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (3 samples, 0.04%)</title><rect x="350.7" y="803.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="353.7" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (3 samples, 0.04%)</title><rect x="351.1" y="803.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="354.1" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (55 samples, 0.72%)</title><rect x="351.6" y="803.0" width="8.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="354.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 0.34%)</title><rect x="356.1" y="787.0" width="4.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="359.1" y="798.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 0.34%)</title><rect x="356.1" y="771.0" width="4.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="359.1" y="782.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.14%)</title><rect x="358.4" y="755.0" width="1.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="361.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.12%)</title><rect x="358.7" y="739.0" width="1.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="361.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.09%)</title><rect x="359.0" y="723.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="362.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="359.6" y="707.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="362.6" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.03%)</title><rect x="360.1" y="803.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="363.1" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.03%)</title><rect x="360.4" y="803.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="363.4" y="814.0"></text>
</g>
<g>
<title>__tls_get_addr (9 samples, 0.12%)</title><rect x="360.7" y="803.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="363.7" y="814.0"></text>
</g>
<g>
<title>_init (2 samples, 0.03%)</title><rect x="362.0" y="803.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="365.0" y="814.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.04%)</title><rect x="362.5" y="803.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="365.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (188 samples, 2.45%)</title><rect x="363.0" y="819.0" width="28.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="366.0" y="830.0">[u..</text>
</g>
<g>
<title>__pthread_cleanup_pop (3 samples, 0.04%)</title><rect x="363.0" y="803.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="366.0" y="814.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (2 samples, 0.03%)</title><rect x="363.4" y="803.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="366.4" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_wait (172 samples, 2.24%)</title><rect x="363.7" y="803.0" width="26.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="366.7" y="814.0">_..</text>
</g>
<g>
<title>[unknown] (99 samples, 1.29%)</title><rect x="375.0" y="787.0" width="15.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="378.0" y="798.0"></text>
</g>
<g>
<title>[unknown] (99 samples, 1.29%)</title><rect x="375.0" y="771.0" width="15.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="378.0" y="782.0"></text>
</g>
<g>
<title>[unknown] (81 samples, 1.05%)</title><rect x="377.7" y="755.0" width="12.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="380.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (79 samples, 1.03%)</title><rect x="378.0" y="739.0" width="12.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="381.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (73 samples, 0.95%)</title><rect x="379.0" y="723.0" width="11.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="382.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 0.85%)</title><rect x="380.2" y="707.0" width="10.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="383.2" y="718.0"></text>
</g>
<g>
<title>[unknown] (42 samples, 0.55%)</title><rect x="383.7" y="691.0" width="6.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="386.7" y="702.0"></text>
</g>
<g>
<title>[unknown] (33 samples, 0.43%)</title><rect x="385.1" y="675.0" width="5.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="388.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.30%)</title><rect x="386.6" y="659.0" width="3.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="389.6" y="670.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.04%)</title><rect x="390.2" y="803.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="393.2" y="814.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.04%)</title><rect x="390.6" y="803.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="393.6" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (4 samples, 0.05%)</title><rect x="391.2" y="803.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="394.2" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.07%)</title><rect x="392.0" y="819.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="395.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.casHead (92 samples, 1.20%)</title><rect x="392.8" y="867.0" width="14.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="395.8" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (92 samples, 1.20%)</title><rect x="392.8" y="851.0" width="14.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="395.8" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (92 samples, 1.20%)</title><rect x="392.8" y="835.0" width="14.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="395.8" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (8 samples, 0.10%)</title><rect x="405.7" y="819.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="408.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.snode (62 samples, 0.81%)</title><rect x="406.9" y="867.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="409.9" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController$$Lambda$65/2086184287.run (3,168 samples, 41.26%)</title><rect x="416.4" y="915.0" width="486.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="419.4" y="926.0">ru/mail/polis/service/rest/RestController$$Lambda$65/2086184287.run</text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController.lambda$asyncExecute$4 (3,164 samples, 41.20%)</title><rect x="417.1" y="899.0" width="486.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="420.1" y="910.0">ru/mail/polis/service/rest/RestController.lambda$asyncExecute$4</text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController$$Lambda$62/227632755.submit (6 samples, 0.08%)</title><rect x="417.1" y="883.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="420.1" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController.lambda$entity$2 (4 samples, 0.05%)</title><rect x="417.2" y="867.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="420.2" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/DaoService.upsert (4 samples, 0.05%)</title><rect x="417.2" y="851.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="420.2" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/topology/ConsistentHashTopology.replicas (2 samples, 0.03%)</title><rect x="417.4" y="835.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="420.4" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/topology/ConsistentHashTopology.replicas (2 samples, 0.03%)</title><rect x="417.4" y="819.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="420.4" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.distinct (2 samples, 0.03%)</title><rect x="417.4" y="803.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="420.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/DistinctOps.makeRef (2 samples, 0.03%)</title><rect x="417.4" y="787.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="420.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/DistinctOps$1.&lt;init&gt; (2 samples, 0.03%)</title><rect x="417.4" y="771.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="420.4" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatefulOp.&lt;init&gt; (2 samples, 0.03%)</title><rect x="417.4" y="755.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="420.4" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/DaoService.get (2 samples, 0.03%)</title><rect x="417.4" y="739.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="420.4" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController$$Lambda$83/2111296553.submit (2,135 samples, 27.80%)</title><rect x="418.0" y="883.0" width="328.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="421.0" y="894.0">ru/mail/polis/service/rest/RestController$$L..</text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController.lambda$entity$1 (2,135 samples, 27.80%)</title><rect x="418.0" y="867.0" width="328.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="421.0" y="878.0">ru/mail/polis/service/rest/RestController.la..</text>
</g>
<g>
<title>ru/mail/polis/service/rest/DaoService.get (2,135 samples, 27.80%)</title><rect x="418.0" y="851.0" width="328.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="421.0" y="862.0">ru/mail/polis/service/rest/DaoService.get</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.05%)</title><rect x="420.0" y="835.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="423.0" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1175259735.invoke (4 samples, 0.05%)</title><rect x="420.0" y="819.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="423.0" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.03%)</title><rect x="420.0" y="803.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="423.0" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (2 samples, 0.03%)</title><rect x="420.0" y="787.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="423.0" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/473581465.invoke (2 samples, 0.03%)</title><rect x="420.3" y="803.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="423.3" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.03%)</title><rect x="420.3" y="787.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="423.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.03%)</title><rect x="420.3" y="771.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="423.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.10%)</title><rect x="420.6" y="835.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="423.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.07%)</title><rect x="420.7" y="819.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="423.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.equals (5 samples, 0.07%)</title><rect x="420.7" y="803.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="423.7" y="814.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="421.2" y="787.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="424.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.03%)</title><rect x="421.5" y="819.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="424.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.03%)</title><rect x="421.5" y="803.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="424.5" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.get (1,278 samples, 16.64%)</title><rect x="421.8" y="835.0" width="196.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="424.8" y="846.0">one/nio/http/HttpClient.get</text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (7 samples, 0.09%)</title><rect x="421.8" y="819.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="424.8" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.05%)</title><rect x="422.1" y="803.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="425.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="422.4" y="787.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="425.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="422.4" y="771.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="425.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="422.4" y="755.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="425.4" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,271 samples, 16.55%)</title><rect x="422.9" y="819.0" width="195.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="425.9" y="830.0">one/nio/http/HttpClient.i..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,271 samples, 16.55%)</title><rect x="422.9" y="803.0" width="195.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="425.9" y="814.0">one/nio/http/HttpClient.i..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (22 samples, 0.29%)</title><rect x="423.2" y="787.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="426.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (17 samples, 0.22%)</title><rect x="424.0" y="771.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="427.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 0.14%)</title><rect x="424.9" y="755.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="427.9" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (6 samples, 0.08%)</title><rect x="425.7" y="739.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="428.7" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.07%)</title><rect x="425.8" y="723.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="428.8" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (5 samples, 0.07%)</title><rect x="425.8" y="707.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="428.8" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (291 samples, 3.79%)</title><rect x="426.6" y="787.0" width="44.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="429.6" y="798.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (289 samples, 3.76%)</title><rect x="426.9" y="771.0" width="44.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="429.9" y="782.0">one/..</text>
</g>
<g>
<title>[unknown] (50 samples, 0.65%)</title><rect x="428.4" y="755.0" width="7.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="431.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (50 samples, 0.65%)</title><rect x="428.4" y="739.0" width="7.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="431.4" y="750.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (44 samples, 0.57%)</title><rect x="428.4" y="723.0" width="6.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="431.4" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.07%)</title><rect x="429.0" y="707.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="432.0" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="429.8" y="707.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="432.8" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (2 samples, 0.03%)</title><rect x="430.1" y="707.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="433.1" y="718.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (7 samples, 0.09%)</title><rect x="430.4" y="707.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="433.4" y="718.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (22 samples, 0.29%)</title><rect x="431.7" y="707.0" width="3.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="434.7" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="432.9" y="691.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="435.9" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (2 samples, 0.03%)</title><rect x="433.3" y="691.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="436.3" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (4 samples, 0.05%)</title><rect x="433.7" y="691.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="436.7" y="702.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.07%)</title><rect x="434.3" y="691.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="437.3" y="702.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.04%)</title><rect x="435.3" y="723.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="438.3" y="734.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.03%)</title><rect x="436.1" y="755.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="439.1" y="766.0"></text>
</g>
<g>
<title>recv (227 samples, 2.96%)</title><rect x="436.4" y="755.0" width="34.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="439.4" y="766.0">recv</text>
</g>
<g>
<title>[unknown] (195 samples, 2.54%)</title><rect x="441.3" y="739.0" width="30.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="444.3" y="750.0">[u..</text>
</g>
<g>
<title>[unknown] (195 samples, 2.54%)</title><rect x="441.3" y="723.0" width="30.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="444.3" y="734.0">[u..</text>
</g>
<g>
<title>[unknown] (184 samples, 2.40%)</title><rect x="443.0" y="707.0" width="28.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="446.0" y="718.0">[u..</text>
</g>
<g>
<title>[unknown] (183 samples, 2.38%)</title><rect x="443.2" y="691.0" width="28.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="446.2" y="702.0">[u..</text>
</g>
<g>
<title>[unknown] (181 samples, 2.36%)</title><rect x="443.5" y="675.0" width="27.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="446.5" y="686.0">[..</text>
</g>
<g>
<title>[unknown] (168 samples, 2.19%)</title><rect x="445.5" y="659.0" width="25.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="448.5" y="670.0">[..</text>
</g>
<g>
<title>[unknown] (163 samples, 2.12%)</title><rect x="446.3" y="643.0" width="25.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="449.3" y="654.0">[..</text>
</g>
<g>
<title>[unknown] (137 samples, 1.78%)</title><rect x="450.3" y="627.0" width="21.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="453.3" y="638.0">[..</text>
</g>
<g>
<title>[unknown] (114 samples, 1.48%)</title><rect x="453.8" y="611.0" width="17.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="456.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (101 samples, 1.32%)</title><rect x="455.8" y="595.0" width="15.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="458.8" y="606.0"></text>
</g>
<g>
<title>[unknown] (70 samples, 0.91%)</title><rect x="460.5" y="579.0" width="10.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="463.5" y="590.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 0.51%)</title><rect x="465.3" y="563.0" width="6.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="468.3" y="574.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.35%)</title><rect x="467.2" y="547.0" width="4.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="470.2" y="558.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="470.4" y="531.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="473.4" y="542.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="470.4" y="515.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="473.4" y="526.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="470.4" y="499.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="473.4" y="510.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="470.4" y="483.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="473.4" y="494.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="470.7" y="467.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="473.7" y="478.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="470.7" y="451.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="473.7" y="462.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="470.7" y="435.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="473.7" y="446.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="470.7" y="419.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="473.7" y="430.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="470.7" y="403.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="473.7" y="414.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="470.7" y="387.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="473.7" y="398.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="470.7" y="371.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="473.7" y="382.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="470.7" y="355.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="473.7" y="366.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="470.7" y="339.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="473.7" y="350.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="470.7" y="323.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="473.7" y="334.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="470.7" y="307.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="473.7" y="318.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="470.7" y="291.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="473.7" y="302.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="470.7" y="275.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="473.7" y="286.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="470.7" y="259.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="473.7" y="270.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="470.7" y="243.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="473.7" y="254.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="471.0" y="227.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="474.0" y="238.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="471.0" y="211.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="474.0" y="222.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="471.0" y="195.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="474.0" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (80 samples, 1.04%)</title><rect x="471.3" y="787.0" width="12.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="474.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="471.9" y="771.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="474.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (15 samples, 0.20%)</title><rect x="472.2" y="771.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (12 samples, 0.16%)</title><rect x="472.7" y="755.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="475.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.05%)</title><rect x="472.7" y="739.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="475.7" y="750.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.03%)</title><rect x="473.0" y="723.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="476.0" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (8 samples, 0.10%)</title><rect x="473.3" y="739.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.3" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.04%)</title><rect x="474.1" y="723.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="477.1" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="474.5" y="771.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="477.5" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (38 samples, 0.49%)</title><rect x="474.8" y="771.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="477.8" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (32 samples, 0.42%)</title><rect x="475.8" y="755.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="478.8" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (30 samples, 0.39%)</title><rect x="476.1" y="739.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.1" y="750.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (2 samples, 0.03%)</title><rect x="480.4" y="723.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="483.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (11 samples, 0.14%)</title><rect x="480.7" y="771.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="483.7" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (4 samples, 0.05%)</title><rect x="481.8" y="755.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="484.8" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (8 samples, 0.10%)</title><rect x="482.4" y="771.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="485.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="482.4" y="755.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="485.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.07%)</title><rect x="482.7" y="755.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="485.7" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.07%)</title><rect x="482.7" y="739.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="485.7" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="483.1" y="723.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="486.1" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (59 samples, 0.77%)</title><rect x="483.6" y="787.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="486.6" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="484.8" y="771.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="487.8" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (3 samples, 0.04%)</title><rect x="485.1" y="771.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="488.1" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (8 samples, 0.10%)</title><rect x="485.6" y="771.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="488.6" y="782.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.04%)</title><rect x="486.2" y="755.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="489.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (35 samples, 0.46%)</title><rect x="486.8" y="771.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="489.8" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.07%)</title><rect x="487.1" y="755.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="490.1" y="766.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (3 samples, 0.04%)</title><rect x="487.4" y="739.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="490.4" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (3 samples, 0.04%)</title><rect x="487.9" y="755.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="490.9" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.05%)</title><rect x="488.4" y="755.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="491.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="488.4" y="739.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="491.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.03%)</title><rect x="488.4" y="723.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.4" y="734.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="488.7" y="739.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="491.7" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (21 samples, 0.27%)</title><rect x="489.0" y="755.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="492.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (8 samples, 0.10%)</title><rect x="491.0" y="739.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="494.0" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.04%)</title><rect x="491.7" y="723.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="494.7" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.04%)</title><rect x="492.2" y="771.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="495.2" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (15 samples, 0.20%)</title><rect x="492.7" y="787.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="495.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (13 samples, 0.17%)</title><rect x="493.0" y="771.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="496.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (12 samples, 0.16%)</title><rect x="493.1" y="755.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="496.1" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.07%)</title><rect x="493.9" y="739.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.9" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.07%)</title><rect x="493.9" y="723.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.9" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (5 samples, 0.07%)</title><rect x="493.9" y="707.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="496.9" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="494.7" y="739.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="497.7" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (137 samples, 1.78%)</title><rect x="495.0" y="787.0" width="21.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="498.0" y="798.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (2 samples, 0.03%)</title><rect x="495.7" y="771.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="498.7" y="782.0"></text>
</g>
<g>
<title>__GI___setsockopt (128 samples, 1.67%)</title><rect x="496.0" y="771.0" width="19.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="499.0" y="782.0"></text>
</g>
<g>
<title>[unknown] (84 samples, 1.09%)</title><rect x="502.8" y="755.0" width="12.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="505.8" y="766.0"></text>
</g>
<g>
<title>[unknown] (84 samples, 1.09%)</title><rect x="502.8" y="739.0" width="12.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="505.8" y="750.0"></text>
</g>
<g>
<title>[unknown] (60 samples, 0.78%)</title><rect x="506.5" y="723.0" width="9.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="509.5" y="734.0"></text>
</g>
<g>
<title>[unknown] (60 samples, 0.78%)</title><rect x="506.5" y="707.0" width="9.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="509.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (58 samples, 0.76%)</title><rect x="506.8" y="691.0" width="8.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="509.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 0.63%)</title><rect x="508.3" y="675.0" width="7.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="511.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (42 samples, 0.55%)</title><rect x="509.3" y="659.0" width="6.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="512.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.33%)</title><rect x="511.9" y="643.0" width="3.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="514.9" y="654.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.13%)</title><rect x="514.2" y="627.0" width="1.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="517.2" y="638.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="514.8" y="611.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="517.8" y="622.0"></text>
</g>
<g>
<title>_init (2 samples, 0.03%)</title><rect x="515.7" y="771.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="518.7" y="782.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (648 samples, 8.44%)</title><rect x="516.0" y="787.0" width="99.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="519.0" y="798.0">one/nio/net/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (21 samples, 0.27%)</title><rect x="516.6" y="771.0" width="3.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="519.6" y="782.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="516.9" y="755.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="519.9" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="517.3" y="755.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="520.3" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (2 samples, 0.03%)</title><rect x="517.7" y="755.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="520.7" y="766.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.03%)</title><rect x="518.0" y="755.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="521.0" y="766.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.09%)</title><rect x="518.3" y="755.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="521.3" y="766.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="518.6" y="739.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="521.6" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.04%)</title><rect x="518.9" y="739.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="521.9" y="750.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.04%)</title><rect x="519.4" y="755.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="522.4" y="766.0"></text>
</g>
<g>
<title>__send (620 samples, 8.07%)</title><rect x="520.2" y="771.0" width="95.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="523.2" y="782.0">__send</text>
</g>
<g>
<title>[unknown] (594 samples, 7.74%)</title><rect x="524.2" y="755.0" width="91.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="527.2" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (594 samples, 7.74%)</title><rect x="524.2" y="739.0" width="91.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="527.2" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (586 samples, 7.63%)</title><rect x="525.4" y="723.0" width="90.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="528.4" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (583 samples, 7.59%)</title><rect x="525.9" y="707.0" width="89.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="528.9" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (579 samples, 7.54%)</title><rect x="526.5" y="691.0" width="88.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="529.5" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (576 samples, 7.50%)</title><rect x="526.9" y="675.0" width="88.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="529.9" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (569 samples, 7.41%)</title><rect x="528.0" y="659.0" width="87.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="531.0" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (567 samples, 7.38%)</title><rect x="528.3" y="643.0" width="87.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="531.3" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (552 samples, 7.19%)</title><rect x="530.6" y="627.0" width="84.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="533.6" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (543 samples, 7.07%)</title><rect x="532.0" y="611.0" width="83.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="535.0" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (513 samples, 6.68%)</title><rect x="536.6" y="595.0" width="78.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="539.6" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (491 samples, 6.39%)</title><rect x="540.0" y="579.0" width="75.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="543.0" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (455 samples, 5.93%)</title><rect x="545.5" y="563.0" width="69.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="548.5" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (448 samples, 5.83%)</title><rect x="546.6" y="547.0" width="68.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="549.6" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (443 samples, 5.77%)</title><rect x="547.4" y="531.0" width="68.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="550.4" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (432 samples, 5.63%)</title><rect x="549.1" y="515.0" width="66.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="552.1" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (422 samples, 5.50%)</title><rect x="550.6" y="499.0" width="64.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="553.6" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (414 samples, 5.39%)</title><rect x="551.8" y="483.0" width="63.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="554.8" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (388 samples, 5.05%)</title><rect x="555.8" y="467.0" width="59.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="558.8" y="478.0">[unkno..</text>
</g>
<g>
<title>[unknown] (372 samples, 4.84%)</title><rect x="558.3" y="451.0" width="57.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="561.3" y="462.0">[unkno..</text>
</g>
<g>
<title>[unknown] (356 samples, 4.64%)</title><rect x="560.7" y="435.0" width="54.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="563.7" y="446.0">[unkn..</text>
</g>
<g>
<title>[unknown] (346 samples, 4.51%)</title><rect x="562.3" y="419.0" width="53.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="565.3" y="430.0">[unkn..</text>
</g>
<g>
<title>[unknown] (334 samples, 4.35%)</title><rect x="564.1" y="403.0" width="51.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="567.1" y="414.0">[unkn..</text>
</g>
<g>
<title>[unknown] (323 samples, 4.21%)</title><rect x="565.8" y="387.0" width="49.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="568.8" y="398.0">[unkn..</text>
</g>
<g>
<title>[unknown] (309 samples, 4.02%)</title><rect x="568.0" y="371.0" width="47.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="571.0" y="382.0">[unk..</text>
</g>
<g>
<title>[unknown] (303 samples, 3.95%)</title><rect x="568.9" y="355.0" width="46.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="571.9" y="366.0">[unk..</text>
</g>
<g>
<title>[unknown] (298 samples, 3.88%)</title><rect x="569.7" y="339.0" width="45.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="572.7" y="350.0">[unk..</text>
</g>
<g>
<title>[unknown] (284 samples, 3.70%)</title><rect x="571.8" y="323.0" width="43.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="574.8" y="334.0">[unk..</text>
</g>
<g>
<title>[unknown] (274 samples, 3.57%)</title><rect x="573.3" y="307.0" width="42.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="576.3" y="318.0">[unk..</text>
</g>
<g>
<title>[unknown] (271 samples, 3.53%)</title><rect x="573.8" y="291.0" width="41.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="576.8" y="302.0">[un..</text>
</g>
<g>
<title>[unknown] (270 samples, 3.52%)</title><rect x="574.0" y="275.0" width="41.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="577.0" y="286.0">[un..</text>
</g>
<g>
<title>[unknown] (266 samples, 3.46%)</title><rect x="574.6" y="259.0" width="40.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="577.6" y="270.0">[un..</text>
</g>
<g>
<title>[unknown] (255 samples, 3.32%)</title><rect x="576.3" y="243.0" width="39.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="579.3" y="254.0">[un..</text>
</g>
<g>
<title>[unknown] (236 samples, 3.07%)</title><rect x="579.2" y="227.0" width="36.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="582.2" y="238.0">[un..</text>
</g>
<g>
<title>[unknown] (223 samples, 2.90%)</title><rect x="581.2" y="211.0" width="34.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="584.2" y="222.0">[u..</text>
</g>
<g>
<title>[unknown] (192 samples, 2.50%)</title><rect x="585.9" y="195.0" width="29.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="588.9" y="206.0">[u..</text>
</g>
<g>
<title>[unknown] (167 samples, 2.17%)</title><rect x="589.8" y="179.0" width="25.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="592.8" y="190.0">[..</text>
</g>
<g>
<title>[unknown] (159 samples, 2.07%)</title><rect x="591.0" y="163.0" width="24.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="594.0" y="174.0">[..</text>
</g>
<g>
<title>[unknown] (154 samples, 2.01%)</title><rect x="591.8" y="147.0" width="23.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="594.8" y="158.0">[..</text>
</g>
<g>
<title>[unknown] (10 samples, 0.13%)</title><rect x="613.9" y="131.0" width="1.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="616.9" y="142.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="614.5" y="115.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="617.5" y="126.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="614.8" y="99.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="617.8" y="110.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (15 samples, 0.20%)</title><rect x="615.6" y="787.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="618.6" y="798.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (11 samples, 0.14%)</title><rect x="616.2" y="771.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="619.2" y="782.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (11 samples, 0.14%)</title><rect x="616.2" y="755.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="619.2" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (2 samples, 0.03%)</title><rect x="618.2" y="835.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="621.2" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/LSMDao.latestIterator (420 samples, 5.47%)</title><rect x="618.5" y="835.0" width="64.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="621.5" y="846.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.latestIter (420 samples, 5.47%)</title><rect x="618.5" y="819.0" width="64.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="621.5" y="830.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.collapseEquals (49 samples, 0.64%)</title><rect x="618.7" y="803.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="621.7" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (48 samples, 0.63%)</title><rect x="618.8" y="787.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="621.8" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (48 samples, 0.63%)</title><rect x="618.8" y="771.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="621.8" y="782.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (48 samples, 0.63%)</title><rect x="618.8" y="755.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="621.8" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (46 samples, 0.60%)</title><rect x="619.0" y="739.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="622.0" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (46 samples, 0.60%)</title><rect x="619.0" y="723.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="622.0" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (40 samples, 0.52%)</title><rect x="619.0" y="707.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="622.0" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (37 samples, 0.48%)</title><rect x="619.1" y="691.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="622.1" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (20 samples, 0.26%)</title><rect x="620.1" y="675.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="623.1" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (3 samples, 0.04%)</title><rect x="620.1" y="659.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="623.1" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/table/MemTable$$Lambda$86/403323563.apply (3 samples, 0.04%)</title><rect x="620.1" y="643.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="623.1" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/table/MemTable.lambda$iterator$0 (3 samples, 0.04%)</title><rect x="620.1" y="627.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="623.1" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getKey (2 samples, 0.03%)</title><rect x="620.1" y="611.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="623.1" y="622.0"></text>
</g>
<g>
<title>java/util/AbstractMap$SimpleImmutableEntry.getKey (2 samples, 0.03%)</title><rect x="620.1" y="595.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="623.1" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (17 samples, 0.22%)</title><rect x="620.5" y="659.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="623.5" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (17 samples, 0.22%)</title><rect x="620.5" y="643.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="623.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (16 samples, 0.21%)</title><rect x="620.7" y="627.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="623.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (16 samples, 0.21%)</title><rect x="620.7" y="611.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="623.7" y="622.0"></text>
</g>
<g>
<title>java/util/AbstractMap$SimpleImmutableEntry.&lt;init&gt; (9 samples, 0.12%)</title><rect x="620.7" y="595.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="623.7" y="606.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (9 samples, 0.12%)</title><rect x="620.7" y="579.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="623.7" y="590.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (5 samples, 0.07%)</title><rect x="621.3" y="563.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="624.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (7 samples, 0.09%)</title><rect x="622.1" y="595.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="625.1" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="622.7" y="579.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="625.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (7 samples, 0.09%)</title><rect x="623.7" y="675.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="626.7" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.03%)</title><rect x="624.0" y="659.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="627.0" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils$$Lambda$98/1247110586.apply (2 samples, 0.03%)</title><rect x="624.5" y="659.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="627.5" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/cell/Cell.getKey (2 samples, 0.03%)</title><rect x="624.5" y="643.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="627.5" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="624.5" y="627.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="627.5" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="624.5" y="611.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="627.5" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="624.5" y="595.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="627.5" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="624.5" y="579.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="627.5" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2 samples, 0.03%)</title><rect x="624.8" y="691.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="627.8" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2 samples, 0.03%)</title><rect x="624.8" y="675.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="627.8" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2 samples, 0.03%)</title><rect x="624.8" y="659.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="627.8" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (3 samples, 0.04%)</title><rect x="625.1" y="707.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="628.1" y="718.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.04%)</title><rect x="625.1" y="691.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="628.1" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/table/MemoryTablePool$$Lambda$94/1244624834.apply (3 samples, 0.04%)</title><rect x="625.6" y="707.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="628.6" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/cell/Cell.getKey (3 samples, 0.04%)</title><rect x="625.6" y="691.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="628.6" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="625.6" y="675.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="628.6" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="625.6" y="659.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="628.6" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="625.6" y="643.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="628.6" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="625.6" y="627.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="628.6" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="625.6" y="611.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="628.6" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="625.6" y="595.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="628.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.compose (370 samples, 4.82%)</title><rect x="626.2" y="803.0" width="56.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="629.2" y="814.0">ru/mai..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.04%)</title><rect x="627.3" y="787.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="630.3" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (12 samples, 0.16%)</title><rect x="627.7" y="787.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="630.7" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (4 samples, 0.05%)</title><rect x="628.4" y="771.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="631.4" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.04%)</title><rect x="628.5" y="755.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="631.5" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.04%)</title><rect x="628.5" y="739.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="631.5" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.04%)</title><rect x="628.5" y="723.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="631.5" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/table/MemoryTablePool.iterator (4 samples, 0.05%)</title><rect x="629.0" y="771.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="632.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/table/MemoryTablePool.iterator (346 samples, 4.51%)</title><rect x="629.9" y="787.0" width="53.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="632.9" y="798.0">ru/ma..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (7 samples, 0.09%)</title><rect x="630.2" y="771.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="633.2" y="782.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (7 samples, 0.09%)</title><rect x="630.2" y="755.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="633.2" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (2 samples, 0.03%)</title><rect x="630.5" y="739.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="633.5" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (21 samples, 0.27%)</title><rect x="631.4" y="771.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="634.4" y="782.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (16 samples, 0.21%)</title><rect x="632.2" y="755.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="635.2" y="766.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (7 samples, 0.09%)</title><rect x="632.2" y="739.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="635.2" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absHighest (5 samples, 0.07%)</title><rect x="632.5" y="723.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="635.5" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap.entrySet (9 samples, 0.12%)</title><rect x="633.3" y="739.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="636.3" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowFence (3 samples, 0.04%)</title><rect x="634.2" y="723.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="637.2" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (5 samples, 0.07%)</title><rect x="634.8" y="771.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.8" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (5 samples, 0.07%)</title><rect x="634.8" y="755.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="637.8" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (4 samples, 0.05%)</title><rect x="635.0" y="739.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.0" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.04%)</title><rect x="635.1" y="723.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="638.1" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (3 samples, 0.04%)</title><rect x="635.1" y="707.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="638.1" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap.size (3 samples, 0.04%)</title><rect x="635.6" y="771.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="638.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (46 samples, 0.60%)</title><rect x="636.0" y="771.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="639.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (46 samples, 0.60%)</title><rect x="636.0" y="755.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="639.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (46 samples, 0.60%)</title><rect x="636.0" y="739.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.07%)</title><rect x="636.5" y="723.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.5" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.03%)</title><rect x="637.0" y="707.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="640.0" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (27 samples, 0.35%)</title><rect x="637.3" y="723.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="640.3" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (21 samples, 0.27%)</title><rect x="637.9" y="707.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="640.9" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (13 samples, 0.17%)</title><rect x="639.1" y="691.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="642.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (7 samples, 0.09%)</title><rect x="640.0" y="675.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="643.0" y="686.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (7 samples, 0.09%)</title><rect x="640.0" y="659.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="643.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (7 samples, 0.09%)</title><rect x="640.0" y="643.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="643.0" y="654.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.03%)</title><rect x="640.8" y="627.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="643.8" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (2 samples, 0.03%)</title><rect x="641.1" y="707.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="644.1" y="718.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (4 samples, 0.05%)</title><rect x="641.4" y="723.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="644.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.05%)</title><rect x="642.0" y="723.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="645.0" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (4 samples, 0.05%)</title><rect x="642.0" y="707.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="645.0" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (4 samples, 0.05%)</title><rect x="642.0" y="691.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="642.6" y="723.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="645.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (2 samples, 0.03%)</title><rect x="643.1" y="771.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="646.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (2 samples, 0.03%)</title><rect x="643.1" y="755.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="646.1" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (31 samples, 0.40%)</title><rect x="643.4" y="771.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="646.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (31 samples, 0.40%)</title><rect x="643.4" y="755.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="646.4" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (25 samples, 0.33%)</title><rect x="644.3" y="739.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="647.3" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (20 samples, 0.26%)</title><rect x="645.1" y="723.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="648.1" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (19 samples, 0.25%)</title><rect x="645.3" y="707.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="648.3" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (17 samples, 0.22%)</title><rect x="645.3" y="691.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="648.3" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (16 samples, 0.21%)</title><rect x="645.3" y="675.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="648.3" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (4 samples, 0.05%)</title><rect x="645.3" y="659.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="648.3" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (3 samples, 0.04%)</title><rect x="645.4" y="643.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="648.4" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (3 samples, 0.04%)</title><rect x="645.4" y="627.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="648.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (3 samples, 0.04%)</title><rect x="645.4" y="611.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="648.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (3 samples, 0.04%)</title><rect x="645.4" y="595.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="648.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (3 samples, 0.04%)</title><rect x="645.4" y="579.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="648.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (12 samples, 0.16%)</title><rect x="645.9" y="659.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="648.9" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (5 samples, 0.07%)</title><rect x="646.5" y="643.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="649.5" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (5 samples, 0.07%)</title><rect x="646.5" y="627.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="649.5" y="638.0"></text>
</g>
<g>
<title>java/util/AbstractMap$SimpleImmutableEntry.getValue (3 samples, 0.04%)</title><rect x="646.8" y="611.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="649.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/table/MemoryTablePool$$Lambda$94/1244624834.apply (2 samples, 0.03%)</title><rect x="647.3" y="643.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="650.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/table/MemoryTablePool$$Lambda$94/1244624834.apply (2 samples, 0.03%)</title><rect x="647.9" y="691.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="650.9" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/cell/Cell.getKey (2 samples, 0.03%)</title><rect x="647.9" y="675.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="650.9" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="647.9" y="659.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="650.9" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="647.9" y="643.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="650.9" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="647.9" y="627.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="650.9" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="647.9" y="611.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="650.9" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="647.9" y="595.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="650.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/table/MemTable.iterator (226 samples, 2.94%)</title><rect x="648.3" y="771.0" width="34.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="651.3" y="782.0">ru..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.iterator (214 samples, 2.79%)</title><rect x="649.1" y="755.0" width="32.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="652.1" y="766.0">ja..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.&lt;init&gt; (214 samples, 2.79%)</title><rect x="649.1" y="739.0" width="32.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="652.1" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (213 samples, 2.77%)</title><rect x="649.2" y="723.0" width="32.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="652.2" y="734.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (212 samples, 2.76%)</title><rect x="649.2" y="707.0" width="32.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="652.2" y="718.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (211 samples, 2.75%)</title><rect x="649.4" y="691.0" width="32.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="652.4" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (7 samples, 0.09%)</title><rect x="650.0" y="675.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="653.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (7 samples, 0.09%)</title><rect x="650.0" y="659.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="653.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (5 samples, 0.07%)</title><rect x="650.3" y="643.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="653.3" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.07%)</title><rect x="650.3" y="627.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="653.3" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.07%)</title><rect x="650.3" y="611.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="653.3" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.07%)</title><rect x="650.3" y="595.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="653.3" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="650.8" y="579.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="653.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (200 samples, 2.60%)</title><rect x="651.1" y="675.0" width="30.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="654.1" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (200 samples, 2.60%)</title><rect x="651.1" y="659.0" width="30.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="654.1" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (17 samples, 0.22%)</title><rect x="651.4" y="643.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="654.4" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (15 samples, 0.20%)</title><rect x="651.7" y="627.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="654.7" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 0.18%)</title><rect x="651.9" y="611.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="654.9" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.10%)</title><rect x="652.3" y="595.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="655.3" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.04%)</title><rect x="653.6" y="595.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="656.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (181 samples, 2.36%)</title><rect x="654.0" y="643.0" width="27.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="657.0" y="654.0">j..</text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="668.0" y="627.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="671.0" y="638.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="668.0" y="611.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="671.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="668.0" y="595.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="671.0" y="606.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="668.0" y="579.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="671.0" y="590.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="668.0" y="563.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="671.0" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="668.2" y="547.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="671.2" y="558.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="668.2" y="531.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="671.2" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="668.6" y="627.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="671.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (83 samples, 1.08%)</title><rect x="669.1" y="627.0" width="12.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="672.1" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (79 samples, 1.03%)</title><rect x="669.7" y="611.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="672.7" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (75 samples, 0.98%)</title><rect x="670.3" y="595.0" width="11.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="673.3" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (6 samples, 0.08%)</title><rect x="671.2" y="579.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="674.2" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (51 samples, 0.66%)</title><rect x="672.1" y="579.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="675.1" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (20 samples, 0.26%)</title><rect x="676.9" y="563.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="679.9" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.07%)</title><rect x="677.8" y="547.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="680.8" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (9 samples, 0.12%)</title><rect x="678.6" y="547.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="681.6" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (12 samples, 0.16%)</title><rect x="680.0" y="579.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="683.0" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.08%)</title><rect x="680.4" y="563.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="683.4" y="574.0"></text>
</g>
<g>
<title>vectorizedMismatch (6 samples, 0.08%)</title><rect x="680.4" y="547.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="683.4" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (3 samples, 0.04%)</title><rect x="681.4" y="563.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="684.4" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.entrySet (2 samples, 0.03%)</title><rect x="682.0" y="755.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="685.0" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.&lt;init&gt; (2 samples, 0.03%)</title><rect x="682.0" y="739.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="685.0" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSet.&lt;init&gt; (2 samples, 0.03%)</title><rect x="682.0" y="723.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="685.0" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.&lt;init&gt; (2 samples, 0.03%)</title><rect x="682.0" y="707.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="685.0" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSortedMap.tailMap (5 samples, 0.07%)</title><rect x="682.3" y="755.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="685.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (4 samples, 0.05%)</title><rect x="682.4" y="739.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="685.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (4 samples, 0.05%)</title><rect x="682.4" y="723.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="685.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (4 samples, 0.05%)</title><rect x="682.4" y="707.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="685.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (4 samples, 0.05%)</title><rect x="682.4" y="691.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="685.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/topology/ConsistentHashTopology.replicas (181 samples, 2.36%)</title><rect x="683.1" y="835.0" width="27.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="686.1" y="846.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/topology/ConsistentHashTopology.replicas (181 samples, 2.36%)</title><rect x="683.1" y="819.0" width="27.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="686.1" y="830.0">r..</text>
</g>
<g>
<title>java/util/Collection.stream (4 samples, 0.05%)</title><rect x="683.2" y="803.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="686.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (3 samples, 0.04%)</title><rect x="683.4" y="787.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="686.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (114 samples, 1.48%)</title><rect x="683.8" y="803.0" width="17.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="686.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (114 samples, 1.48%)</title><rect x="683.8" y="787.0" width="17.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="686.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (114 samples, 1.48%)</title><rect x="683.8" y="771.0" width="17.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="686.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (112 samples, 1.46%)</title><rect x="683.8" y="755.0" width="17.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="686.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (109 samples, 1.42%)</title><rect x="683.8" y="739.0" width="16.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="686.8" y="750.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (3 samples, 0.04%)</title><rect x="684.1" y="723.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="687.1" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.estimateSize (3 samples, 0.04%)</title><rect x="684.1" y="707.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="687.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (104 samples, 1.35%)</title><rect x="684.6" y="723.0" width="16.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="687.6" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (63 samples, 0.82%)</title><rect x="684.7" y="707.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="687.7" y="718.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (63 samples, 0.82%)</title><rect x="684.7" y="691.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="687.7" y="702.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (36 samples, 0.47%)</title><rect x="684.7" y="675.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="687.7" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (35 samples, 0.46%)</title><rect x="684.9" y="659.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="687.9" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (8 samples, 0.10%)</title><rect x="685.1" y="643.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="688.1" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (8 samples, 0.10%)</title><rect x="685.1" y="627.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="688.1" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (8 samples, 0.10%)</title><rect x="685.1" y="611.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="688.1" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (6 samples, 0.08%)</title><rect x="685.4" y="595.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="688.4" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (3 samples, 0.04%)</title><rect x="685.8" y="579.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="688.8" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (3 samples, 0.04%)</title><rect x="685.8" y="563.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="688.8" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.compare (3 samples, 0.04%)</title><rect x="685.8" y="547.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="688.8" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (23 samples, 0.30%)</title><rect x="686.3" y="643.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="689.3" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (2 samples, 0.03%)</title><rect x="687.1" y="627.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.03%)</title><rect x="687.4" y="627.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="690.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (3 samples, 0.04%)</title><rect x="687.7" y="627.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps$1.opWrapSink (3 samples, 0.04%)</title><rect x="688.1" y="627.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="691.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$OfRef.opWrapSink (5 samples, 0.07%)</title><rect x="688.6" y="627.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="691.6" y="638.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.04%)</title><rect x="689.4" y="627.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="692.4" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap.entrySet (2 samples, 0.03%)</title><rect x="690.0" y="643.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="693.0" y="654.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.size (27 samples, 0.35%)</title><rect x="690.3" y="675.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="693.3" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.size (27 samples, 0.35%)</title><rect x="690.3" y="659.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="693.3" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$EntrySetView.size (27 samples, 0.35%)</title><rect x="690.3" y="643.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="693.3" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (8 samples, 0.10%)</title><rect x="690.3" y="627.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="693.3" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absHighFence (2 samples, 0.03%)</title><rect x="690.4" y="611.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="693.4" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (5 samples, 0.07%)</title><rect x="690.7" y="611.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="693.7" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (5 samples, 0.07%)</title><rect x="690.7" y="595.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="693.7" y="606.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (3 samples, 0.04%)</title><rect x="691.0" y="579.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.0" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (19 samples, 0.25%)</title><rect x="691.5" y="627.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.5" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (17 samples, 0.22%)</title><rect x="691.8" y="611.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.8" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (17 samples, 0.22%)</title><rect x="691.8" y="595.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="694.8" y="606.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (15 samples, 0.20%)</title><rect x="692.1" y="579.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="695.1" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (21 samples, 0.27%)</title><rect x="694.4" y="707.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="697.4" y="718.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (21 samples, 0.27%)</title><rect x="694.4" y="691.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="697.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (21 samples, 0.27%)</title><rect x="694.4" y="675.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="697.4" y="686.0"></text>
</g>
<g>
<title>java/util/stream/DistinctOps$1$2.accept (19 samples, 0.25%)</title><rect x="694.7" y="659.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="697.7" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.04%)</title><rect x="694.9" y="643.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="697.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.add (12 samples, 0.16%)</title><rect x="695.3" y="643.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="698.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (12 samples, 0.16%)</title><rect x="695.3" y="627.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.3" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (11 samples, 0.14%)</title><rect x="695.5" y="611.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.5" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.03%)</title><rect x="695.7" y="595.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="698.7" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.08%)</title><rect x="696.0" y="595.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="699.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (2 samples, 0.03%)</title><rect x="697.2" y="643.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="700.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (2 samples, 0.03%)</title><rect x="697.2" y="627.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="700.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.03%)</title><rect x="697.2" y="611.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="700.2" y="622.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (5 samples, 0.07%)</title><rect x="697.7" y="707.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="700.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/DistinctOps$1$2.begin (5 samples, 0.07%)</title><rect x="697.7" y="691.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="700.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.03%)</title><rect x="697.8" y="675.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="700.8" y="686.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps$1$1.begin (2 samples, 0.03%)</title><rect x="698.1" y="675.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="701.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (14 samples, 0.18%)</title><rect x="698.4" y="707.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="701.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/DistinctOps$1$2.end (14 samples, 0.18%)</title><rect x="698.4" y="691.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="701.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (14 samples, 0.18%)</title><rect x="698.4" y="675.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="701.4" y="686.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$RefSortingSink.end (14 samples, 0.18%)</title><rect x="698.4" y="659.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="701.4" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.sort (9 samples, 0.12%)</title><rect x="698.9" y="643.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="701.9" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.sort (9 samples, 0.12%)</title><rect x="698.9" y="627.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="701.9" y="638.0"></text>
</g>
<g>
<title>java/util/TimSort.sort (9 samples, 0.12%)</title><rect x="698.9" y="611.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="701.9" y="622.0"></text>
</g>
<g>
<title>java/util/TimSort.countRunAndMakeAscending (9 samples, 0.12%)</title><rect x="698.9" y="595.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="701.9" y="606.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.03%)</title><rect x="699.3" y="579.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="702.3" y="590.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.03%)</title><rect x="699.3" y="563.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="702.3" y="574.0"></text>
</g>
<g>
<title>java/util/TimSort.reverseRange (4 samples, 0.05%)</title><rect x="699.7" y="579.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="702.7" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (2 samples, 0.03%)</title><rect x="700.3" y="643.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="703.3" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (3 samples, 0.04%)</title><rect x="700.6" y="739.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="703.6" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (2 samples, 0.03%)</title><rect x="700.7" y="723.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="703.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (10 samples, 0.13%)</title><rect x="701.5" y="803.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="704.5" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (10 samples, 0.13%)</title><rect x="701.5" y="787.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="704.5" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (10 samples, 0.13%)</title><rect x="701.5" y="771.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="704.5" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (10 samples, 0.13%)</title><rect x="701.5" y="755.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="704.5" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (10 samples, 0.13%)</title><rect x="701.5" y="739.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="704.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/topology/ConsistentHashTopology.tailMap (51 samples, 0.66%)</title><rect x="703.0" y="803.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="706.0" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (2 samples, 0.03%)</title><rect x="703.2" y="787.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="706.2" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (2 samples, 0.03%)</title><rect x="703.2" y="771.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="706.2" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (2 samples, 0.03%)</title><rect x="703.2" y="755.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="706.2" y="766.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (2 samples, 0.03%)</title><rect x="703.2" y="739.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="706.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/topology/ConsistentHashTopology$MD5Hash.hash (48 samples, 0.63%)</title><rect x="703.5" y="787.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="706.5" y="798.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (11 samples, 0.14%)</title><rect x="703.6" y="771.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="706.6" y="782.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (11 samples, 0.14%)</title><rect x="703.6" y="755.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="706.6" y="766.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (11 samples, 0.14%)</title><rect x="703.6" y="739.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="706.6" y="750.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (10 samples, 0.13%)</title><rect x="703.8" y="723.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="706.8" y="734.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implDigest (10 samples, 0.13%)</title><rect x="703.8" y="707.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="706.8" y="718.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implCompress (10 samples, 0.13%)</title><rect x="703.8" y="691.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="706.8" y="702.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (30 samples, 0.39%)</title><rect x="705.3" y="771.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="708.3" y="782.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (28 samples, 0.36%)</title><rect x="705.6" y="755.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="708.6" y="766.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (6 samples, 0.08%)</title><rect x="705.6" y="739.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="708.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.08%)</title><rect x="705.6" y="723.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="708.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.05%)</title><rect x="706.0" y="707.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="709.0" y="718.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (22 samples, 0.29%)</title><rect x="706.6" y="739.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="709.6" y="750.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (7 samples, 0.09%)</title><rect x="706.6" y="723.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="709.6" y="734.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (7 samples, 0.09%)</title><rect x="706.6" y="707.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="709.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.08%)</title><rect x="706.7" y="691.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="709.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.07%)</title><rect x="706.9" y="675.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="709.9" y="686.0"></text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.04%)</title><rect x="707.2" y="659.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="710.2" y="670.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (14 samples, 0.18%)</title><rect x="707.6" y="723.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="710.6" y="734.0"></text>
</g>
<g>
<title>java/security/Provider.getService (8 samples, 0.10%)</title><rect x="708.1" y="707.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="711.1" y="718.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (8 samples, 0.10%)</title><rect x="708.1" y="691.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="711.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.04%)</title><rect x="708.1" y="675.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="711.1" y="686.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.equals (3 samples, 0.04%)</title><rect x="708.1" y="659.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="711.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.07%)</title><rect x="708.6" y="675.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="711.6" y="686.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.hashCode (5 samples, 0.07%)</title><rect x="708.6" y="659.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="711.6" y="670.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.07%)</title><rect x="708.6" y="643.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="711.6" y="654.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implCompress (4 samples, 0.05%)</title><rect x="708.7" y="627.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="711.7" y="638.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (3 samples, 0.04%)</title><rect x="709.3" y="707.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="712.3" y="718.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (6 samples, 0.08%)</title><rect x="709.9" y="771.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="712.9" y="782.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (5 samples, 0.07%)</title><rect x="709.9" y="755.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="712.9" y="766.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (2 samples, 0.03%)</title><rect x="710.4" y="739.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="713.4" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/topology/node/ServiceNode.key (32 samples, 0.42%)</title><rect x="710.9" y="835.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="713.9" y="846.0"></text>
</g>
<g>
<title>java/net/URL.toString (32 samples, 0.42%)</title><rect x="710.9" y="819.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="713.9" y="830.0"></text>
</g>
<g>
<title>java/net/URL.toExternalForm (32 samples, 0.42%)</title><rect x="710.9" y="803.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="713.9" y="814.0"></text>
</g>
<g>
<title>java/net/URLStreamHandler.toExternalForm (32 samples, 0.42%)</title><rect x="710.9" y="787.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="713.9" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (21 samples, 0.27%)</title><rect x="711.9" y="771.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="714.9" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (21 samples, 0.27%)</title><rect x="711.9" y="755.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="714.9" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (13 samples, 0.17%)</title><rect x="712.4" y="739.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="715.4" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (5 samples, 0.07%)</title><rect x="713.5" y="723.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="716.5" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="713.8" y="707.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="716.8" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (4 samples, 0.05%)</title><rect x="714.4" y="739.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="717.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="714.7" y="723.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="717.7" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="714.7" y="707.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="717.7" y="718.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (4 samples, 0.05%)</title><rect x="715.2" y="771.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="718.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.05%)</title><rect x="715.2" y="755.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="718.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="715.2" y="739.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="718.2" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="715.5" y="739.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="718.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/BytesUtils.keyByteBuffer (5 samples, 0.07%)</title><rect x="715.8" y="835.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="718.8" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.07%)</title><rect x="715.8" y="819.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="718.8" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.07%)</title><rect x="715.8" y="803.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="718.8" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="715.8" y="787.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="718.8" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="715.8" y="771.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="718.8" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="716.2" y="787.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="719.2" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/CellUtils.getFromResponse (20 samples, 0.26%)</title><rect x="716.6" y="835.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="719.6" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (9 samples, 0.12%)</title><rect x="716.6" y="819.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="719.6" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (9 samples, 0.12%)</title><rect x="716.6" y="803.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="719.6" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.04%)</title><rect x="717.0" y="787.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="720.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.04%)</title><rect x="717.0" y="771.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="720.0" y="782.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (3 samples, 0.04%)</title><rect x="717.0" y="755.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="720.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.04%)</title><rect x="717.5" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="720.5" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.04%)</title><rect x="717.5" y="771.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="720.5" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="717.9" y="819.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="720.9" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="717.9" y="803.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="720.9" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (5 samples, 0.07%)</title><rect x="718.4" y="819.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="721.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.05%)</title><rect x="718.6" y="803.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="721.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.05%)</title><rect x="718.6" y="787.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="721.6" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/cell/CellValue.present (2 samples, 0.03%)</title><rect x="719.3" y="819.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="722.3" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/CellUtils.merge (40 samples, 0.52%)</title><rect x="719.6" y="835.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="722.6" y="846.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.03%)</title><rect x="719.8" y="819.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="722.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.03%)</title><rect x="719.8" y="803.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="722.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (11 samples, 0.14%)</title><rect x="720.1" y="819.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="723.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (11 samples, 0.14%)</title><rect x="720.1" y="803.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="723.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (11 samples, 0.14%)</title><rect x="720.1" y="787.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="723.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (11 samples, 0.14%)</title><rect x="720.1" y="771.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="723.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (11 samples, 0.14%)</title><rect x="720.1" y="755.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="723.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/PipelineHelper.&lt;init&gt; (2 samples, 0.03%)</title><rect x="721.5" y="739.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="724.5" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (26 samples, 0.34%)</title><rect x="721.8" y="819.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="724.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (25 samples, 0.33%)</title><rect x="721.9" y="803.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="724.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (24 samples, 0.31%)</title><rect x="721.9" y="787.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="724.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (22 samples, 0.29%)</title><rect x="722.1" y="771.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="725.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (21 samples, 0.27%)</title><rect x="722.1" y="755.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="725.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (17 samples, 0.22%)</title><rect x="722.1" y="739.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="725.1" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (4 samples, 0.05%)</title><rect x="722.1" y="723.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="725.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (4 samples, 0.05%)</title><rect x="722.1" y="707.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="725.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.accept (4 samples, 0.05%)</title><rect x="722.1" y="691.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="725.1" y="702.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator$$Lambda$113/1866056728.apply (3 samples, 0.04%)</title><rect x="722.2" y="675.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="725.2" y="686.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator.lambda$maxBy$1 (3 samples, 0.04%)</title><rect x="722.2" y="659.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="725.2" y="670.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$109/1655217853.compare (3 samples, 0.04%)</title><rect x="722.2" y="643.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="725.2" y="654.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparingLong$6043328a$1 (2 samples, 0.03%)</title><rect x="722.4" y="627.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="725.4" y="638.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (2 samples, 0.03%)</title><rect x="722.7" y="723.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="725.7" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.estimateSize (2 samples, 0.03%)</title><rect x="722.7" y="707.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="725.7" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.getFence (2 samples, 0.03%)</title><rect x="722.7" y="691.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="725.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (2 samples, 0.03%)</title><rect x="722.7" y="675.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="725.7" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (11 samples, 0.14%)</title><rect x="723.0" y="723.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="726.0" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (9 samples, 0.12%)</title><rect x="723.0" y="707.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="726.0" y="718.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (9 samples, 0.12%)</title><rect x="723.0" y="691.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="726.0" y="702.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (8 samples, 0.10%)</title><rect x="723.0" y="675.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="726.0" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (6 samples, 0.08%)</title><rect x="723.2" y="659.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="726.2" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (5 samples, 0.07%)</title><rect x="723.2" y="643.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="726.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (2 samples, 0.03%)</title><rect x="723.3" y="627.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="726.3" y="638.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="723.6" y="627.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="726.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.03%)</title><rect x="724.4" y="707.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="727.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/DistinctOps$1$2.begin (2 samples, 0.03%)</title><rect x="724.4" y="691.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="727.4" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.03%)</title><rect x="724.4" y="675.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="727.4" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (4 samples, 0.05%)</title><rect x="724.7" y="739.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="727.7" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/CellUtils.value (97 samples, 1.26%)</title><rect x="725.8" y="835.0" width="14.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="728.8" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (8 samples, 0.10%)</title><rect x="726.4" y="819.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="729.4" y="830.0"></text>
</g>
<g>
<title>java/net/URLStreamHandler.toExternalForm (2 samples, 0.03%)</title><rect x="726.4" y="803.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="729.4" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.03%)</title><rect x="726.7" y="803.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="729.7" y="814.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.05%)</title><rect x="727.0" y="803.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="730.0" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.hasNext (2 samples, 0.03%)</title><rect x="727.8" y="819.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="730.8" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (61 samples, 0.79%)</title><rect x="728.1" y="819.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="731.1" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (49 samples, 0.64%)</title><rect x="728.7" y="803.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="731.7" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.03%)</title><rect x="728.7" y="787.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="731.7" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (47 samples, 0.61%)</title><rect x="729.0" y="787.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="732.0" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (46 samples, 0.60%)</title><rect x="729.2" y="771.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="732.2" y="782.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (35 samples, 0.46%)</title><rect x="729.2" y="755.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="732.2" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (35 samples, 0.46%)</title><rect x="729.2" y="739.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="732.2" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (12 samples, 0.16%)</title><rect x="729.6" y="723.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="732.6" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (11 samples, 0.14%)</title><rect x="729.8" y="707.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="732.8" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (11 samples, 0.14%)</title><rect x="729.8" y="691.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="732.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (11 samples, 0.14%)</title><rect x="729.8" y="675.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="732.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (11 samples, 0.14%)</title><rect x="729.8" y="659.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="732.8" y="670.0"></text>
</g>
<g>
<title>java/util/AbstractMap$SimpleImmutableEntry.&lt;init&gt; (2 samples, 0.03%)</title><rect x="729.8" y="643.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="732.8" y="654.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.03%)</title><rect x="729.8" y="627.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="732.8" y="638.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.03%)</title><rect x="729.8" y="611.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="732.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (9 samples, 0.12%)</title><rect x="730.1" y="643.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="733.1" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (17 samples, 0.22%)</title><rect x="731.9" y="723.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="734.9" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3 samples, 0.04%)</title><rect x="732.2" y="707.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="735.2" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2 samples, 0.03%)</title><rect x="732.4" y="691.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="735.4" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2 samples, 0.03%)</title><rect x="732.4" y="675.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="735.4" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2 samples, 0.03%)</title><rect x="732.4" y="659.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="735.4" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2 samples, 0.03%)</title><rect x="732.4" y="643.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="735.4" y="654.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="732.7" y="707.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="735.7" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/table/MemoryTablePool$$Lambda$94/1244624834.apply (4 samples, 0.05%)</title><rect x="733.0" y="707.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="736.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/cell/Cell.getKey (3 samples, 0.04%)</title><rect x="733.2" y="691.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="736.2" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.04%)</title><rect x="733.2" y="675.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="736.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils$$Lambda$98/1247110586.apply (6 samples, 0.08%)</title><rect x="733.6" y="707.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="736.6" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/cell/Cell.getKey (5 samples, 0.07%)</title><rect x="733.8" y="691.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="736.8" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.07%)</title><rect x="733.8" y="675.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="736.8" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="734.2" y="659.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="737.2" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="734.2" y="643.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="737.2" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (9 samples, 0.12%)</title><rect x="734.5" y="755.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="737.5" y="766.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (9 samples, 0.12%)</title><rect x="734.5" y="739.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="737.5" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="735.5" y="723.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="738.5" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/table/MemoryTablePool$$Lambda$94/1244624834.apply (2 samples, 0.03%)</title><rect x="735.9" y="755.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="738.9" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/cell/Cell.getKey (2 samples, 0.03%)</title><rect x="735.9" y="739.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="738.9" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="735.9" y="723.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="738.9" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="735.9" y="707.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="738.9" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="735.9" y="691.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="738.9" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="735.9" y="675.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="738.9" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="735.9" y="659.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="738.9" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (4 samples, 0.05%)</title><rect x="736.2" y="803.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="739.2" y="814.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.05%)</title><rect x="736.2" y="787.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="739.2" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/table/MemoryTablePool$$Lambda$94/1244624834.apply (3 samples, 0.04%)</title><rect x="736.8" y="803.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="739.8" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/cell/Cell.getKey (3 samples, 0.04%)</title><rect x="736.8" y="787.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="739.8" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.04%)</title><rect x="736.8" y="771.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="739.8" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="736.8" y="755.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="739.8" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="736.8" y="739.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="739.8" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="736.8" y="723.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="739.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/cell/Cell.getKey (17 samples, 0.22%)</title><rect x="737.5" y="819.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="740.5" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (17 samples, 0.22%)</title><rect x="737.5" y="803.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="740.5" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (16 samples, 0.21%)</title><rect x="737.6" y="787.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="740.6" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (16 samples, 0.21%)</title><rect x="737.6" y="771.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="740.6" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (15 samples, 0.20%)</title><rect x="737.8" y="755.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="740.8" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (13 samples, 0.17%)</title><rect x="738.1" y="739.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="741.1" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="738.5" y="723.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="741.5" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="738.5" y="707.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="741.5" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.03%)</title><rect x="738.5" y="691.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="741.5" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.08%)</title><rect x="738.8" y="723.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="741.8" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.08%)</title><rect x="738.8" y="707.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="741.8" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.07%)</title><rect x="739.0" y="691.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="742.0" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="739.8" y="723.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="742.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/cell/CellValue.present (3 samples, 0.04%)</title><rect x="740.2" y="819.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="743.2" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/cell/CellValue.&lt;init&gt; (3 samples, 0.04%)</title><rect x="740.2" y="803.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="743.2" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.from (35 samples, 0.46%)</title><rect x="740.7" y="835.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="743.7" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/408667513.linkToTargetMethod (14 samples, 0.18%)</title><rect x="741.0" y="819.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="744.0" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/842842.invoke (14 samples, 0.18%)</title><rect x="741.0" y="803.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="744.0" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1109445687.invokeStatic (10 samples, 0.13%)</title><rect x="741.1" y="787.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="744.1" y="798.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (2 samples, 0.03%)</title><rect x="741.8" y="771.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="744.8" y="782.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.checkOverflow (2 samples, 0.03%)</title><rect x="741.8" y="755.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="744.8" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="742.1" y="771.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="745.1" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1495564422.invokeStatic (2 samples, 0.03%)</title><rect x="742.7" y="787.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="745.7" y="798.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.03%)</title><rect x="742.7" y="771.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="745.7" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.03%)</title><rect x="742.7" y="755.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="745.7" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (7 samples, 0.09%)</title><rect x="743.1" y="819.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="746.1" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (3 samples, 0.04%)</title><rect x="744.2" y="819.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="747.2" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/BytesUtils.body (9 samples, 0.12%)</title><rect x="744.7" y="819.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="747.7" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.05%)</title><rect x="745.0" y="803.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="748.0" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="745.3" y="787.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="748.3" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="745.3" y="771.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="748.3" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.04%)</title><rect x="745.6" y="803.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="748.6" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="745.8" y="787.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="748.8" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="745.8" y="771.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="748.8" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.sendResponse (1,023 samples, 13.32%)</title><rect x="746.1" y="883.0" width="157.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="749.1" y="894.0">ru/mail/polis/utils/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,023 samples, 13.32%)</title><rect x="746.1" y="867.0" width="157.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="749.1" y="878.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (12 samples, 0.16%)</title><rect x="749.3" y="851.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="752.3" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (12 samples, 0.16%)</title><rect x="749.3" y="835.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="752.3" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 0.14%)</title><rect x="749.4" y="819.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="752.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.04%)</title><rect x="750.7" y="803.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="753.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (981 samples, 12.78%)</title><rect x="751.1" y="851.0" width="150.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="754.1" y="862.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (48 samples, 0.63%)</title><rect x="751.1" y="835.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="754.1" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.05%)</title><rect x="752.5" y="819.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="755.5" y="830.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (34 samples, 0.44%)</title><rect x="753.3" y="819.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="756.3" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (13 samples, 0.17%)</title><rect x="753.7" y="803.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="756.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.05%)</title><rect x="754.8" y="787.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="757.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="755.4" y="787.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="758.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="755.4" y="771.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="758.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (18 samples, 0.23%)</title><rect x="755.7" y="803.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="758.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (17 samples, 0.22%)</title><rect x="755.9" y="787.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="758.9" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (933 samples, 12.15%)</title><rect x="758.5" y="835.0" width="143.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="761.5" y="846.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/Session.write (931 samples, 12.12%)</title><rect x="758.8" y="819.0" width="143.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="761.8" y="830.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>gettimeofday (7 samples, 0.09%)</title><rect x="758.8" y="803.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="761.8" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (921 samples, 11.99%)</title><rect x="759.9" y="803.0" width="141.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="762.9" y="814.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (919 samples, 11.97%)</title><rect x="760.2" y="787.0" width="141.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="763.2" y="798.0">one/nio/net/Native..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.03%)</title><rect x="761.1" y="771.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="764.1" y="782.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.31%)</title><rect x="761.4" y="771.0" width="3.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="764.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.31%)</title><rect x="761.4" y="755.0" width="3.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="764.4" y="766.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (16 samples, 0.21%)</title><rect x="761.4" y="739.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="764.4" y="750.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.03%)</title><rect x="762.0" y="723.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="765.0" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.12%)</title><rect x="762.3" y="723.0" width="1.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="765.3" y="734.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="762.8" y="707.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="765.8" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (2 samples, 0.03%)</title><rect x="763.3" y="707.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="766.3" y="718.0"></text>
</g>
<g>
<title>__send (3 samples, 0.04%)</title><rect x="763.9" y="739.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="766.9" y="750.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.05%)</title><rect x="764.5" y="739.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="767.5" y="750.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.03%)</title><rect x="765.1" y="771.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="768.1" y="782.0"></text>
</g>
<g>
<title>__send (885 samples, 11.52%)</title><rect x="765.4" y="771.0" width="136.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="768.4" y="782.0">__send</text>
</g>
<g>
<title>[unknown] (853 samples, 11.11%)</title><rect x="770.3" y="755.0" width="131.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="773.3" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (853 samples, 11.11%)</title><rect x="770.3" y="739.0" width="131.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="773.3" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (838 samples, 10.91%)</title><rect x="772.6" y="723.0" width="128.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="775.6" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (833 samples, 10.85%)</title><rect x="773.4" y="707.0" width="128.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="776.4" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (826 samples, 10.76%)</title><rect x="774.5" y="691.0" width="126.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="777.5" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (821 samples, 10.69%)</title><rect x="775.3" y="675.0" width="126.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="778.3" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (817 samples, 10.64%)</title><rect x="775.9" y="659.0" width="125.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="778.9" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (812 samples, 10.57%)</title><rect x="776.6" y="643.0" width="124.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="779.6" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (768 samples, 10.00%)</title><rect x="783.4" y="627.0" width="118.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="786.4" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (739 samples, 9.62%)</title><rect x="787.9" y="611.0" width="113.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="790.9" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (714 samples, 9.30%)</title><rect x="791.7" y="595.0" width="109.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="794.7" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (676 samples, 8.80%)</title><rect x="797.5" y="579.0" width="103.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="800.5" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (635 samples, 8.27%)</title><rect x="803.8" y="563.0" width="97.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="806.8" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (620 samples, 8.07%)</title><rect x="806.1" y="547.0" width="95.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="809.1" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (615 samples, 8.01%)</title><rect x="806.9" y="531.0" width="94.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="809.9" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (609 samples, 7.93%)</title><rect x="807.8" y="515.0" width="93.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="810.8" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (595 samples, 7.75%)</title><rect x="810.0" y="499.0" width="91.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="813.0" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (586 samples, 7.63%)</title><rect x="811.4" y="483.0" width="90.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="814.4" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (561 samples, 7.31%)</title><rect x="815.2" y="467.0" width="86.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="818.2" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (542 samples, 7.06%)</title><rect x="818.1" y="451.0" width="83.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="821.1" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (524 samples, 6.82%)</title><rect x="820.9" y="435.0" width="80.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="823.9" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (511 samples, 6.65%)</title><rect x="822.9" y="419.0" width="78.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="825.9" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (481 samples, 6.26%)</title><rect x="827.5" y="403.0" width="73.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="830.5" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (479 samples, 6.24%)</title><rect x="827.8" y="387.0" width="73.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="830.8" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (466 samples, 6.07%)</title><rect x="829.8" y="371.0" width="71.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="832.8" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (450 samples, 5.86%)</title><rect x="832.3" y="355.0" width="69.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="835.3" y="366.0">[unknown]</text>
</g>
<g>
<title>[unknown] (446 samples, 5.81%)</title><rect x="832.9" y="339.0" width="68.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="835.9" y="350.0">[unknown]</text>
</g>
<g>
<title>[unknown] (435 samples, 5.66%)</title><rect x="834.6" y="323.0" width="66.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="837.6" y="334.0">[unknown]</text>
</g>
<g>
<title>[unknown] (429 samples, 5.59%)</title><rect x="835.5" y="307.0" width="65.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="838.5" y="318.0">[unknown]</text>
</g>
<g>
<title>[unknown] (423 samples, 5.51%)</title><rect x="836.4" y="291.0" width="65.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="839.4" y="302.0">[unknown]</text>
</g>
<g>
<title>[unknown] (420 samples, 5.47%)</title><rect x="836.9" y="275.0" width="64.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="839.9" y="286.0">[unknown]</text>
</g>
<g>
<title>[unknown] (416 samples, 5.42%)</title><rect x="837.5" y="259.0" width="63.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="840.5" y="270.0">[unknown]</text>
</g>
<g>
<title>[unknown] (399 samples, 5.20%)</title><rect x="840.1" y="243.0" width="61.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="843.1" y="254.0">[unkno..</text>
</g>
<g>
<title>[unknown] (376 samples, 4.90%)</title><rect x="843.6" y="227.0" width="57.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="846.6" y="238.0">[unkno..</text>
</g>
<g>
<title>[unknown] (358 samples, 4.66%)</title><rect x="846.4" y="211.0" width="55.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="849.4" y="222.0">[unkn..</text>
</g>
<g>
<title>[unknown] (311 samples, 4.05%)</title><rect x="853.6" y="195.0" width="47.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="856.6" y="206.0">[unk..</text>
</g>
<g>
<title>[unknown] (268 samples, 3.49%)</title><rect x="860.2" y="179.0" width="41.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="863.2" y="190.0">[un..</text>
</g>
<g>
<title>[unknown] (260 samples, 3.39%)</title><rect x="861.5" y="163.0" width="39.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="864.5" y="174.0">[un..</text>
</g>
<g>
<title>[unknown] (251 samples, 3.27%)</title><rect x="862.8" y="147.0" width="38.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="865.8" y="158.0">[un..</text>
</g>
<g>
<title>[unknown] (16 samples, 0.21%)</title><rect x="899.0" y="131.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="902.0" y="142.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.16%)</title><rect x="899.6" y="115.0" width="1.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="902.6" y="126.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="900.8" y="99.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="903.8" y="110.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="901.4" y="803.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="904.4" y="814.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="901.4" y="787.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="904.4" y="798.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.04%)</title><rect x="901.4" y="771.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="904.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.10%)</title><rect x="901.9" y="851.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="904.9" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.08%)</title><rect x="902.2" y="835.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="905.2" y="846.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="902.2" y="819.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="905.2" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.05%)</title><rect x="902.5" y="819.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="905.5" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="902.8" y="803.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="905.8" y="814.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,275 samples, 16.60%)</title><rect x="903.3" y="963.0" width="195.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="906.3" y="974.0">one/nio/server/SelectorTh..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (19 samples, 0.25%)</title><rect x="904.2" y="947.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="907.2" y="958.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (16 samples, 0.21%)</title><rect x="904.6" y="931.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="907.6" y="942.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (334 samples, 4.35%)</title><rect x="907.1" y="947.0" width="51.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="910.1" y="958.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (9 samples, 0.12%)</title><rect x="907.7" y="931.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="910.7" y="942.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (8 samples, 0.10%)</title><rect x="907.9" y="915.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="910.9" y="926.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (321 samples, 4.18%)</title><rect x="909.1" y="931.0" width="49.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="912.1" y="942.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (7 samples, 0.09%)</title><rect x="911.1" y="915.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="914.1" y="926.0"></text>
</g>
<g>
<title>[unknown] (278 samples, 3.62%)</title><rect x="912.2" y="915.0" width="42.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="915.2" y="926.0">[unk..</text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="912.2" y="899.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="915.2" y="910.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="912.2" y="883.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="915.2" y="894.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="912.3" y="867.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="915.3" y="878.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (6 samples, 0.08%)</title><rect x="912.8" y="899.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="915.8" y="910.0"></text>
</g>
<g>
<title>epoll_wait (267 samples, 3.48%)</title><rect x="913.9" y="899.0" width="41.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="916.9" y="910.0">epo..</text>
</g>
<g>
<title>[unknown] (222 samples, 2.89%)</title><rect x="920.8" y="883.0" width="34.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="923.8" y="894.0">[u..</text>
</g>
<g>
<title>[unknown] (222 samples, 2.89%)</title><rect x="920.8" y="867.0" width="34.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="923.8" y="878.0">[u..</text>
</g>
<g>
<title>[unknown] (214 samples, 2.79%)</title><rect x="922.0" y="851.0" width="32.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="925.0" y="862.0">[u..</text>
</g>
<g>
<title>[unknown] (213 samples, 2.77%)</title><rect x="922.2" y="835.0" width="32.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="925.2" y="846.0">[u..</text>
</g>
<g>
<title>[unknown] (211 samples, 2.75%)</title><rect x="922.5" y="819.0" width="32.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="925.5" y="830.0">[u..</text>
</g>
<g>
<title>[unknown] (173 samples, 2.25%)</title><rect x="928.3" y="803.0" width="26.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="931.3" y="814.0">[..</text>
</g>
<g>
<title>[unknown] (143 samples, 1.86%)</title><rect x="932.9" y="787.0" width="22.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="935.9" y="798.0">[..</text>
</g>
<g>
<title>[unknown] (109 samples, 1.42%)</title><rect x="938.1" y="771.0" width="16.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="941.1" y="782.0"></text>
</g>
<g>
<title>[unknown] (81 samples, 1.05%)</title><rect x="942.4" y="755.0" width="12.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="945.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (50 samples, 0.65%)</title><rect x="947.2" y="739.0" width="7.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="950.2" y="750.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="954.3" y="723.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="957.3" y="734.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="954.3" y="707.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="957.3" y="718.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="954.3" y="691.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="957.3" y="702.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="954.3" y="675.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="957.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="954.4" y="659.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="957.4" y="670.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="954.4" y="643.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="957.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="954.4" y="627.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="957.4" y="638.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (3 samples, 0.04%)</title><rect x="954.9" y="915.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="957.9" y="926.0"></text>
</g>
<g>
<title>_init (2 samples, 0.03%)</title><rect x="955.4" y="915.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="958.4" y="926.0"></text>
</g>
<g>
<title>clock_gettime (14 samples, 0.18%)</title><rect x="955.7" y="915.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="958.7" y="926.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.08%)</title><rect x="956.7" y="899.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="959.7" y="910.0"></text>
</g>
<g>
<title>epoll_wait (4 samples, 0.05%)</title><rect x="957.8" y="915.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="960.8" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (915 samples, 11.92%)</title><rect x="958.6" y="947.0" width="140.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="961.6" y="958.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>_init (2 samples, 0.03%)</title><rect x="959.2" y="931.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="962.2" y="942.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="959.5" y="931.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="962.5" y="942.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (900 samples, 11.72%)</title><rect x="960.0" y="931.0" width="138.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="963.0" y="942.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (599 samples, 7.80%)</title><rect x="960.4" y="915.0" width="92.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="963.4" y="926.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (489 samples, 6.37%)</title><rect x="966.0" y="899.0" width="75.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="969.0" y="910.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (483 samples, 6.29%)</title><rect x="966.9" y="883.0" width="74.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="969.9" y="894.0">one/nio/..</text>
</g>
<g>
<title>RequestHandler2_entity.handleRequest (433 samples, 5.64%)</title><rect x="967.6" y="867.0" width="66.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="970.6" y="878.0">Request..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (49 samples, 0.64%)</title><rect x="967.6" y="851.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="970.6" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (16 samples, 0.21%)</title><rect x="969.2" y="835.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="972.2" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (15 samples, 0.20%)</title><rect x="969.3" y="819.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="972.3" y="830.0"></text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.04%)</title><rect x="970.9" y="803.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="973.9" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="971.3" y="803.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="974.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (4 samples, 0.05%)</title><rect x="971.6" y="835.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="974.6" y="846.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.05%)</title><rect x="971.6" y="819.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="974.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="971.9" y="803.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="974.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.08%)</title><rect x="972.3" y="835.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="975.3" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.07%)</title><rect x="972.4" y="819.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="975.4" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.04%)</title><rect x="972.7" y="803.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="975.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (13 samples, 0.17%)</title><rect x="973.2" y="835.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="976.2" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.10%)</title><rect x="973.9" y="819.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="976.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.10%)</title><rect x="973.9" y="803.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="976.9" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.10%)</title><rect x="973.9" y="787.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="976.9" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController.entity (384 samples, 5.00%)</title><rect x="975.2" y="851.0" width="59.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="978.2" y="862.0">ru/mai..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1022025234.linkToTargetMethod (3 samples, 0.04%)</title><rect x="976.6" y="835.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="979.6" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/89556290.invokeStatic (3 samples, 0.04%)</title><rect x="976.6" y="819.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="979.6" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController$$Lambda$83/2111296553.get$Lambda (3 samples, 0.04%)</title><rect x="976.6" y="803.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="979.6" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2063398541.linkToTargetMethod (2 samples, 0.03%)</title><rect x="977.0" y="835.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="980.0" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1816314841.invokeStatic (2 samples, 0.03%)</title><rect x="977.0" y="819.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="980.0" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController$$Lambda$62/227632755.get$Lambda (2 samples, 0.03%)</title><rect x="977.0" y="803.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="980.0" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController$$Lambda$62/227632755.&lt;init&gt; (2 samples, 0.03%)</title><rect x="977.0" y="787.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="980.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.09%)</title><rect x="977.3" y="835.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="980.3" y="846.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.05%)</title><rect x="977.5" y="819.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="980.5" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.05%)</title><rect x="977.5" y="803.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="980.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="978.1" y="819.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="981.1" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="978.1" y="803.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="981.1" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController$RF.of (33 samples, 0.43%)</title><rect x="978.4" y="835.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="981.4" y="846.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (2 samples, 0.03%)</title><rect x="978.9" y="819.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="981.9" y="830.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (2 samples, 0.03%)</title><rect x="978.9" y="803.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="981.9" y="814.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.&lt;init&gt; (2 samples, 0.03%)</title><rect x="978.9" y="787.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="981.9" y="798.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.&lt;init&gt; (2 samples, 0.03%)</title><rect x="978.9" y="771.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="981.9" y="782.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (25 samples, 0.33%)</title><rect x="979.2" y="819.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="982.2" y="830.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (12 samples, 0.16%)</title><rect x="979.2" y="803.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="982.2" y="814.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (11 samples, 0.14%)</title><rect x="979.3" y="787.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="982.3" y="798.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (6 samples, 0.08%)</title><rect x="979.8" y="771.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="982.8" y="782.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (6 samples, 0.08%)</title><rect x="979.8" y="755.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="982.8" y="766.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1$1.separatorStart (3 samples, 0.04%)</title><rect x="980.1" y="739.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="983.1" y="750.0"></text>
</g>
<g>
<title>com/google/common/base/CharMatcher.indexIn (2 samples, 0.03%)</title><rect x="980.2" y="723.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="983.2" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="980.7" y="771.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="983.7" y="782.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (8 samples, 0.10%)</title><rect x="981.3" y="803.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="984.3" y="814.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (8 samples, 0.10%)</title><rect x="981.3" y="787.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="984.3" y="798.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (8 samples, 0.10%)</title><rect x="981.3" y="771.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="984.3" y="782.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1$1.&lt;init&gt; (8 samples, 0.10%)</title><rect x="981.3" y="755.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="984.3" y="766.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.&lt;init&gt; (7 samples, 0.09%)</title><rect x="981.5" y="739.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="984.5" y="750.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="982.1" y="723.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="985.1" y="734.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (3 samples, 0.04%)</title><rect x="982.1" y="707.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="985.1" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.03%)</title><rect x="982.6" y="803.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="985.6" y="814.0"></text>
</g>
<g>
<title>java/util/AbstractList.&lt;init&gt; (2 samples, 0.03%)</title><rect x="982.6" y="787.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="985.6" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.04%)</title><rect x="983.0" y="819.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="986.0" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (2 samples, 0.03%)</title><rect x="983.2" y="803.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="986.2" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (2 samples, 0.03%)</title><rect x="983.2" y="787.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="986.2" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController.asyncExecute (330 samples, 4.30%)</title><rect x="983.5" y="835.0" width="50.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="986.5" y="846.0">ru/ma..</text>
</g>
<g>
<title>one/nio/server/Server.asyncExecute (330 samples, 4.30%)</title><rect x="983.5" y="819.0" width="50.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="986.5" y="830.0">one/n..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (330 samples, 4.30%)</title><rect x="983.5" y="803.0" width="50.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="986.5" y="814.0">java/..</text>
</g>
<g>
<title>one/nio/server/WorkerPool$WaitingSynchronousQueue.offer (325 samples, 4.23%)</title><rect x="984.2" y="787.0" width="50.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="987.2" y="798.0">one/n..</text>
</g>
<g>
<title>one/nio/server/WorkerPool$WaitingSynchronousQueue.offer (325 samples, 4.23%)</title><rect x="984.2" y="771.0" width="50.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="987.2" y="782.0">one/n..</text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.offer (325 samples, 4.23%)</title><rect x="984.2" y="755.0" width="50.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="987.2" y="766.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (324 samples, 4.22%)</title><rect x="984.4" y="739.0" width="49.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="987.4" y="750.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack$SNode.tryMatch (302 samples, 3.93%)</title><rect x="985.2" y="723.0" width="46.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="988.2" y="734.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (300 samples, 3.91%)</title><rect x="985.5" y="707.0" width="46.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="988.5" y="718.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (300 samples, 3.91%)</title><rect x="985.5" y="691.0" width="46.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="988.5" y="702.0">jdk/..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.03%)</title><rect x="986.1" y="675.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="989.1" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (2 samples, 0.03%)</title><rect x="986.4" y="675.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="989.4" y="686.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.03%)</title><rect x="986.7" y="675.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="989.7" y="686.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.05%)</title><rect x="987.0" y="675.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="990.0" y="686.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.03%)</title><rect x="987.6" y="675.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="990.6" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (43 samples, 0.56%)</title><rect x="987.9" y="675.0" width="6.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="990.9" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (5 samples, 0.07%)</title><rect x="989.0" y="659.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.0" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (5 samples, 0.07%)</title><rect x="989.8" y="659.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.8" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (7 samples, 0.09%)</title><rect x="990.5" y="659.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="993.5" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (9 samples, 0.12%)</title><rect x="991.8" y="659.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="994.8" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (3 samples, 0.04%)</title><rect x="993.5" y="659.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.5" y="670.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.03%)</title><rect x="993.9" y="659.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.9" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="994.2" y="659.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="997.2" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.05%)</title><rect x="994.5" y="675.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="997.5" y="686.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (235 samples, 3.06%)</title><rect x="995.5" y="675.0" width="36.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="998.5" y="686.0">pth..</text>
</g>
<g>
<title>[unknown] (195 samples, 2.54%)</title><rect x="1001.6" y="659.0" width="30.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1004.6" y="670.0">[u..</text>
</g>
<g>
<title>[unknown] (195 samples, 2.54%)</title><rect x="1001.6" y="643.0" width="30.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1004.6" y="654.0">[u..</text>
</g>
<g>
<title>[unknown] (171 samples, 2.23%)</title><rect x="1005.3" y="627.0" width="26.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1008.3" y="638.0">[..</text>
</g>
<g>
<title>[unknown] (169 samples, 2.20%)</title><rect x="1005.6" y="611.0" width="26.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1008.6" y="622.0">[..</text>
</g>
<g>
<title>[unknown] (167 samples, 2.17%)</title><rect x="1005.9" y="595.0" width="25.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1008.9" y="606.0">[..</text>
</g>
<g>
<title>[unknown] (155 samples, 2.02%)</title><rect x="1007.8" y="579.0" width="23.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1010.8" y="590.0">[..</text>
</g>
<g>
<title>[unknown] (148 samples, 1.93%)</title><rect x="1008.8" y="563.0" width="22.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1011.8" y="574.0">[..</text>
</g>
<g>
<title>[unknown] (140 samples, 1.82%)</title><rect x="1010.1" y="547.0" width="21.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1013.1" y="558.0">[..</text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="1031.0" y="531.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1034.0" y="542.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="1031.0" y="515.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1034.0" y="526.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="1031.0" y="499.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1034.0" y="510.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="1031.1" y="483.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1034.1" y="494.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="1031.1" y="467.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1034.1" y="478.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1031.3" y="451.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1034.3" y="462.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1031.3" y="435.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1034.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.casHead (2 samples, 0.03%)</title><rect x="1031.6" y="723.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1034.6" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.03%)</title><rect x="1031.6" y="707.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1034.6" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="1031.6" y="691.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1034.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.snode (11 samples, 0.14%)</title><rect x="1031.9" y="723.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1034.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack$SNode.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1033.3" y="707.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1036.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.05%)</title><rect x="1033.6" y="723.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1036.6" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (4 samples, 0.05%)</title><rect x="1034.2" y="867.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1037.2" y="878.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (12 samples, 0.16%)</title><rect x="1034.8" y="867.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1037.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 0.16%)</title><rect x="1034.8" y="851.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1037.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.07%)</title><rect x="1034.8" y="835.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1037.8" y="846.0"></text>
</g>
<g>
<title>java/lang/String.equals (5 samples, 0.07%)</title><rect x="1034.8" y="819.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1037.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.09%)</title><rect x="1035.6" y="835.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1038.6" y="846.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.08%)</title><rect x="1035.7" y="819.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1038.7" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.05%)</title><rect x="1036.0" y="803.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1039.0" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (29 samples, 0.38%)</title><rect x="1036.6" y="867.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1039.6" y="878.0"></text>
</g>
<g>
<title>java/lang/String.substring (29 samples, 0.38%)</title><rect x="1036.6" y="851.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1039.6" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (28 samples, 0.36%)</title><rect x="1036.8" y="835.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1039.8" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (27 samples, 0.35%)</title><rect x="1036.8" y="819.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1039.8" y="830.0"></text>
</g>
<g>
<title>RequestHandler2_entity.handleRequest (10 samples, 0.13%)</title><rect x="1036.9" y="803.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1039.9" y="814.0"></text>
</g>
<g>
<title>itable stub (8 samples, 0.10%)</title><rect x="1038.5" y="803.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1041.5" y="814.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (8 samples, 0.10%)</title><rect x="1039.7" y="803.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1042.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (41 samples, 0.53%)</title><rect x="1041.1" y="899.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1044.1" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (19 samples, 0.25%)</title><rect x="1042.5" y="883.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1045.5" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (19 samples, 0.25%)</title><rect x="1042.5" y="867.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1045.5" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (13 samples, 0.17%)</title><rect x="1045.4" y="883.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1048.4" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.05%)</title><rect x="1046.8" y="867.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1049.8" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (17 samples, 0.22%)</title><rect x="1047.6" y="899.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1050.6" y="910.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (14 samples, 0.18%)</title><rect x="1048.0" y="883.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1051.0" y="894.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="1048.0" y="867.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1051.0" y="878.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (12 samples, 0.16%)</title><rect x="1048.3" y="867.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1051.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="1048.5" y="851.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1051.5" y="862.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="1048.5" y="835.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1051.5" y="846.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.03%)</title><rect x="1048.5" y="819.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1051.5" y="830.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (9 samples, 0.12%)</title><rect x="1048.8" y="851.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1051.8" y="862.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (8 samples, 0.10%)</title><rect x="1048.9" y="835.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1051.9" y="846.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (8 samples, 0.10%)</title><rect x="1048.9" y="819.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1051.9" y="830.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.03%)</title><rect x="1049.9" y="803.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1052.9" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 0.20%)</title><rect x="1050.2" y="899.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1053.2" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.18%)</title><rect x="1050.3" y="883.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1053.3" y="894.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1052.0" y="867.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1055.0" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (298 samples, 3.88%)</title><rect x="1052.5" y="915.0" width="45.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1055.5" y="926.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (298 samples, 3.88%)</title><rect x="1052.5" y="899.0" width="45.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1055.5" y="910.0">one/..</text>
</g>
<g>
<title>[unknown] (60 samples, 0.78%)</title><rect x="1054.0" y="883.0" width="9.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1057.0" y="894.0"></text>
</g>
<g>
<title>[unknown] (60 samples, 0.78%)</title><rect x="1054.0" y="867.0" width="9.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1057.0" y="878.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (49 samples, 0.64%)</title><rect x="1054.0" y="851.0" width="7.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1057.0" y="862.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (7 samples, 0.09%)</title><rect x="1054.0" y="835.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1057.0" y="846.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.05%)</title><rect x="1055.1" y="835.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1058.1" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (4 samples, 0.05%)</title><rect x="1055.7" y="835.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1058.7" y="846.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (7 samples, 0.09%)</title><rect x="1056.3" y="835.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1059.3" y="846.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.05%)</title><rect x="1057.4" y="835.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1060.4" y="846.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (19 samples, 0.25%)</title><rect x="1058.0" y="835.0" width="2.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1061.0" y="846.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.05%)</title><rect x="1058.2" y="819.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.2" y="830.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (5 samples, 0.07%)</title><rect x="1058.8" y="819.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1061.8" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (3 samples, 0.04%)</title><rect x="1059.5" y="819.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1062.5" y="830.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.08%)</title><rect x="1060.0" y="819.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1063.0" y="830.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.05%)</title><rect x="1060.9" y="835.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1063.9" y="846.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.03%)</title><rect x="1061.5" y="851.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1064.5" y="862.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.03%)</title><rect x="1061.8" y="851.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1064.8" y="862.0"></text>
</g>
<g>
<title>recv (7 samples, 0.09%)</title><rect x="1062.2" y="851.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1065.2" y="862.0"></text>
</g>
<g>
<title>recv (227 samples, 2.96%)</title><rect x="1063.4" y="883.0" width="34.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1066.4" y="894.0">recv</text>
</g>
<g>
<title>[unknown] (196 samples, 2.55%)</title><rect x="1068.1" y="867.0" width="30.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1071.1" y="878.0">[u..</text>
</g>
<g>
<title>[unknown] (196 samples, 2.55%)</title><rect x="1068.1" y="851.0" width="30.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1071.1" y="862.0">[u..</text>
</g>
<g>
<title>[unknown] (167 samples, 2.17%)</title><rect x="1072.6" y="835.0" width="25.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1075.6" y="846.0">[..</text>
</g>
<g>
<title>[unknown] (164 samples, 2.14%)</title><rect x="1073.1" y="819.0" width="25.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1076.1" y="830.0">[..</text>
</g>
<g>
<title>[unknown] (155 samples, 2.02%)</title><rect x="1074.4" y="803.0" width="23.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1077.4" y="814.0">[..</text>
</g>
<g>
<title>[unknown] (151 samples, 1.97%)</title><rect x="1075.1" y="787.0" width="23.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1078.1" y="798.0">[..</text>
</g>
<g>
<title>[unknown] (145 samples, 1.89%)</title><rect x="1076.0" y="771.0" width="22.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1079.0" y="782.0">[..</text>
</g>
<g>
<title>[unknown] (111 samples, 1.45%)</title><rect x="1081.2" y="755.0" width="17.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1084.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (89 samples, 1.16%)</title><rect x="1084.6" y="739.0" width="13.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1087.6" y="750.0"></text>
</g>
<g>
<title>[unknown] (66 samples, 0.86%)</title><rect x="1088.1" y="723.0" width="10.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1091.1" y="734.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 0.63%)</title><rect x="1090.9" y="707.0" width="7.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1093.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.26%)</title><rect x="1095.2" y="691.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1098.2" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.08%)</title><rect x="1098.3" y="931.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1101.3" y="942.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.04%)</title><rect x="1098.4" y="915.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1101.4" y="926.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="1098.9" y="915.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1101.9" y="926.0"></text>
</g>
<g>
<title>start_thread (591 samples, 7.70%)</title><rect x="1099.2" y="963.0" width="90.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1102.2" y="974.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (591 samples, 7.70%)</title><rect x="1099.2" y="947.0" width="90.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1102.2" y="958.0">thread_nat..</text>
</g>
<g>
<title>Thread::call_run() (591 samples, 7.70%)</title><rect x="1099.2" y="931.0" width="90.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1102.2" y="942.0">Thread::ca..</text>
</g>
<g>
<title>GangWorker::loop() (114 samples, 1.48%)</title><rect x="1099.3" y="915.0" width="17.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.3" y="926.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (112 samples, 1.46%)</title><rect x="1099.3" y="899.0" width="17.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1102.3" y="910.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (31 samples, 0.40%)</title><rect x="1099.3" y="883.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1102.3" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.03%)</title><rect x="1099.5" y="867.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1102.5" y="878.0"></text>
</g>
<g>
<title>SpinPause (26 samples, 0.34%)</title><rect x="1100.1" y="867.0" width="4.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1103.1" y="878.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (75 samples, 0.98%)</title><rect x="1104.1" y="883.0" width="11.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.1" y="894.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (75 samples, 0.98%)</title><rect x="1104.1" y="867.0" width="11.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.1" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (75 samples, 0.98%)</title><rect x="1104.1" y="851.0" width="11.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.1" y="862.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (75 samples, 0.98%)</title><rect x="1104.1" y="835.0" width="11.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.1" y="846.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (73 samples, 0.95%)</title><rect x="1104.1" y="819.0" width="11.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.1" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (58 samples, 0.76%)</title><rect x="1104.1" y="803.0" width="8.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.1" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (32 samples, 0.42%)</title><rect x="1107.6" y="787.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.6" y="798.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.03%)</title><rect x="1110.4" y="771.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1113.4" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (12 samples, 0.16%)</title><rect x="1110.7" y="771.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.7" y="782.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (2 samples, 0.03%)</title><rect x="1111.3" y="755.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.3" y="766.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (6 samples, 0.08%)</title><rect x="1111.6" y="755.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.6" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.03%)</title><rect x="1112.6" y="787.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.6" y="798.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (14 samples, 0.18%)</title><rect x="1113.0" y="803.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.0" y="814.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (4 samples, 0.05%)</title><rect x="1113.5" y="787.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.5" y="798.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (4 samples, 0.05%)</title><rect x="1113.5" y="771.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.5" y="782.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (2 samples, 0.03%)</title><rect x="1113.8" y="755.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.8" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (5 samples, 0.07%)</title><rect x="1114.4" y="787.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.4" y="798.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.04%)</title><rect x="1114.7" y="771.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.7" y="782.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.03%)</title><rect x="1115.3" y="819.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.3" y="830.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 0.04%)</title><rect x="1115.6" y="883.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.6" y="894.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.03%)</title><rect x="1115.6" y="867.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.6" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.04%)</title><rect x="1116.1" y="883.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.1" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.03%)</title><rect x="1116.1" y="867.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.1" y="878.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.03%)</title><rect x="1116.1" y="851.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.1" y="862.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.03%)</title><rect x="1116.1" y="835.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.1" y="846.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.03%)</title><rect x="1116.1" y="819.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.1" y="830.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1116.5" y="899.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.5" y="910.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.03%)</title><rect x="1116.5" y="883.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.5" y="894.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (2 samples, 0.03%)</title><rect x="1116.5" y="867.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.5" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.03%)</title><rect x="1116.5" y="851.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1119.5" y="862.0"></text>
</g>
<g>
<title>JavaThread::run() (474 samples, 6.17%)</title><rect x="1116.9" y="915.0" width="72.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.9" y="926.0">JavaThre..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (474 samples, 6.17%)</title><rect x="1116.9" y="899.0" width="72.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.9" y="910.0">JavaThre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (469 samples, 6.11%)</title><rect x="1116.9" y="883.0" width="72.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.9" y="894.0">CompileB..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (469 samples, 6.11%)</title><rect x="1116.9" y="867.0" width="72.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.9" y="878.0">CompileB..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (445 samples, 5.80%)</title><rect x="1117.0" y="851.0" width="68.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.0" y="862.0">C2Compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (445 samples, 5.80%)</title><rect x="1117.0" y="835.0" width="68.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.0" y="846.0">Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (238 samples, 3.10%)</title><rect x="1117.2" y="819.0" width="36.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.2" y="830.0">Com..</text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.07%)</title><rect x="1117.2" y="803.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1120.2" y="814.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 0.05%)</title><rect x="1117.2" y="787.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.2" y="798.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.07%)</title><rect x="1117.9" y="803.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.9" y="814.0"></text>
</g>
<g>
<title>Matcher::match() (25 samples, 0.33%)</title><rect x="1118.9" y="803.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.9" y="814.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (5 samples, 0.07%)</title><rect x="1119.0" y="787.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.0" y="798.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (2 samples, 0.03%)</title><rect x="1119.5" y="771.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.5" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (19 samples, 0.25%)</title><rect x="1119.8" y="787.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.8" y="798.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (8 samples, 0.10%)</title><rect x="1119.9" y="771.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.9" y="782.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (8 samples, 0.10%)</title><rect x="1121.5" y="771.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.5" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.04%)</title><rect x="1121.8" y="755.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.8" y="766.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.04%)</title><rect x="1122.2" y="755.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.2" y="766.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.03%)</title><rect x="1122.2" y="739.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.2" y="750.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.03%)</title><rect x="1122.2" y="723.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.2" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (20 samples, 0.26%)</title><rect x="1122.8" y="803.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.8" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (20 samples, 0.26%)</title><rect x="1122.8" y="787.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.8" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1123.5" y="771.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.5" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (4 samples, 0.05%)</title><rect x="1123.8" y="771.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.8" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (3 samples, 0.04%)</title><rect x="1123.8" y="755.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.03%)</title><rect x="1124.4" y="771.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.4" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.09%)</title><rect x="1124.7" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.7" y="782.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.05%)</title><rect x="1125.2" y="755.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (181 samples, 2.36%)</title><rect x="1125.9" y="803.0" width="27.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.9" y="814.0">P..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (2 samples, 0.03%)</title><rect x="1125.9" y="787.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.9" y="798.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (5 samples, 0.07%)</title><rect x="1126.4" y="787.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.4" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (12 samples, 0.16%)</title><rect x="1127.2" y="787.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.2" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.04%)</title><rect x="1127.6" y="771.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.6" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (6 samples, 0.08%)</title><rect x="1128.1" y="771.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.1" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.03%)</title><rect x="1128.7" y="755.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.7" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (12 samples, 0.16%)</title><rect x="1129.0" y="787.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.0" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (7 samples, 0.09%)</title><rect x="1129.8" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.8" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (20 samples, 0.26%)</title><rect x="1130.8" y="787.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (42 samples, 0.55%)</title><rect x="1133.9" y="787.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.9" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (5 samples, 0.07%)</title><rect x="1135.3" y="771.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (13 samples, 0.17%)</title><rect x="1136.4" y="771.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.4" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.07%)</title><rect x="1137.6" y="755.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (10 samples, 0.13%)</title><rect x="1138.5" y="771.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.5" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.03%)</title><rect x="1138.7" y="755.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.7" y="766.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (7 samples, 0.09%)</title><rect x="1139.0" y="755.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.0" y="766.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.03%)</title><rect x="1140.1" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.1" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.178] (4 samples, 0.05%)</title><rect x="1140.7" y="787.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.7" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (18 samples, 0.23%)</title><rect x="1141.3" y="787.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.3" y="798.0"></text>
</g>
<g>
<title>RegMask::Size() const (9 samples, 0.12%)</title><rect x="1142.2" y="771.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.03%)</title><rect x="1144.1" y="787.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.1" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (28 samples, 0.36%)</title><rect x="1144.4" y="787.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.4" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (13 samples, 0.17%)</title><rect x="1146.2" y="771.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1147.9" y="755.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.9" y="766.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (3 samples, 0.04%)</title><rect x="1148.2" y="771.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1151.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.03%)</title><rect x="1148.7" y="787.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.7" y="798.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 0.07%)</title><rect x="1149.0" y="787.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.0" y="798.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 0.07%)</title><rect x="1149.0" y="771.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.0" y="782.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 0.05%)</title><rect x="1149.0" y="755.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.0" y="766.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.04%)</title><rect x="1149.1" y="739.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.1" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (8 samples, 0.10%)</title><rect x="1149.7" y="787.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.7" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (7 samples, 0.09%)</title><rect x="1149.9" y="771.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.9" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.04%)</title><rect x="1151.0" y="787.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.0" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.04%)</title><rect x="1151.0" y="771.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.0" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (12 samples, 0.16%)</title><rect x="1151.4" y="787.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.4" y="798.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.07%)</title><rect x="1152.5" y="771.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.5" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.03%)</title><rect x="1153.0" y="755.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.0" y="766.0"></text>
</g>
<g>
<title>Compile::Optimize() (159 samples, 2.07%)</title><rect x="1153.9" y="819.0" width="24.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.9" y="830.0">C..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (3 samples, 0.04%)</title><rect x="1153.9" y="803.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.9" y="814.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (3 samples, 0.04%)</title><rect x="1153.9" y="787.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.9" y="798.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (2 samples, 0.03%)</title><rect x="1154.0" y="771.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.08%)</title><rect x="1154.5" y="803.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.08%)</title><rect x="1154.5" y="787.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (3 samples, 0.04%)</title><rect x="1154.8" y="771.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (2 samples, 0.03%)</title><rect x="1154.8" y="755.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.8" y="766.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 0.05%)</title><rect x="1155.4" y="803.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.4" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (113 samples, 1.47%)</title><rect x="1156.2" y="803.0" width="17.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.2" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.07%)</title><rect x="1157.0" y="787.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.0" y="798.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.03%)</title><rect x="1157.4" y="771.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.4" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (11 samples, 0.14%)</title><rect x="1157.7" y="787.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.7" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (4 samples, 0.05%)</title><rect x="1158.8" y="771.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.8" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (4 samples, 0.05%)</title><rect x="1158.8" y="755.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.04%)</title><rect x="1159.0" y="739.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (67 samples, 0.87%)</title><rect x="1159.4" y="787.0" width="10.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.4" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (60 samples, 0.78%)</title><rect x="1160.5" y="771.0" width="9.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.03%)</title><rect x="1161.4" y="755.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.4" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (49 samples, 0.64%)</title><rect x="1161.7" y="755.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (5 samples, 0.07%)</title><rect x="1162.6" y="739.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.6" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (5 samples, 0.07%)</title><rect x="1162.6" y="723.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (37 samples, 0.48%)</title><rect x="1163.6" y="739.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.6" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.05%)</title><rect x="1169.7" y="787.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.7" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (10 samples, 0.13%)</title><rect x="1170.3" y="787.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.04%)</title><rect x="1171.4" y="771.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.4" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.08%)</title><rect x="1172.0" y="787.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.0" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.08%)</title><rect x="1172.0" y="771.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.0" y="782.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.03%)</title><rect x="1172.3" y="755.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.3" y="766.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.03%)</title><rect x="1172.3" y="739.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.3" y="750.0"></text>
</g>
<g>
<title>RegionNode::pinned() const (2 samples, 0.03%)</title><rect x="1173.3" y="787.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (23 samples, 0.30%)</title><rect x="1173.7" y="803.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.7" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (23 samples, 0.30%)</title><rect x="1173.7" y="787.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.7" y="798.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (4 samples, 0.05%)</title><rect x="1173.9" y="771.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.9" y="782.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.03%)</title><rect x="1173.9" y="755.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.9" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (2 samples, 0.03%)</title><rect x="1173.9" y="739.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.9" y="750.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.04%)</title><rect x="1174.5" y="771.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.5" y="782.0"></text>
</g>
<g>
<title>NodeHash::grow() (2 samples, 0.03%)</title><rect x="1174.6" y="755.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.6" y="766.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (5 samples, 0.07%)</title><rect x="1175.2" y="771.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.05%)</title><rect x="1175.2" y="755.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (4 samples, 0.05%)</title><rect x="1175.2" y="739.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="750.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (4 samples, 0.05%)</title><rect x="1175.2" y="723.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="734.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (7 samples, 0.09%)</title><rect x="1176.0" y="771.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.0" y="782.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (6 samples, 0.08%)</title><rect x="1176.0" y="755.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.0" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (6 samples, 0.08%)</title><rect x="1176.0" y="739.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (6 samples, 0.08%)</title><rect x="1176.0" y="723.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.0" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (6 samples, 0.08%)</title><rect x="1176.0" y="707.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.07%)</title><rect x="1176.0" y="691.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.07%)</title><rect x="1176.0" y="675.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.0" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.07%)</title><rect x="1176.0" y="659.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.0" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.07%)</title><rect x="1176.0" y="643.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.0" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.05%)</title><rect x="1176.0" y="627.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.0" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.05%)</title><rect x="1176.0" y="611.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.04%)</title><rect x="1176.0" y="595.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.04%)</title><rect x="1176.0" y="579.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1176.0" y="563.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1176.0" y="547.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1176.0" y="531.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1176.0" y="515.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.0" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1176.0" y="499.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.0" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1176.0" y="483.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1176.0" y="467.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1176.0" y="451.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.0" y="462.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (5 samples, 0.07%)</title><rect x="1177.2" y="803.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.2" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.05%)</title><rect x="1177.2" y="787.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.2" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.05%)</title><rect x="1177.2" y="771.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.2" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (43 samples, 0.56%)</title><rect x="1178.5" y="819.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (43 samples, 0.56%)</title><rect x="1178.5" y="803.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (43 samples, 0.56%)</title><rect x="1178.5" y="787.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (43 samples, 0.56%)</title><rect x="1178.5" y="771.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (43 samples, 0.56%)</title><rect x="1178.5" y="755.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (40 samples, 0.52%)</title><rect x="1178.5" y="739.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.5" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (26 samples, 0.34%)</title><rect x="1178.5" y="723.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.5" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (26 samples, 0.34%)</title><rect x="1178.5" y="707.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (26 samples, 0.34%)</title><rect x="1178.5" y="691.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (26 samples, 0.34%)</title><rect x="1178.5" y="675.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (26 samples, 0.34%)</title><rect x="1178.5" y="659.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (23 samples, 0.30%)</title><rect x="1178.6" y="643.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.18%)</title><rect x="1178.6" y="627.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.18%)</title><rect x="1178.6" y="611.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 0.17%)</title><rect x="1178.8" y="595.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.17%)</title><rect x="1178.8" y="579.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (13 samples, 0.17%)</title><rect x="1178.8" y="563.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.16%)</title><rect x="1178.9" y="547.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.03%)</title><rect x="1178.9" y="531.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.03%)</title><rect x="1178.9" y="515.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.03%)</title><rect x="1178.9" y="499.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.03%)</title><rect x="1178.9" y="483.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.03%)</title><rect x="1178.9" y="467.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.9" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.09%)</title><rect x="1179.2" y="531.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.09%)</title><rect x="1179.2" y="515.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.08%)</title><rect x="1179.2" y="499.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.08%)</title><rect x="1179.2" y="483.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.08%)</title><rect x="1179.2" y="467.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.07%)</title><rect x="1179.2" y="451.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1179.4" y="435.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1179.4" y="419.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1179.4" y="403.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1179.4" y="387.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1179.4" y="371.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1179.4" y="355.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1179.6" y="339.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1179.6" y="323.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1179.6" y="307.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1179.6" y="291.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1179.6" y="275.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1179.6" y="259.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1179.6" y="243.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1179.6" y="227.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1180.3" y="531.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1180.3" y="515.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1180.3" y="499.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1180.3" y="483.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1180.3" y="467.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1180.3" y="451.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1180.3" y="435.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1180.3" y="419.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1180.3" y="403.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1180.3" y="387.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1180.3" y="371.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1180.3" y="355.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1180.3" y="339.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (8 samples, 0.10%)</title><rect x="1180.8" y="627.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.09%)</title><rect x="1180.8" y="611.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.09%)</title><rect x="1180.8" y="595.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.09%)</title><rect x="1180.8" y="579.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.09%)</title><rect x="1180.8" y="563.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.09%)</title><rect x="1180.8" y="547.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.09%)</title><rect x="1180.8" y="531.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.09%)</title><rect x="1180.8" y="515.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.09%)</title><rect x="1180.8" y="499.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.09%)</title><rect x="1180.8" y="483.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.09%)</title><rect x="1180.8" y="467.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.09%)</title><rect x="1180.8" y="451.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.09%)</title><rect x="1180.8" y="435.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.07%)</title><rect x="1181.1" y="419.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.07%)</title><rect x="1181.1" y="403.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.07%)</title><rect x="1181.1" y="387.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.07%)</title><rect x="1181.1" y="371.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.07%)</title><rect x="1181.1" y="355.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.07%)</title><rect x="1181.1" y="339.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.1" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1181.1" y="323.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.1" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1181.1" y="307.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1181.1" y="291.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1181.1" y="275.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1181.1" y="259.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1181.1" y="243.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1181.1" y="227.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.1" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1181.1" y="211.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1181.1" y="195.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1181.1" y="179.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1181.2" y="163.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1181.2" y="147.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.2" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.2" y="131.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1181.2" y="115.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="126.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.5" y="323.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.5" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.5" y="307.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.5" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1181.5" y="291.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1181.5" y="275.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1181.5" y="259.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1181.5" y="243.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1181.5" y="227.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.5" y="211.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1181.5" y="195.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1181.5" y="179.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1181.5" y="163.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1181.5" y="147.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1181.5" y="131.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (14 samples, 0.18%)</title><rect x="1182.5" y="723.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.13%)</title><rect x="1182.5" y="707.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.13%)</title><rect x="1182.5" y="691.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.13%)</title><rect x="1182.5" y="675.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.13%)</title><rect x="1182.5" y="659.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.13%)</title><rect x="1182.5" y="643.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.13%)</title><rect x="1182.5" y="627.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.09%)</title><rect x="1182.5" y="611.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.5" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.09%)</title><rect x="1182.5" y="595.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.09%)</title><rect x="1182.5" y="579.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.09%)</title><rect x="1182.5" y="563.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.09%)</title><rect x="1182.5" y="547.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.09%)</title><rect x="1182.5" y="531.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.08%)</title><rect x="1182.5" y="515.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.08%)</title><rect x="1182.5" y="499.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.08%)</title><rect x="1182.5" y="483.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.08%)</title><rect x="1182.5" y="467.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.08%)</title><rect x="1182.5" y="451.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.08%)</title><rect x="1182.5" y="435.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1182.6" y="419.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="1182.6" y="403.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.05%)</title><rect x="1182.6" y="387.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.05%)</title><rect x="1182.6" y="371.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.05%)</title><rect x="1182.6" y="355.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.05%)</title><rect x="1182.6" y="339.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1182.6" y="323.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="1182.6" y="307.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.05%)</title><rect x="1182.6" y="291.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.05%)</title><rect x="1182.6" y="275.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.05%)</title><rect x="1182.6" y="259.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.05%)</title><rect x="1182.6" y="243.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1182.8" y="227.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1182.8" y="211.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1182.8" y="195.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1182.8" y="179.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1182.8" y="163.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.03%)</title><rect x="1182.9" y="147.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (2 samples, 0.03%)</title><rect x="1182.9" y="131.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="142.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (2 samples, 0.03%)</title><rect x="1182.9" y="115.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.9" y="126.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (2 samples, 0.03%)</title><rect x="1182.9" y="99.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="110.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (2 samples, 0.03%)</title><rect x="1182.9" y="83.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="94.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (2 samples, 0.03%)</title><rect x="1182.9" y="67.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="78.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (2 samples, 0.03%)</title><rect x="1182.9" y="51.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.9" y="62.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (2 samples, 0.03%)</title><rect x="1182.9" y="35.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1183.5" y="611.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.5" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1183.5" y="595.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.5" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1183.5" y="579.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1183.5" y="563.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1183.5" y="547.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1183.5" y="531.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1183.5" y="515.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1183.5" y="499.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1183.5" y="483.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1183.5" y="467.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1183.5" y="451.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1183.5" y="435.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1183.5" y="419.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.5" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1183.5" y="403.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.5" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1183.5" y="387.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1183.5" y="371.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1183.5" y="355.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1183.5" y="339.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1183.5" y="323.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.5" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1183.5" y="307.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.5" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1183.5" y="291.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1183.5" y="275.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1183.5" y="259.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1183.5" y="243.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1183.7" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.7" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1183.7" y="211.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.7" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1183.7" y="195.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1183.7" y="179.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1183.7" y="163.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1183.7" y="147.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.7" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1184.0" y="707.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1184.0" y="691.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.0" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="1184.0" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1184.0" y="659.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1184.0" y="643.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1184.0" y="627.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1184.0" y="611.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.0" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1184.0" y="595.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.0" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1184.0" y="579.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.0" y="590.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.03%)</title><rect x="1185.1" y="819.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.1" y="830.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.03%)</title><rect x="1185.1" y="803.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.1" y="814.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (20 samples, 0.26%)</title><rect x="1185.5" y="851.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.5" y="862.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (20 samples, 0.26%)</title><rect x="1185.5" y="835.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.5" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_method() (20 samples, 0.26%)</title><rect x="1185.5" y="819.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.5" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (18 samples, 0.23%)</title><rect x="1185.5" y="803.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.5" y="814.0"></text>
</g>
<g>
<title>Compilation::build_hir() (7 samples, 0.09%)</title><rect x="1185.5" y="787.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.5" y="798.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (5 samples, 0.07%)</title><rect x="1185.5" y="771.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.5" y="782.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (5 samples, 0.07%)</title><rect x="1185.5" y="755.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (5 samples, 0.07%)</title><rect x="1185.5" y="739.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.5" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (5 samples, 0.07%)</title><rect x="1185.5" y="723.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.5" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (5 samples, 0.07%)</title><rect x="1185.5" y="707.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.5" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (5 samples, 0.07%)</title><rect x="1185.5" y="691.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.5" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.05%)</title><rect x="1185.7" y="675.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.7" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.05%)</title><rect x="1185.7" y="659.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.7" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.03%)</title><rect x="1185.7" y="643.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.7" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.03%)</title><rect x="1185.7" y="627.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.7" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.03%)</title><rect x="1185.7" y="611.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.7" y="622.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (3 samples, 0.04%)</title><rect x="1186.6" y="787.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.6" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 0.03%)</title><rect x="1186.6" y="771.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.6" y="782.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (2 samples, 0.03%)</title><rect x="1186.6" y="755.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="766.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (8 samples, 0.10%)</title><rect x="1187.1" y="787.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.1" y="798.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (2 samples, 0.03%)</title><rect x="1187.1" y="771.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.1" y="782.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (2 samples, 0.03%)</title><rect x="1187.1" y="755.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="766.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (2 samples, 0.03%)</title><rect x="1187.1" y="739.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="750.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (6 samples, 0.08%)</title><rect x="1187.4" y="771.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.4" y="782.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (2 samples, 0.03%)</title><rect x="1187.4" y="755.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.4" y="766.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (2 samples, 0.03%)</title><rect x="1187.7" y="755.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="766.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (2 samples, 0.03%)</title><rect x="1187.7" y="739.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.7" y="750.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (2 samples, 0.03%)</title><rect x="1188.0" y="755.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.0" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (2 samples, 0.03%)</title><rect x="1188.6" y="851.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.6" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 0.03%)</title><rect x="1188.6" y="835.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.6" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (2 samples, 0.03%)</title><rect x="1188.6" y="819.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.6" y="830.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (2 samples, 0.03%)</title><rect x="1188.6" y="803.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.6" y="814.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (2 samples, 0.03%)</title><rect x="1188.6" y="787.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.6" y="798.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (4 samples, 0.05%)</title><rect x="1189.1" y="883.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.1" y="894.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (4 samples, 0.05%)</title><rect x="1189.1" y="867.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.1" y="878.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (4 samples, 0.05%)</title><rect x="1189.1" y="851.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.1" y="862.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (3 samples, 0.04%)</title><rect x="1189.2" y="835.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1192.2" y="846.0"></text>
</g>
</g>
</svg>
