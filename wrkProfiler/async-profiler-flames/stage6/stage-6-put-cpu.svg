<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1590" onload="init(evt)" viewBox="0 0 1200 1590" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1573"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1573"> </text>
<g id="frames">
<g>
<title>all (4,682 samples, 100.00%)</title><rect x="10.0" y="1539.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1550.0">all</text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (4 samples, 0.09%)</title><rect x="10.0" y="1523.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (3 samples, 0.06%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (3 samples, 0.06%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (3 samples, 0.06%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (3 samples, 0.06%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (3 samples, 0.06%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ClassPathImageEntry::open_stream(char const*, Thread*) (1 samples, 0.02%)</title><rect x="10.0" y="1427.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>__strlen_avx2 (1 samples, 0.02%)</title><rect x="10.0" y="1411.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.04%)</title><rect x="10.3" y="1427.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.3" y="1438.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (2 samples, 0.04%)</title><rect x="10.3" y="1411.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.3" y="1422.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (2 samples, 0.04%)</title><rect x="10.3" y="1395.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.3" y="1406.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (2 samples, 0.04%)</title><rect x="10.3" y="1379.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.3" y="1390.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (2 samples, 0.04%)</title><rect x="10.3" y="1363.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.3" y="1374.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.02%)</title><rect x="10.5" y="1347.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.5" y="1358.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.02%)</title><rect x="10.8" y="1507.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.8" y="1518.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.02%)</title><rect x="10.8" y="1491.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.8" y="1502.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.02%)</title><rect x="10.8" y="1475.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.8" y="1486.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.02%)</title><rect x="10.8" y="1459.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1470.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="10.8" y="1443.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.8" y="1454.0"></text>
</g>
<g>
<title>ClassVerifier::verify_field_instructions(RawBytecodeStream*, StackMapFrame*, constantPoolHandle const&amp;, bool, Thread*) (1 samples, 0.02%)</title><rect x="10.8" y="1427.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.8" y="1438.0"></text>
</g>
<g>
<title>ClassVerifier::change_sig_to_verificationType(SignatureStream*, VerificationType*, Thread*) (1 samples, 0.02%)</title><rect x="10.8" y="1411.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.8" y="1422.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.02%)</title><rect x="10.8" y="1395.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1406.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.02%)</title><rect x="10.8" y="1379.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="1390.0"></text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (2 samples, 0.04%)</title><rect x="11.0" y="1523.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.0" y="1534.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="11.0" y="1507.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.0" y="1518.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.02%)</title><rect x="11.3" y="1507.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.3" y="1518.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="11.3" y="1491.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.3" y="1502.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="11.3" y="1475.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.3" y="1486.0"></text>
</g>
<g>
<title>InterpreterRuntime::build_method_counters(JavaThread*, Method*) (1 samples, 0.02%)</title><rect x="11.5" y="1523.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.5" y="1534.0"></text>
</g>
<g>
<title>Method::build_method_counters(Method*, Thread*) (1 samples, 0.02%)</title><rect x="11.5" y="1507.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.5" y="1518.0"></text>
</g>
<g>
<title>MethodCounters::allocate(methodHandle const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="11.5" y="1491.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.5" y="1502.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (2 samples, 0.04%)</title><rect x="11.8" y="1523.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.8" y="1534.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.04%)</title><rect x="11.8" y="1507.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.8" y="1518.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.04%)</title><rect x="11.8" y="1491.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.8" y="1502.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.02%)</title><rect x="12.3" y="1523.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.3" y="1534.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.02%)</title><rect x="12.5" y="1523.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.5" y="1534.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.04%)</title><rect x="12.8" y="1523.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.8" y="1534.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.04%)</title><rect x="12.8" y="1507.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.8" y="1518.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.04%)</title><rect x="12.8" y="1491.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.8" y="1502.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.04%)</title><rect x="12.8" y="1475.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.8" y="1486.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.04%)</title><rect x="12.8" y="1459.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.8" y="1470.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.04%)</title><rect x="12.8" y="1443.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.8" y="1454.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.02%)</title><rect x="12.8" y="1427.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.8" y="1438.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.02%)</title><rect x="13.0" y="1427.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.0" y="1438.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.04%)</title><rect x="13.3" y="1523.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="16.3" y="1534.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="13.5" y="1507.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="16.5" y="1518.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="13.5" y="1491.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.5" y="1502.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="13.5" y="1475.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="16.5" y="1486.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="13.5" y="1459.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.5" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="13.5" y="1443.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="16.5" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="13.5" y="1427.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="16.5" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="13.5" y="1411.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="16.5" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="13.5" y="1395.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="16.5" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="13.5" y="1379.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="16.5" y="1390.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (6 samples, 0.13%)</title><rect x="13.8" y="1523.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="16.8" y="1534.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (5 samples, 0.11%)</title><rect x="14.0" y="1507.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="17.0" y="1518.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (5 samples, 0.11%)</title><rect x="14.0" y="1491.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="17.0" y="1502.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.11%)</title><rect x="14.0" y="1475.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="17.0" y="1486.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (5 samples, 0.11%)</title><rect x="14.0" y="1459.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="17.0" y="1470.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (5 samples, 0.11%)</title><rect x="14.0" y="1443.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="17.0" y="1454.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.04%)</title><rect x="14.5" y="1427.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="17.5" y="1438.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.04%)</title><rect x="14.5" y="1411.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.5" y="1422.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.02%)</title><rect x="14.5" y="1395.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="17.5" y="1406.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.02%)</title><rect x="14.5" y="1379.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="17.5" y="1390.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.02%)</title><rect x="14.5" y="1363.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="17.5" y="1374.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.02%)</title><rect x="14.5" y="1347.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="17.5" y="1358.0"></text>
</g>
<g>
<title>G1RemSet::num_par_rem_sets() (1 samples, 0.02%)</title><rect x="14.5" y="1331.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="17.5" y="1342.0"></text>
</g>
<g>
<title>G1ConcurrentRefine::max_num_threads() (1 samples, 0.02%)</title><rect x="14.5" y="1315.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.5" y="1326.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.02%)</title><rect x="14.8" y="1395.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="17.8" y="1406.0"></text>
</g>
<g>
<title>HSpaceCounters::update_used(unsigned long) (1 samples, 0.02%)</title><rect x="14.8" y="1379.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.8" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1363.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="17.8" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1347.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="17.8" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1331.0" width="0.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="17.8" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1315.0" width="0.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="17.8" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1299.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="17.8" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1283.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="17.8" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1267.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="17.8" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1251.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="17.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1235.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="17.8" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1219.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="17.8" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1203.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="17.8" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1187.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="17.8" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1171.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="17.8" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1155.0" width="0.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="17.8" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1139.0" width="0.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="17.8" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1123.0" width="0.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="17.8" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="14.8" y="1107.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="17.8" y="1118.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.02%)</title><rect x="15.0" y="1427.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="18.0" y="1438.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.02%)</title><rect x="15.0" y="1411.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="18.0" y="1422.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.02%)</title><rect x="15.3" y="1523.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="18.3" y="1534.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)</title><rect x="15.3" y="1507.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="18.3" y="1518.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)</title><rect x="15.3" y="1491.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="18.3" y="1502.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (1 samples, 0.02%)</title><rect x="15.3" y="1475.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="18.3" y="1486.0"></text>
</g>
<g>
<title>Method::backedge_count() (1 samples, 0.02%)</title><rect x="15.3" y="1459.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="18.3" y="1470.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (3 samples, 0.06%)</title><rect x="15.5" y="1523.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.5" y="1534.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.04%)</title><rect x="15.8" y="1507.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="18.8" y="1518.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.02%)</title><rect x="16.0" y="1491.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="19.0" y="1502.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="16.0" y="1475.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="19.0" y="1486.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (18 samples, 0.38%)</title><rect x="16.3" y="1523.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="19.3" y="1534.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="16.3" y="1507.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="19.3" y="1518.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (15 samples, 0.32%)</title><rect x="16.6" y="1507.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="19.6" y="1518.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (9 samples, 0.19%)</title><rect x="16.8" y="1491.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="19.8" y="1502.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.06%)</title><rect x="17.3" y="1475.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="20.3" y="1486.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.06%)</title><rect x="18.1" y="1475.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="21.1" y="1486.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.02%)</title><rect x="18.8" y="1475.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="21.8" y="1486.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.06%)</title><rect x="19.1" y="1491.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="22.1" y="1502.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.04%)</title><rect x="19.8" y="1491.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="22.8" y="1502.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.02%)</title><rect x="20.3" y="1507.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="23.3" y="1518.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.02%)</title><rect x="20.3" y="1491.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="23.3" y="1502.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.02%)</title><rect x="20.6" y="1507.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="23.6" y="1518.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.02%)</title><rect x="20.8" y="1523.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="23.8" y="1534.0"></text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.02%)</title><rect x="21.1" y="1523.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="24.1" y="1534.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info(JavaThread*, int) (1 samples, 0.02%)</title><rect x="21.1" y="1507.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="24.1" y="1518.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info_helper(JavaThread*, int) (1 samples, 0.02%)</title><rect x="21.1" y="1491.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="24.1" y="1502.0"></text>
</g>
<g>
<title>Deoptimization::create_vframeArray(JavaThread*, frame, RegisterMap*, GrowableArray&lt;compiledVFrame*&gt;*, bool) (1 samples, 0.02%)</title><rect x="21.1" y="1475.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="24.1" y="1486.0"></text>
</g>
<g>
<title>vframeArray::allocate(JavaThread*, int, GrowableArray&lt;compiledVFrame*&gt;*, RegisterMap*, frame, frame, frame, bool) (1 samples, 0.02%)</title><rect x="21.1" y="1459.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="24.1" y="1470.0"></text>
</g>
<g>
<title>vframeArrayElement::fill_in(compiledVFrame*, bool) (1 samples, 0.02%)</title><rect x="21.1" y="1443.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="24.1" y="1454.0"></text>
</g>
<g>
<title>compiledVFrame::locals() const (1 samples, 0.02%)</title><rect x="21.1" y="1427.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="24.1" y="1438.0"></text>
</g>
<g>
<title>LocationValue::is_location() const (1 samples, 0.02%)</title><rect x="21.1" y="1411.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="24.1" y="1422.0"></text>
</g>
<g>
<title>[not_walkable] (5 samples, 0.11%)</title><rect x="21.3" y="1523.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="24.3" y="1534.0"></text>
</g>
<g>
<title>[not_walkable_Java] (57 samples, 1.22%)</title><rect x="22.6" y="1523.0" width="14.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="25.6" y="1534.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.02%)</title><rect x="27.6" y="1507.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="30.6" y="1518.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="27.9" y="1507.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="30.9" y="1518.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.02%)</title><rect x="27.9" y="1491.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="30.9" y="1502.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="27.9" y="1475.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="30.9" y="1486.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.02%)</title><rect x="27.9" y="1459.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="30.9" y="1470.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="28.1" y="1507.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="31.1" y="1518.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.02%)</title><rect x="28.1" y="1491.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="31.1" y="1502.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (1 samples, 0.02%)</title><rect x="28.4" y="1507.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="31.4" y="1518.0"></text>
</g>
<g>
<title>caller_is_deopted() (1 samples, 0.02%)</title><rect x="28.4" y="1491.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="31.4" y="1502.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.02%)</title><rect x="28.4" y="1475.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="31.4" y="1486.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="28.4" y="1459.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="31.4" y="1470.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="28.4" y="1443.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="31.4" y="1454.0"></text>
</g>
<g>
<title>[unknown] (33 samples, 0.70%)</title><rect x="28.7" y="1507.0" width="8.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="31.7" y="1518.0"></text>
</g>
<g>
<title>JavaThread::~JavaThread() (1 samples, 0.02%)</title><rect x="28.7" y="1491.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="31.7" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="28.7" y="1475.0" width="0.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="31.7" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="28.7" y="1459.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="31.7" y="1470.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="28.7" y="1443.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="31.7" y="1454.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="28.7" y="1427.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="31.7" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="28.9" y="1491.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="31.9" y="1502.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="28.9" y="1475.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="31.9" y="1486.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.06%)</title><rect x="29.2" y="1491.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="32.2" y="1502.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="29.9" y="1491.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="32.9" y="1502.0"></text>
</g>
<g>
<title>clock_gettime (27 samples, 0.58%)</title><rect x="30.2" y="1491.0" width="6.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="33.2" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="30.7" y="1475.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="33.7" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="30.7" y="1459.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="33.7" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="30.7" y="1443.0" width="0.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="33.7" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="30.7" y="1427.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="33.7" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="30.7" y="1411.0" width="0.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="33.7" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="30.7" y="1395.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="33.7" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="30.7" y="1379.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="33.7" y="1390.0"></text>
</g>
<g>
<title>[vdso] (24 samples, 0.51%)</title><rect x="30.9" y="1475.0" width="6.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="33.9" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="36.7" y="1459.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="39.7" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="36.7" y="1443.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="39.7" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="36.7" y="1427.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="39.7" y="1438.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.28%)</title><rect x="37.0" y="1523.0" width="3.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="40.0" y="1534.0"></text>
</g>
<g>
<title>CodeBlob::is_buffer_blob() const (1 samples, 0.02%)</title><rect x="37.0" y="1507.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="40.0" y="1518.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1491.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="40.0" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1475.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="40.0" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1459.0" width="0.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="40.0" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1443.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="40.0" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1427.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="40.0" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1411.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="40.0" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1395.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="40.0" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1379.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="40.0" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1363.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="40.0" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1347.0" width="0.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="40.0" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1331.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="40.0" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1315.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="40.0" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1299.0" width="0.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="40.0" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1283.0" width="0.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="40.0" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1267.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="40.0" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1251.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="40.0" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1235.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="40.0" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1219.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="40.0" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1203.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="40.0" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1187.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="40.0" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1171.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="40.0" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1155.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="40.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1139.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="40.0" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1123.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="40.0" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1107.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="40.0" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1091.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="40.0" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1075.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="40.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1059.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="40.0" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1043.0" width="0.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="40.0" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1027.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="40.0" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="1011.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="40.0" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="995.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="40.0" y="1006.0"></text>
</g>
<g>
<title>read (1 samples, 0.02%)</title><rect x="37.0" y="979.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="40.0" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="963.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="40.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="947.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="40.0" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="931.0" width="0.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="40.0" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="915.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="40.0" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="899.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="40.0" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="883.0" width="0.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="40.0" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="867.0" width="0.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="40.0" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="851.0" width="0.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="40.0" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.0" y="835.0" width="0.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="40.0" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1507.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="40.2" y="1518.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1491.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="40.2" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1475.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="40.2" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1459.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="40.2" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1443.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="40.2" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1427.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="40.2" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1411.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="40.2" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1395.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="40.2" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1379.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="40.2" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1363.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="40.2" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1347.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="40.2" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1331.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="40.2" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1315.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="40.2" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1299.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="40.2" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1283.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="40.2" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1267.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="40.2" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1251.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="40.2" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1235.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="40.2" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1219.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="40.2" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1203.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="40.2" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1187.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="40.2" y="1198.0"></text>
</g>
<g>
<title>read (1 samples, 0.02%)</title><rect x="37.2" y="1171.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="40.2" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1155.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="40.2" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1139.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="40.2" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1123.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="40.2" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1107.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="40.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1091.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="40.2" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1075.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="40.2" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1059.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="40.2" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1043.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="40.2" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1027.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="40.2" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="1011.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="40.2" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="995.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="40.2" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="979.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="40.2" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="963.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="40.2" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="37.2" y="947.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="40.2" y="958.0"></text>
</g>
<g>
<title>__GI___open64 (7 samples, 0.15%)</title><rect x="37.5" y="1507.0" width="1.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="40.5" y="1518.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="37.5" y="1491.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="40.5" y="1502.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="37.5" y="1475.0" width="1.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="40.5" y="1486.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="37.5" y="1459.0" width="1.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="40.5" y="1470.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="37.5" y="1443.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="40.5" y="1454.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="37.5" y="1427.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="40.5" y="1438.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="37.5" y="1411.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="40.5" y="1422.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="37.7" y="1395.0" width="1.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="40.7" y="1406.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="37.7" y="1379.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="40.7" y="1390.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="37.7" y="1363.0" width="1.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="40.7" y="1374.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="38.0" y="1347.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="41.0" y="1358.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="38.7" y="1331.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="41.7" y="1342.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="38.7" y="1315.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="41.7" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="39.0" y="1299.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="42.0" y="1310.0"></text>
</g>
<g>
<title>__close_nocancel (1 samples, 0.02%)</title><rect x="39.2" y="1507.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="42.2" y="1518.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="39.2" y="1491.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="42.2" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="39.2" y="1475.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="42.2" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="39.2" y="1459.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="42.2" y="1470.0"></text>
</g>
<g>
<title>__fxstat64 (1 samples, 0.02%)</title><rect x="39.5" y="1507.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="42.5" y="1518.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="39.5" y="1491.0" width="0.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="42.5" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="39.5" y="1475.0" width="0.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="42.5" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="39.5" y="1459.0" width="0.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="42.5" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="39.5" y="1443.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="42.5" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="39.5" y="1427.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="42.5" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="39.5" y="1411.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="42.5" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="39.5" y="1395.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="42.5" y="1406.0"></text>
</g>
<g>
<title>vsnprintf (2 samples, 0.04%)</title><rect x="39.7" y="1507.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="42.7" y="1518.0"></text>
</g>
<g>
<title>/lib/x86_64-linux-gnu/libc-2.27.so (1 samples, 0.02%)</title><rect x="39.7" y="1491.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="42.7" y="1502.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.02%)</title><rect x="40.0" y="1491.0" width="0.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="43.0" y="1502.0"></text>
</g>
<g>
<title>[unknown_Java] (30 samples, 0.64%)</title><rect x="40.2" y="1523.0" width="7.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="43.2" y="1534.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="46.0" y="1507.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="49.0" y="1518.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="46.0" y="1491.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="49.0" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="46.0" y="1475.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="49.0" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="46.0" y="1459.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="49.0" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="46.0" y="1443.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="49.0" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="46.0" y="1427.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="49.0" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="46.0" y="1411.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="49.0" y="1422.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="46.3" y="1491.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="49.3" y="1502.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="46.5" y="1507.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="49.5" y="1518.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (4 samples, 0.09%)</title><rect x="46.8" y="1507.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="49.8" y="1518.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="47.0" y="1491.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="50.0" y="1502.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="47.0" y="1475.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="50.0" y="1486.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="47.0" y="1459.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="50.0" y="1470.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="47.0" y="1443.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="50.0" y="1454.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="47.0" y="1427.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="50.0" y="1438.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="47.0" y="1411.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="50.0" y="1422.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="47.0" y="1395.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="50.0" y="1406.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="47.0" y="1379.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="50.0" y="1390.0"></text>
</g>
<g>
<title>__GI__IO_un_link (1 samples, 0.02%)</title><rect x="47.8" y="1523.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="50.8" y="1534.0"></text>
</g>
<g>
<title>__libc_free (1 samples, 0.02%)</title><rect x="48.1" y="1523.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="51.1" y="1534.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (5 samples, 0.11%)</title><rect x="48.3" y="1523.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="51.3" y="1534.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="48.6" y="1507.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="51.6" y="1518.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="48.6" y="1491.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="51.6" y="1502.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="48.6" y="1475.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="51.6" y="1486.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="48.6" y="1459.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="51.6" y="1470.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="48.8" y="1443.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="51.8" y="1454.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="48.8" y="1427.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="51.8" y="1438.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="48.8" y="1411.0" width="0.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="51.8" y="1422.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="48.8" y="1395.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="51.8" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="49.3" y="1379.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="52.3" y="1390.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.02%)</title><rect x="49.6" y="1523.0" width="0.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="52.6" y="1534.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,101 samples, 44.87%)</title><rect x="49.8" y="1523.0" width="529.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.8" y="1534.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (1 samples, 0.02%)</title><rect x="49.8" y="1507.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="52.8" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,100 samples, 44.85%)</title><rect x="50.1" y="1507.0" width="529.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="53.1" y="1518.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,100 samples, 44.85%)</title><rect x="50.1" y="1491.0" width="529.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.1" y="1502.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (7 samples, 0.15%)</title><rect x="58.6" y="1475.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.6" y="1486.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.06%)</title><rect x="60.4" y="1475.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="63.4" y="1486.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (6 samples, 0.13%)</title><rect x="61.2" y="1475.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.2" y="1486.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (5 samples, 0.11%)</title><rect x="61.4" y="1459.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="64.4" y="1470.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (4 samples, 0.09%)</title><rect x="61.7" y="1443.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="64.7" y="1454.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.02%)</title><rect x="62.4" y="1427.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="65.4" y="1438.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.02%)</title><rect x="62.7" y="1475.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.7" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncRun.run (31 samples, 0.66%)</title><rect x="62.9" y="1475.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.9" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (12 samples, 0.26%)</title><rect x="63.4" y="1459.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="66.4" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (12 samples, 0.26%)</title><rect x="63.4" y="1443.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="66.4" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.26%)</title><rect x="63.4" y="1427.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="66.4" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (12 samples, 0.26%)</title><rect x="63.4" y="1411.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="66.4" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (10 samples, 0.21%)</title><rect x="63.4" y="1395.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.4" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalSubmit (10 samples, 0.21%)</title><rect x="63.4" y="1379.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="66.4" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalPush (10 samples, 0.21%)</title><rect x="63.4" y="1363.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="66.4" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (10 samples, 0.21%)</title><rect x="63.4" y="1347.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="66.4" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.21%)</title><rect x="63.4" y="1331.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="66.4" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (10 samples, 0.21%)</title><rect x="63.4" y="1315.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="66.4" y="1326.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.02%)</title><rect x="63.4" y="1299.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="66.4" y="1310.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="63.4" y="1283.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="66.4" y="1294.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (9 samples, 0.19%)</title><rect x="63.7" y="1299.0" width="2.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="66.7" y="1310.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="64.4" y="1283.0" width="1.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="67.4" y="1294.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="64.4" y="1267.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="67.4" y="1278.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="64.9" y="1251.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="67.9" y="1262.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="64.9" y="1235.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="67.9" y="1246.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="64.9" y="1219.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="67.9" y="1230.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="65.4" y="1203.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="68.4" y="1214.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="65.4" y="1187.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="68.4" y="1198.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="65.4" y="1171.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="68.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.02%)</title><rect x="66.0" y="1395.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.0" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1 samples, 0.02%)</title><rect x="66.2" y="1395.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="69.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (1 samples, 0.02%)</title><rect x="66.2" y="1379.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.02%)</title><rect x="66.2" y="1363.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.2" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.02%)</title><rect x="66.2" y="1347.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="69.2" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.internalComplete (1 samples, 0.02%)</title><rect x="66.2" y="1331.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="66.2" y="1315.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.2" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="66.2" y="1299.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.2" y="1310.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/LSMDao.upsert (1 samples, 0.02%)</title><rect x="66.5" y="1459.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="69.5" y="1470.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/service/EntityService$$Lambda$167/1215328857.run (16 samples, 0.34%)</title><rect x="66.7" y="1459.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="69.7" y="1470.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/service/EntityService.lambda$upsert$2 (16 samples, 0.34%)</title><rect x="66.7" y="1443.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.7" y="1454.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/LSMDao.upsert (16 samples, 0.34%)</title><rect x="66.7" y="1427.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="69.7" y="1438.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/table/MemoryTablePool.upsert (16 samples, 0.34%)</title><rect x="66.7" y="1411.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="69.7" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.02%)</title><rect x="67.0" y="1395.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.0" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.02%)</title><rect x="67.0" y="1379.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.02%)</title><rect x="67.0" y="1363.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.02%)</title><rect x="67.0" y="1347.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="70.0" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="67.0" y="1331.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.0" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="67.0" y="1315.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="70.0" y="1326.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/table/MemTable.upsert (14 samples, 0.30%)</title><rect x="67.2" y="1395.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (13 samples, 0.28%)</title><rect x="67.2" y="1379.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="70.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (13 samples, 0.28%)</title><rect x="67.2" y="1363.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="70.2" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="67.7" y="1347.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.7" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="67.7" y="1331.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.7" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.02%)</title><rect x="68.0" y="1347.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="71.0" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (9 samples, 0.19%)</title><rect x="68.2" y="1347.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="71.2" y="1358.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.19%)</title><rect x="68.2" y="1331.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.2" y="1342.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.19%)</title><rect x="68.2" y="1315.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="71.2" y="1326.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 0.15%)</title><rect x="68.5" y="1299.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.5" y="1310.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.13%)</title><rect x="68.7" y="1283.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="71.7" y="1294.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.13%)</title><rect x="68.7" y="1267.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="71.7" y="1278.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="70.2" y="1299.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="73.2" y="1310.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/cell/Value.of (1 samples, 0.02%)</title><rect x="70.5" y="1379.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="73.5" y="1390.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.02%)</title><rect x="70.5" y="1363.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.5" y="1374.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="70.5" y="1347.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="73.5" y="1358.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="70.5" y="1331.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="73.5" y="1342.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="70.5" y="1315.0" width="0.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="73.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (336 samples, 7.18%)</title><rect x="70.7" y="1475.0" width="84.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="73.7" y="1486.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (333 samples, 7.11%)</title><rect x="71.5" y="1459.0" width="83.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="74.5" y="1470.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (332 samples, 7.09%)</title><rect x="71.7" y="1443.0" width="83.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.7" y="1454.0">java/util..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$152/9819169.apply (332 samples, 7.09%)</title><rect x="71.7" y="1427.0" width="83.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.7" y="1438.0">jdk/inter..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$2 (332 samples, 7.09%)</title><rect x="71.7" y="1411.0" width="83.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.7" y="1422.0">jdk/inter..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsyncImpl (332 samples, 7.09%)</title><rect x="71.7" y="1395.0" width="83.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="74.7" y="1406.0">jdk/inter..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (2 samples, 0.04%)</title><rect x="72.0" y="1379.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="75.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (2 samples, 0.04%)</title><rect x="72.0" y="1363.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="75.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.&lt;init&gt; (1 samples, 0.02%)</title><rect x="72.0" y="1347.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="75.0" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.&lt;init&gt; (1 samples, 0.02%)</title><rect x="72.0" y="1331.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.0" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.02%)</title><rect x="72.3" y="1347.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="75.3" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.02%)</title><rect x="72.3" y="1331.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.3" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.&lt;init&gt; (1 samples, 0.02%)</title><rect x="72.3" y="1315.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="75.3" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.02%)</title><rect x="72.3" y="1299.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (1 samples, 0.02%)</title><rect x="72.5" y="1379.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (1 samples, 0.02%)</title><rect x="72.5" y="1363.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.5" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.02%)</title><rect x="72.5" y="1347.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="75.5" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.02%)</title><rect x="72.5" y="1331.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="75.5" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.&lt;init&gt; (1 samples, 0.02%)</title><rect x="72.5" y="1315.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="75.5" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsync (315 samples, 6.73%)</title><rect x="72.8" y="1379.0" width="79.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.8" y="1390.0">jdk/inter..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl (315 samples, 6.73%)</title><rect x="72.8" y="1363.0" width="79.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="75.8" y="1374.0">jdk/inter..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl0 (315 samples, 6.73%)</title><rect x="72.8" y="1347.0" width="79.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="75.8" y="1358.0">jdk/inter..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="73.3" y="1331.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="76.3" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="73.3" y="1315.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="76.3" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$248/281491976.get$Lambda (1 samples, 0.02%)</title><rect x="73.3" y="1299.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (145 samples, 3.10%)</title><rect x="73.5" y="1331.0" width="36.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.5" y="1342.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (145 samples, 3.10%)</title><rect x="73.5" y="1315.0" width="36.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="76.5" y="1326.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (145 samples, 3.10%)</title><rect x="73.5" y="1299.0" width="36.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.5" y="1310.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.02%)</title><rect x="73.5" y="1283.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.5" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1 samples, 0.02%)</title><rect x="73.5" y="1267.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.02%)</title><rect x="73.5" y="1251.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="76.5" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$248/281491976.apply (144 samples, 3.08%)</title><rect x="73.8" y="1283.0" width="36.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.8" y="1294.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$9 (144 samples, 3.08%)</title><rect x="73.8" y="1267.0" width="36.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.8" y="1278.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (144 samples, 3.08%)</title><rect x="73.8" y="1251.0" width="36.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="76.8" y="1262.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$173/1773270012.apply (143 samples, 3.05%)</title><rect x="74.0" y="1235.0" width="36.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="77.0" y="1246.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$8 (143 samples, 3.05%)</title><rect x="74.0" y="1219.0" width="36.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="77.0" y="1230.0">jdk..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (3 samples, 0.06%)</title><rect x="74.0" y="1203.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (3 samples, 0.06%)</title><rect x="74.0" y="1187.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="77.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (3 samples, 0.06%)</title><rect x="74.0" y="1171.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="77.0" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$286/689008889.apply (3 samples, 0.06%)</title><rect x="74.0" y="1155.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.0" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$7 (3 samples, 0.06%)</title><rect x="74.0" y="1139.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="77.0" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (3 samples, 0.06%)</title><rect x="74.0" y="1123.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.0" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$172/544090600.apply (3 samples, 0.06%)</title><rect x="74.0" y="1107.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.0" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.sendRequestBody (3 samples, 0.06%)</title><rect x="74.0" y="1091.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="77.0" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendBodyAsync (3 samples, 0.06%)</title><rect x="74.0" y="1075.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenAccept (3 samples, 0.06%)</title><rect x="74.0" y="1059.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="77.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniAcceptStage (3 samples, 0.06%)</title><rect x="74.0" y="1043.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="77.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniAcceptNow (3 samples, 0.06%)</title><rect x="74.0" y="1027.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="77.0" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$305/1944453069.accept (1 samples, 0.02%)</title><rect x="74.0" y="1011.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.0" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.lambda$sendBodyAsync$7 (1 samples, 0.02%)</title><rect x="74.0" y="995.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="77.0" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$307/840568830.accept (2 samples, 0.04%)</title><rect x="74.3" y="1011.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="77.3" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.lambda$sendBodyAsync$8 (2 samples, 0.04%)</title><rect x="74.3" y="995.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.3" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.requestMoreBody (2 samples, 0.04%)</title><rect x="74.3" y="979.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.3" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1BodySubscriber.request (2 samples, 0.04%)</title><rect x="74.3" y="963.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.3" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PullPublisher$Subscription.request (2 samples, 0.04%)</title><rect x="74.3" y="947.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.3" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.04%)</title><rect x="74.3" y="931.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.3" y="942.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.04%)</title><rect x="74.3" y="915.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.3" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (2 samples, 0.04%)</title><rect x="74.3" y="899.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="77.3" y="910.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (2 samples, 0.04%)</title><rect x="74.3" y="883.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="77.3" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PullPublisher$Subscription$PullTask.run (2 samples, 0.04%)</title><rect x="74.3" y="867.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="77.3" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (2 samples, 0.04%)</title><rect x="74.3" y="851.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.3" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (2 samples, 0.04%)</title><rect x="74.3" y="835.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.3" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (2 samples, 0.04%)</title><rect x="74.3" y="819.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="77.3" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (2 samples, 0.04%)</title><rect x="74.3" y="803.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="77.3" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.04%)</title><rect x="74.3" y="787.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="77.3" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.04%)</title><rect x="74.3" y="771.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="77.3" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (2 samples, 0.04%)</title><rect x="74.3" y="755.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="77.3" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (2 samples, 0.04%)</title><rect x="74.3" y="739.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.3" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (2 samples, 0.04%)</title><rect x="74.3" y="723.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.3" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (2 samples, 0.04%)</title><rect x="74.3" y="707.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (2 samples, 0.04%)</title><rect x="74.3" y="691.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="77.3" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (2 samples, 0.04%)</title><rect x="74.3" y="675.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="77.3" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onNext (2 samples, 0.04%)</title><rect x="74.3" y="659.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.3" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.tryFlushCurrent (2 samples, 0.04%)</title><rect x="74.3" y="643.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="77.3" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.writeAvailable (2 samples, 0.04%)</title><rect x="74.3" y="627.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="77.3" y="638.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (2 samples, 0.04%)</title><rect x="74.3" y="611.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.3" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (2 samples, 0.04%)</title><rect x="74.3" y="595.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="77.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.04%)</title><rect x="74.3" y="579.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.04%)</title><rect x="74.3" y="563.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.3" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (2 samples, 0.04%)</title><rect x="74.3" y="547.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (2 samples, 0.04%)</title><rect x="74.3" y="531.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="77.3" y="542.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="515.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="77.3" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="499.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="77.3" y="510.0"></text>
</g>
<g>
<title>__GI___writev (2 samples, 0.04%)</title><rect x="74.3" y="483.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="77.3" y="494.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="467.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="77.3" y="478.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="451.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="77.3" y="462.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="435.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="77.3" y="446.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="419.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="77.3" y="430.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="403.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="77.3" y="414.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="387.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="77.3" y="398.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="371.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="77.3" y="382.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="355.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="77.3" y="366.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="339.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="77.3" y="350.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="323.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="77.3" y="334.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="307.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="77.3" y="318.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="291.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="77.3" y="302.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="275.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="77.3" y="286.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="259.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="77.3" y="270.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="243.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="77.3" y="254.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="227.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="77.3" y="238.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="211.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="77.3" y="222.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="195.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="77.3" y="206.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="74.3" y="179.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="77.3" y="190.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="74.5" y="163.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="77.5" y="174.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="74.5" y="147.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="77.5" y="158.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="74.5" y="131.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="77.5" y="142.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendHeadersAsync (140 samples, 2.99%)</title><rect x="74.8" y="1203.0" width="35.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="77.8" y="1214.0">jdk..</text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.02%)</title><rect x="74.8" y="1187.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.8" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.02%)</title><rect x="74.8" y="1171.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.8" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.02%)</title><rect x="74.8" y="1155.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.8" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassInModuleOrNull (1 samples, 0.02%)</title><rect x="74.8" y="1139.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="77.8" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.02%)</title><rect x="74.8" y="1123.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="77.8" y="1134.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.02%)</title><rect x="74.8" y="1107.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.02%)</title><rect x="74.8" y="1091.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.02%)</title><rect x="74.8" y="1075.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="77.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.02%)</title><rect x="74.8" y="1059.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="77.8" y="1070.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.02%)</title><rect x="74.8" y="1043.0" width="0.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="77.8" y="1054.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.02%)</title><rect x="74.8" y="1027.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="77.8" y="1038.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.02%)</title><rect x="74.8" y="1011.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="77.8" y="1022.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.02%)</title><rect x="74.8" y="995.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="77.8" y="1006.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.02%)</title><rect x="74.8" y="979.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="77.8" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.02%)</title><rect x="74.8" y="963.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="77.8" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.02%)</title><rect x="74.8" y="947.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="77.8" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.02%)</title><rect x="74.8" y="931.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="77.8" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.02%)</title><rect x="74.8" y="915.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="77.8" y="926.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.02%)</title><rect x="74.8" y="899.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="77.8" y="910.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.02%)</title><rect x="74.8" y="883.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="77.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (117 samples, 2.50%)</title><rect x="75.0" y="1187.0" width="29.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.0" y="1198.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (117 samples, 2.50%)</title><rect x="75.0" y="1171.0" width="29.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="78.0" y="1182.0">ja..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$280/1579216262.apply (116 samples, 2.48%)</title><rect x="75.0" y="1155.0" width="29.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.0" y="1166.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.lambda$sendHeadersAsync$4 (114 samples, 2.43%)</title><rect x="75.5" y="1139.0" width="28.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.5" y="1150.0">jd..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.02%)</title><rect x="75.5" y="1123.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="78.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.02%)</title><rect x="75.5" y="1107.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.02%)</title><rect x="75.5" y="1091.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.5" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (6 samples, 0.13%)</title><rect x="75.8" y="1123.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.8" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (6 samples, 0.13%)</title><rect x="75.8" y="1107.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.8" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (5 samples, 0.11%)</title><rect x="76.0" y="1091.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.0" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (5 samples, 0.11%)</title><rect x="76.0" y="1075.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="79.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.compareAndSet (1 samples, 0.02%)</title><rect x="76.0" y="1059.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="79.0" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (4 samples, 0.09%)</title><rect x="76.3" y="1059.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.3" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (4 samples, 0.09%)</title><rect x="76.3" y="1043.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="79.3" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PullPublisher$Subscription$PullTask.run (1 samples, 0.02%)</title><rect x="76.3" y="1027.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.3" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (1 samples, 0.02%)</title><rect x="76.3" y="1011.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.3" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (1 samples, 0.02%)</title><rect x="76.3" y="995.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.3" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.02%)</title><rect x="76.3" y="979.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.3" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.02%)</title><rect x="76.3" y="963.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="79.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.add (1 samples, 0.02%)</title><rect x="76.3" y="947.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="79.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.offerLast (1 samples, 0.02%)</title><rect x="76.3" y="931.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="79.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.linkLast (1 samples, 0.02%)</title><rect x="76.3" y="915.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="79.3" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="76.3" y="899.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="79.3" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="76.3" y="883.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.3" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (1 samples, 0.02%)</title><rect x="76.3" y="867.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.3" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (1 samples, 0.02%)</title><rect x="76.5" y="1027.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.5" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (1 samples, 0.02%)</title><rect x="76.5" y="1011.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.5" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (1 samples, 0.02%)</title><rect x="76.5" y="995.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.5" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (1 samples, 0.02%)</title><rect x="76.5" y="979.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="79.5" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onNext (1 samples, 0.02%)</title><rect x="76.5" y="963.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="79.5" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.tryFlushCurrent (1 samples, 0.02%)</title><rect x="76.5" y="947.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.5" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$311/767570311.run (1 samples, 0.02%)</title><rect x="76.5" y="931.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.5" y="942.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (1 samples, 0.02%)</title><rect x="76.5" y="915.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.5" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (1 samples, 0.02%)</title><rect x="76.5" y="899.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.5" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="76.5" y="883.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="79.5" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (2 samples, 0.04%)</title><rect x="76.8" y="1027.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.compareAndSet (1 samples, 0.02%)</title><rect x="76.8" y="1011.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.8" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (1 samples, 0.02%)</title><rect x="77.0" y="1011.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.0" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (1 samples, 0.02%)</title><rect x="77.0" y="995.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.0" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (1 samples, 0.02%)</title><rect x="77.0" y="979.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="80.0" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (1 samples, 0.02%)</title><rect x="77.0" y="963.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="80.0" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (1 samples, 0.02%)</title><rect x="77.0" y="947.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.0" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onNext (1 samples, 0.02%)</title><rect x="77.0" y="931.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.0" y="942.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.tryFlushCurrent (1 samples, 0.02%)</title><rect x="77.0" y="915.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.0" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.writeAvailable (1 samples, 0.02%)</title><rect x="77.0" y="899.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.0" y="910.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.02%)</title><rect x="77.0" y="883.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.0" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.02%)</title><rect x="77.0" y="867.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="80.0" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.02%)</title><rect x="77.0" y="851.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.0" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.02%)</title><rect x="77.0" y="835.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="80.0" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.02%)</title><rect x="77.0" y="819.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.0" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.02%)</title><rect x="77.0" y="803.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="80.0" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="787.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="80.0" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="771.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="80.0" y="782.0"></text>
</g>
<g>
<title>__GI___writev (1 samples, 0.02%)</title><rect x="77.0" y="755.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="80.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="739.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="80.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="723.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="80.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="707.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="80.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="691.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="80.0" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="675.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="80.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="659.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="80.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="643.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="80.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="627.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="80.0" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="611.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="80.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="595.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="80.0" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="579.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="80.0" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="563.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="80.0" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="547.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="80.0" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="531.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="80.0" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="515.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="80.0" y="526.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="499.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="80.0" y="510.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="483.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="80.0" y="494.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="467.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="80.0" y="478.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="451.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="80.0" y="462.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="435.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="80.0" y="446.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="419.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="80.0" y="430.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="403.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="80.0" y="414.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="387.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="80.0" y="398.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.0" y="371.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="80.0" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.connectFlows (29 samples, 0.62%)</title><rect x="77.3" y="1123.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.3" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection.getConnectionFlow (1 samples, 0.02%)</title><rect x="77.3" y="1107.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="80.3" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.connectFlows (28 samples, 0.60%)</title><rect x="77.5" y="1107.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.5" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.subscribe (6 samples, 0.13%)</title><rect x="77.5" y="1091.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.5" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (5 samples, 0.11%)</title><rect x="77.8" y="1075.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.8" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (5 samples, 0.11%)</title><rect x="77.8" y="1059.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.8" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (1 samples, 0.02%)</title><rect x="78.6" y="1043.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="81.6" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (1 samples, 0.02%)</title><rect x="78.6" y="1027.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.6" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (1 samples, 0.02%)</title><rect x="78.6" y="1011.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.6" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.dropSubscription (1 samples, 0.02%)</title><rect x="78.8" y="1043.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="81.8" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.reset (1 samples, 0.02%)</title><rect x="78.8" y="1027.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="81.8" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.subscribe (22 samples, 0.47%)</title><rect x="79.1" y="1091.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.1" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher.subscribe (22 samples, 0.47%)</title><rect x="79.1" y="1075.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.1" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalSubscribe (15 samples, 0.32%)</title><rect x="79.1" y="1059.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.1" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (15 samples, 0.32%)</title><rect x="79.1" y="1043.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="82.1" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (15 samples, 0.32%)</title><rect x="79.1" y="1027.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="82.1" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (15 samples, 0.32%)</title><rect x="79.1" y="1011.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="82.1" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (15 samples, 0.32%)</title><rect x="79.1" y="995.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="82.1" y="1006.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.21%)</title><rect x="79.1" y="979.0" width="2.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="82.1" y="990.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="79.1" y="963.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="82.1" y="974.0"></text>
</g>
<g>
<title>__write (5 samples, 0.11%)</title><rect x="79.1" y="947.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="82.1" y="958.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="79.1" y="931.0" width="1.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="82.1" y="942.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="79.1" y="915.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="82.1" y="926.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="79.1" y="899.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="82.1" y="910.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="79.1" y="883.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="82.1" y="894.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="79.1" y="867.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="82.1" y="878.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="79.1" y="851.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="82.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="79.1" y="835.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="82.1" y="846.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="79.1" y="819.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="82.1" y="830.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="79.1" y="803.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="82.1" y="814.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="79.1" y="787.0" width="1.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="82.1" y="798.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="79.1" y="771.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="82.1" y="782.0"></text>
</g>
<g>
<title>__write (5 samples, 0.11%)</title><rect x="80.3" y="963.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="83.3" y="974.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="80.3" y="947.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="83.3" y="958.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="80.3" y="931.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="83.3" y="942.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="80.6" y="915.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="83.6" y="926.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="80.6" y="899.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="83.6" y="910.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="80.6" y="883.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="83.6" y="894.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="80.6" y="867.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="83.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="80.6" y="851.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="83.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="80.6" y="835.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="83.6" y="846.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="80.6" y="819.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="83.6" y="830.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="80.6" y="803.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="83.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="80.8" y="787.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="83.8" y="798.0"></text>
</g>
<g>
<title>__write (5 samples, 0.11%)</title><rect x="81.6" y="979.0" width="1.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="84.6" y="990.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="81.8" y="963.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="84.8" y="974.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="81.8" y="947.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="84.8" y="958.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="81.8" y="931.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="84.8" y="942.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="81.8" y="915.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="84.8" y="926.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="81.8" y="899.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="84.8" y="910.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="81.8" y="883.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="84.8" y="894.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="81.8" y="867.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="84.8" y="878.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="81.8" y="851.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="84.8" y="862.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="82.1" y="835.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="85.1" y="846.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="82.1" y="819.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="85.1" y="830.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="82.1" y="803.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="85.1" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.&lt;init&gt; (1 samples, 0.02%)</title><rect x="82.8" y="1059.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="85.8" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.signalOnSubscribe (6 samples, 0.13%)</title><rect x="83.1" y="1059.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.1" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.onSubscribe (4 samples, 0.09%)</title><rect x="83.3" y="1043.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="86.3" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (4 samples, 0.09%)</title><rect x="83.3" y="1027.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="86.3" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (4 samples, 0.09%)</title><rect x="83.3" y="1011.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.3" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.increase (3 samples, 0.06%)</title><rect x="83.6" y="995.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.getAndAccumulate (2 samples, 0.04%)</title><rect x="83.8" y="979.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="86.8" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onSubscribe (1 samples, 0.02%)</title><rect x="84.3" y="1043.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.3" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.headers (78 samples, 1.67%)</title><rect x="84.6" y="1123.0" width="19.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.09%)</title><rect x="84.6" y="1107.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="87.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (4 samples, 0.09%)</title><rect x="84.6" y="1091.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="87.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeASCII (4 samples, 0.09%)</title><rect x="84.6" y="1075.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="87.6" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="85.4" y="1059.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="88.4" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="85.4" y="1043.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="88.4" y="1054.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)</title><rect x="85.4" y="1027.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="88.4" y="1038.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.02%)</title><rect x="85.4" y="1011.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="88.4" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="85.6" y="1107.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.6" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="85.6" y="1091.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="88.6" y="1102.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="85.6" y="1075.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="88.6" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="85.6" y="1059.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.6" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectHeaders0 (55 samples, 1.17%)</title><rect x="85.9" y="1107.0" width="13.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.9" y="1118.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (1 samples, 0.02%)</title><rect x="85.9" y="1091.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="88.9" y="1102.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate.and (1 samples, 0.02%)</title><rect x="86.1" y="1091.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="89.1" y="1102.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="86.1" y="1075.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="89.1" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectCookies (8 samples, 0.17%)</title><rect x="86.4" y="1091.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="89.4" y="1102.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (6 samples, 0.13%)</title><rect x="86.6" y="1075.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (5 samples, 0.11%)</title><rect x="86.6" y="1059.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.6" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.02%)</title><rect x="86.6" y="1043.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="86.6" y="1027.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.02%)</title><rect x="86.6" y="1011.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.6" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (4 samples, 0.09%)</title><rect x="86.9" y="1043.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="89.9" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (4 samples, 0.09%)</title><rect x="86.9" y="1027.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.9" y="1038.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (4 samples, 0.09%)</title><rect x="86.9" y="1011.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="89.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (3 samples, 0.06%)</title><rect x="87.1" y="995.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="90.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (3 samples, 0.06%)</title><rect x="87.1" y="979.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.1" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (3 samples, 0.06%)</title><rect x="87.1" y="963.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="90.1" y="974.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.02%)</title><rect x="87.4" y="947.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.4" y="958.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.02%)</title><rect x="87.4" y="931.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="90.4" y="942.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.getChar (1 samples, 0.02%)</title><rect x="87.6" y="947.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.6" y="958.0"></text>
</g>
<g>
<title>java/util/List.of (1 samples, 0.02%)</title><rect x="87.9" y="1059.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.9" y="1070.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections.emptyList (1 samples, 0.02%)</title><rect x="87.9" y="1043.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.9" y="1054.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$ListItr.hasNext (1 samples, 0.02%)</title><rect x="88.1" y="1075.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.1" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectHeaders1 (20 samples, 0.43%)</title><rect x="88.4" y="1091.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="91.4" y="1102.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="88.4" y="1075.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="91.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.09%)</title><rect x="88.6" y="1075.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="91.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.06%)</title><rect x="88.9" y="1059.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (1 samples, 0.02%)</title><rect x="88.9" y="1043.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="91.9" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="89.1" y="1043.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="92.1" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (2 samples, 0.04%)</title><rect x="89.6" y="1075.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="92.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (2 samples, 0.04%)</title><rect x="89.6" y="1059.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.6" y="1070.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (2 samples, 0.04%)</title><rect x="89.6" y="1043.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="92.6" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (2 samples, 0.04%)</title><rect x="89.6" y="1027.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.6" y="1038.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (1 samples, 0.02%)</title><rect x="89.9" y="1011.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.9" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.02%)</title><rect x="89.9" y="995.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.9" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getValue (1 samples, 0.02%)</title><rect x="90.1" y="1075.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.1" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.iterator (3 samples, 0.06%)</title><rect x="90.4" y="1075.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="93.4" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.&lt;init&gt; (3 samples, 0.06%)</title><rect x="90.4" y="1059.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.4" y="1070.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntrySet.iterator (1 samples, 0.02%)</title><rect x="90.9" y="1043.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.entrySet (1 samples, 0.02%)</title><rect x="91.2" y="1075.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="94.2" y="1086.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate$$Lambda$302/273370462.test (8 samples, 0.17%)</title><rect x="91.4" y="1075.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="94.4" y="1086.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate.lambda$and$0 (8 samples, 0.17%)</title><rect x="91.4" y="1059.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="94.4" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$$Lambda$217/1274643510.test (2 samples, 0.04%)</title><rect x="91.7" y="1043.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="94.7" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.lambda$static$0 (2 samples, 0.04%)</title><rect x="91.7" y="1027.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.04%)</title><rect x="91.7" y="1011.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="94.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="91.7" y="995.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="91.7" y="979.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="94.7" y="990.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.04%)</title><rect x="91.7" y="963.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="94.7" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$77/1995619265.test (5 samples, 0.11%)</title><rect x="92.2" y="1043.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="95.2" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$10 (5 samples, 0.11%)</title><rect x="92.2" y="1027.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="95.2" y="1038.0"></text>
</g>
<g>
<title>java/util/function/Predicate$$Lambda$66/20094719.test (5 samples, 0.11%)</title><rect x="92.2" y="1011.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="95.2" y="1022.0"></text>
</g>
<g>
<title>java/util/function/Predicate.lambda$negate$1 (5 samples, 0.11%)</title><rect x="92.2" y="995.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.2" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$65/324457684.test (5 samples, 0.11%)</title><rect x="92.2" y="979.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.2" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$3 (5 samples, 0.11%)</title><rect x="92.2" y="963.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.2" y="974.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.09%)</title><rect x="92.2" y="947.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="95.2" y="958.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.09%)</title><rect x="92.2" y="931.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.2" y="942.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="92.2" y="915.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="95.2" y="926.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="92.4" y="915.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="95.4" y="926.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="92.4" y="899.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="95.4" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="92.7" y="915.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="95.7" y="926.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.02%)</title><rect x="92.7" y="899.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="95.7" y="910.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.02%)</title><rect x="92.7" y="883.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="95.7" y="894.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.02%)</title><rect x="92.7" y="867.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="95.7" y="878.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.02%)</title><rect x="92.7" y="851.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="95.7" y="862.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.02%)</title><rect x="92.9" y="899.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="95.9" y="910.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.02%)</title><rect x="92.9" y="883.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="95.9" y="894.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.02%)</title><rect x="92.9" y="867.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="95.9" y="878.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="93.2" y="947.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.2" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="93.2" y="931.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.2" y="942.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="93.2" y="915.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="96.2" y="926.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="93.2" y="899.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.2" y="910.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.02%)</title><rect x="93.2" y="883.0" width="0.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="96.2" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.build (25 samples, 0.53%)</title><rect x="93.4" y="1091.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.4" y="1102.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (25 samples, 0.53%)</title><rect x="93.4" y="1075.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="96.4" y="1086.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (25 samples, 0.53%)</title><rect x="93.4" y="1059.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.4" y="1070.0"></text>
</g>
<g>
<title>java/util/AbstractMap.isEmpty (2 samples, 0.04%)</title><rect x="93.4" y="1043.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="96.4" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap.size (2 samples, 0.04%)</title><rect x="93.4" y="1027.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.4" y="1038.0"></text>
</g>
<g>
<title>InlineCacheBuffer (1 samples, 0.02%)</title><rect x="93.4" y="1011.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="96.4" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (1 samples, 0.02%)</title><rect x="93.7" y="1011.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.7" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeMap.&lt;init&gt; (3 samples, 0.06%)</title><rect x="93.9" y="1043.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="96.9" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (20 samples, 0.43%)</title><rect x="94.7" y="1043.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="97.7" y="1054.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$137/1564001392.accept (19 samples, 0.41%)</title><rect x="94.9" y="1027.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="97.9" y="1038.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (17 samples, 0.36%)</title><rect x="95.4" y="1011.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.trim (6 samples, 0.13%)</title><rect x="95.7" y="995.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="98.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (5 samples, 0.11%)</title><rect x="95.9" y="979.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.9" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.09%)</title><rect x="96.2" y="963.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="99.2" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.09%)</title><rect x="96.2" y="947.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="99.2" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$62/1431467659.test (2 samples, 0.04%)</title><rect x="96.7" y="931.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.7" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="97.2" y="995.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="97.2" y="979.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="100.2" y="990.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$145/1493650191.get$Lambda (1 samples, 0.02%)</title><rect x="97.2" y="963.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.2" y="974.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$145/1493650191.&lt;init&gt; (1 samples, 0.02%)</title><rect x="97.2" y="947.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="100.2" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (2 samples, 0.04%)</title><rect x="97.5" y="995.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="100.5" y="1006.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$145/1493650191.accept (2 samples, 0.04%)</title><rect x="97.5" y="979.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="100.5" y="990.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (1 samples, 0.02%)</title><rect x="97.7" y="963.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.7" y="974.0"></text>
</g>
<g>
<title>java/lang/String.trim (1 samples, 0.02%)</title><rect x="97.7" y="947.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.7" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (1 samples, 0.02%)</title><rect x="97.7" y="931.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.7" y="942.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (7 samples, 0.15%)</title><rect x="98.0" y="995.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="101.0" y="1006.0"></text>
</g>
<g>
<title>java/util/TreeMap$Entry.&lt;init&gt; (1 samples, 0.02%)</title><rect x="98.5" y="979.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="101.5" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (3 samples, 0.06%)</title><rect x="98.7" y="979.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.7" y="990.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (3 samples, 0.06%)</title><rect x="98.7" y="963.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="101.7" y="974.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (3 samples, 0.06%)</title><rect x="98.7" y="947.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="101.7" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (3 samples, 0.06%)</title><rect x="98.7" y="931.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="101.7" y="942.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.06%)</title><rect x="98.7" y="915.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="101.7" y="926.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.06%)</title><rect x="98.7" y="899.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="101.7" y="910.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (2 samples, 0.04%)</title><rect x="99.0" y="883.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="102.0" y="894.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.02%)</title><rect x="99.5" y="979.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="102.5" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (1 samples, 0.02%)</title><rect x="99.5" y="963.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.5" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.hostString (6 samples, 0.13%)</title><rect x="99.7" y="1107.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.04%)</title><rect x="99.7" y="1091.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.02%)</title><rect x="100.0" y="1075.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="103.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.09%)</title><rect x="100.2" y="1091.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="103.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (4 samples, 0.09%)</title><rect x="100.2" y="1075.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="103.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/452805835.invoke (4 samples, 0.09%)</title><rect x="100.2" y="1059.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="103.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.04%)</title><rect x="100.5" y="1043.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixCoder (1 samples, 0.02%)</title><rect x="100.5" y="1027.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.02%)</title><rect x="100.7" y="1027.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="103.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.02%)</title><rect x="100.7" y="1011.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.7" y="1022.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="100.7" y="995.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="103.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/473581465.invoke (1 samples, 0.02%)</title><rect x="101.0" y="1043.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="104.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="101.0" y="1027.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="104.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.02%)</title><rect x="101.0" y="1011.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="104.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.02%)</title><rect x="101.0" y="995.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="104.0" y="1006.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="101.0" y="979.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="104.0" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.logHeaders (1 samples, 0.02%)</title><rect x="101.2" y="1107.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="104.2" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.requestURI (5 samples, 0.11%)</title><rect x="101.5" y="1107.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="104.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.02%)</title><rect x="101.7" y="1091.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="104.7" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.getPathAndQuery (3 samples, 0.06%)</title><rect x="102.0" y="1091.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.06%)</title><rect x="102.0" y="1075.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="105.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (3 samples, 0.06%)</title><rect x="102.0" y="1059.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="105.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/452805835.invoke (3 samples, 0.06%)</title><rect x="102.0" y="1043.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.06%)</title><rect x="102.0" y="1027.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="105.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (1 samples, 0.02%)</title><rect x="102.0" y="1011.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="105.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="102.0" y="995.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="102.0" y="979.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="105.0" y="990.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.04%)</title><rect x="102.2" y="1011.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.02%)</title><rect x="102.5" y="995.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="105.5" y="1006.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="102.5" y="979.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="105.5" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.setHeader (6 samples, 0.13%)</title><rect x="102.7" y="1107.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="105.7" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.02%)</title><rect x="102.7" y="1091.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="105.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.02%)</title><rect x="102.7" y="1075.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="105.7" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="103.0" y="1091.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="106.0" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="103.0" y="1075.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="106.0" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="103.0" y="1059.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="106.0" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="103.0" y="1043.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="106.0" y="1054.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="103.0" y="1027.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="106.0" y="1038.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (4 samples, 0.09%)</title><rect x="103.3" y="1091.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.3" y="1102.0"></text>
</g>
<g>
<title>java/util/TreeMap$Entry.&lt;init&gt; (1 samples, 0.02%)</title><rect x="103.3" y="1075.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.3" y="1086.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (3 samples, 0.06%)</title><rect x="103.5" y="1075.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="106.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (3 samples, 0.06%)</title><rect x="103.5" y="1059.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="106.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (3 samples, 0.06%)</title><rect x="103.5" y="1043.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="103.5" y="1027.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (2 samples, 0.04%)</title><rect x="103.8" y="1027.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="103.8" y="1011.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="106.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="103.8" y="995.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.8" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$283/1958570298.apply (1 samples, 0.02%)</title><rect x="104.3" y="1155.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.3" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.&lt;init&gt; (21 samples, 0.45%)</title><rect x="104.5" y="1187.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="107.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.04%)</title><rect x="104.8" y="1171.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.8" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.04%)</title><rect x="104.8" y="1155.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="107.8" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$251/1613021659.get$Lambda (2 samples, 0.04%)</title><rect x="104.8" y="1139.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.8" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.subscribe (14 samples, 0.30%)</title><rect x="105.3" y="1171.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="108.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.isEmpty (2 samples, 0.04%)</title><rect x="105.8" y="1155.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="108.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.peekFirst (1 samples, 0.02%)</title><rect x="106.0" y="1139.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="109.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.first (1 samples, 0.02%)</title><rect x="106.0" y="1123.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="109.0" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (10 samples, 0.21%)</title><rect x="106.3" y="1155.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="109.3" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (10 samples, 0.21%)</title><rect x="106.3" y="1139.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="109.3" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (10 samples, 0.21%)</title><rect x="106.3" y="1123.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="109.3" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (10 samples, 0.21%)</title><rect x="106.3" y="1107.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="109.3" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (1 samples, 0.02%)</title><rect x="106.3" y="1091.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="109.3" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PullPublisher$Subscription$PullTask.run (1 samples, 0.02%)</title><rect x="106.5" y="1091.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="109.5" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (7 samples, 0.15%)</title><rect x="106.8" y="1091.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.8" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$231/136586174.run (7 samples, 0.15%)</title><rect x="106.8" y="1075.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="109.8" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (7 samples, 0.15%)</title><rect x="106.8" y="1059.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="109.8" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.checkRequestMore (1 samples, 0.02%)</title><rect x="106.8" y="1043.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.02%)</title><rect x="106.8" y="1027.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="109.8" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (5 samples, 0.11%)</title><rect x="107.0" y="1043.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="110.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="107.0" y="1027.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="107.0" y="1011.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="110.0" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$267/401982671.get$Lambda (1 samples, 0.02%)</title><rect x="107.0" y="995.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.0" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$267/401982671.&lt;init&gt; (1 samples, 0.02%)</title><rect x="107.0" y="979.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="110.0" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.02%)</title><rect x="107.3" y="1027.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="110.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.02%)</title><rect x="107.3" y="1011.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (1 samples, 0.02%)</title><rect x="107.3" y="995.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="110.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/BootstrapMethodInvoker.invoke (1 samples, 0.02%)</title><rect x="107.3" y="979.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="110.3" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invokeExact_MT (1 samples, 0.02%)</title><rect x="107.3" y="963.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.3" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1411656898.invokeStatic (1 samples, 0.02%)</title><rect x="107.3" y="947.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="110.3" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaMetafactory.metafactory (1 samples, 0.02%)</title><rect x="107.3" y="931.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="110.3" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.02%)</title><rect x="107.3" y="915.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="110.3" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.02%)</title><rect x="107.3" y="899.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="110.3" y="910.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.defineAnonymousClass (1 samples, 0.02%)</title><rect x="107.3" y="883.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="110.3" y="894.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.defineAnonymousClass0 (1 samples, 0.02%)</title><rect x="107.3" y="867.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.3" y="878.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0 (1 samples, 0.02%)</title><rect x="107.3" y="851.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="110.3" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.02%)</title><rect x="107.3" y="835.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="110.3" y="846.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.02%)</title><rect x="107.3" y="819.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="110.3" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.02%)</title><rect x="107.3" y="803.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="110.3" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.02%)</title><rect x="107.3" y="787.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="110.3" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.02%)</title><rect x="107.3" y="771.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="110.3" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.02%)</title><rect x="107.3" y="755.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="110.3" y="766.0"></text>
</g>
<g>
<title>SignatureIterator::iterate_returntype() (1 samples, 0.02%)</title><rect x="107.3" y="739.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="110.3" y="750.0"></text>
</g>
<g>
<title>SignatureIterator::parse_type() (1 samples, 0.02%)</title><rect x="107.3" y="723.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="110.3" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onSubscribe (1 samples, 0.02%)</title><rect x="107.5" y="1027.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="110.5" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.onSubscribe (2 samples, 0.04%)</title><rect x="107.8" y="1027.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.8" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.request (2 samples, 0.04%)</title><rect x="107.8" y="1011.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="110.8" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.increase (1 samples, 0.02%)</title><rect x="108.0" y="995.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.getAndAccumulate (1 samples, 0.02%)</title><rect x="108.0" y="979.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="111.0" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand$$Lambda$271/1739649341.applyAsLong (1 samples, 0.02%)</title><rect x="108.0" y="963.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="111.0" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.tryAsyncReceive (1 samples, 0.02%)</title><rect x="108.3" y="1043.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="111.3" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (1 samples, 0.02%)</title><rect x="108.3" y="1027.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.3" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (1 samples, 0.02%)</title><rect x="108.3" y="1011.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="111.3" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (1 samples, 0.02%)</title><rect x="108.3" y="995.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="111.3" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.parse (1 samples, 0.02%)</title><rect x="108.3" y="979.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="111.3" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (1 samples, 0.02%)</title><rect x="108.3" y="963.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="111.3" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (1 samples, 0.02%)</title><rect x="108.5" y="1091.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="111.5" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.&lt;init&gt; (4 samples, 0.09%)</title><rect x="108.8" y="1171.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.8" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.&lt;init&gt; (1 samples, 0.02%)</title><rect x="109.8" y="1187.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="112.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.02%)</title><rect x="109.8" y="1171.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="112.8" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.establishExchange (167 samples, 3.57%)</title><rect x="110.1" y="1331.0" width="42.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.1" y="1342.0">jdk/..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="110.3" y="1315.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="113.3" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.02%)</title><rect x="110.6" y="1315.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="113.6" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.02%)</title><rect x="110.6" y="1299.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="113.6" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (1 samples, 0.02%)</title><rect x="110.6" y="1283.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="113.6" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/BootstrapMethodInvoker.invoke (1 samples, 0.02%)</title><rect x="110.6" y="1267.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invokeExact_MT (1 samples, 0.02%)</title><rect x="110.6" y="1251.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.6" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1411656898.invokeStatic (1 samples, 0.02%)</title><rect x="110.6" y="1235.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaMetafactory.metafactory (1 samples, 0.02%)</title><rect x="110.6" y="1219.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.6" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.02%)</title><rect x="110.6" y="1203.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="113.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.02%)</title><rect x="110.6" y="1187.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.6" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.defineAnonymousClass (1 samples, 0.02%)</title><rect x="110.6" y="1171.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.6" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.defineAnonymousClass0 (1 samples, 0.02%)</title><rect x="110.6" y="1155.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="113.6" y="1166.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.02%)</title><rect x="110.6" y="1139.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="113.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="110.6" y="1123.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="113.6" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="110.6" y="1107.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="113.6" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="110.6" y="1091.0" width="0.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="113.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="110.6" y="1075.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="113.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (3 samples, 0.06%)</title><rect x="110.8" y="1315.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (2 samples, 0.04%)</title><rect x="111.1" y="1299.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.1" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$245/687077497.apply (2 samples, 0.04%)</title><rect x="111.1" y="1283.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="114.1" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$establishExchange$2 (2 samples, 0.04%)</title><rect x="111.1" y="1267.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="114.1" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (1 samples, 0.02%)</title><rect x="111.3" y="1251.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="114.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.02%)</title><rect x="111.3" y="1235.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="114.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.09%)</title><rect x="111.6" y="1315.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="114.6" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.09%)</title><rect x="111.6" y="1299.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="114.6" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.&lt;init&gt; (1 samples, 0.02%)</title><rect x="111.6" y="1283.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="114.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.&lt;init&gt; (1 samples, 0.02%)</title><rect x="111.6" y="1267.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="114.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.&lt;init&gt; (1 samples, 0.02%)</title><rect x="111.6" y="1251.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="114.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.&lt;init&gt; (1 samples, 0.02%)</title><rect x="111.6" y="1235.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="114.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.02%)</title><rect x="111.8" y="1283.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="114.8" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$242/1842297967.accept (1 samples, 0.02%)</title><rect x="111.8" y="1267.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="114.8" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$establishExchange$1 (1 samples, 0.02%)</title><rect x="111.8" y="1251.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.04%)</title><rect x="112.1" y="1283.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="115.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.tryPushStack (2 samples, 0.04%)</title><rect x="112.1" y="1267.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.04%)</title><rect x="112.1" y="1251.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="115.1" y="1262.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.04%)</title><rect x="112.1" y="1235.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="115.1" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.get (157 samples, 3.35%)</title><rect x="112.6" y="1315.0" width="39.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="115.6" y="1326.0">jdk..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="112.8" y="1299.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="115.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="112.8" y="1283.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="115.8" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$177/399234874.get$Lambda (1 samples, 0.02%)</title><rect x="112.8" y="1267.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="115.8" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$177/399234874.&lt;init&gt; (1 samples, 0.02%)</title><rect x="112.8" y="1251.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="115.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="112.8" y="1235.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (139 samples, 2.97%)</title><rect x="113.1" y="1299.0" width="35.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="116.1" y="1310.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (138 samples, 2.95%)</title><rect x="113.3" y="1283.0" width="34.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.3" y="1294.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (137 samples, 2.93%)</title><rect x="113.3" y="1267.0" width="34.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="116.3" y="1278.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (3 samples, 0.06%)</title><rect x="113.3" y="1251.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="116.3" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (3 samples, 0.06%)</title><rect x="113.3" y="1235.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="116.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (3 samples, 0.06%)</title><rect x="113.3" y="1219.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="116.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (3 samples, 0.06%)</title><rect x="113.3" y="1203.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="116.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.06%)</title><rect x="113.3" y="1187.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="116.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.04%)</title><rect x="113.6" y="1171.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="116.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.04%)</title><rect x="113.6" y="1155.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="113.6" y="1139.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="116.6" y="1150.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="113.6" y="1123.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="116.6" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$177/399234874.apply (1 samples, 0.02%)</title><rect x="113.8" y="1123.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="116.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.02%)</title><rect x="114.1" y="1251.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.1" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$177/399234874.apply (1 samples, 0.02%)</title><rect x="114.1" y="1235.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="117.1" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$177/399234874.apply (133 samples, 2.84%)</title><rect x="114.3" y="1251.0" width="33.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="117.3" y="1262.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.lambda$get$0 (133 samples, 2.84%)</title><rect x="114.3" y="1235.0" width="33.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.3" y="1246.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.createExchangeImpl (133 samples, 2.84%)</title><rect x="114.3" y="1219.0" width="33.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.3" y="1230.0">jd..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApply (69 samples, 1.47%)</title><rect x="114.3" y="1203.0" width="17.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (69 samples, 1.47%)</title><rect x="114.3" y="1187.0" width="17.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="117.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyNow (69 samples, 1.47%)</title><rect x="114.3" y="1171.0" width="17.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="117.3" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$236/1436763450.apply (66 samples, 1.41%)</title><rect x="114.3" y="1155.0" width="16.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="117.3" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.lambda$createExchangeImpl$1 (66 samples, 1.41%)</title><rect x="114.3" y="1139.0" width="16.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="117.3" y="1150.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="114.3" y="1123.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="117.3" y="1134.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="114.3" y="1107.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="117.3" y="1118.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)</title><rect x="114.3" y="1091.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="117.3" y="1102.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)</title><rect x="114.3" y="1075.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="117.3" y="1086.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (1 samples, 0.02%)</title><rect x="114.3" y="1059.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="117.3" y="1070.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::call_predicate(int, int, CompLevel, Method*) (1 samples, 0.02%)</title><rect x="114.3" y="1043.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="117.3" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.h2Upgrade (65 samples, 1.39%)</title><rect x="114.6" y="1123.0" width="16.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="117.6" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.setH2Upgrade (64 samples, 1.37%)</title><rect x="114.8" y="1107.0" width="16.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="117.8" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getSettingsString (48 samples, 1.03%)</title><rect x="114.8" y="1091.0" width="12.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encodeToString (7 samples, 0.15%)</title><rect x="114.8" y="1075.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="114.8" y="1059.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="117.8" y="1070.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="115.1" y="1043.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="118.1" y="1054.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encode (5 samples, 0.11%)</title><rect x="115.3" y="1059.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.3" y="1070.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encode0 (3 samples, 0.06%)</title><rect x="115.6" y="1043.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="118.6" y="1054.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encodeBlock (2 samples, 0.04%)</title><rect x="115.9" y="1027.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="118.9" y="1038.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.outLength (1 samples, 0.02%)</title><rect x="116.4" y="1043.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="119.4" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getClientSettings (32 samples, 0.68%)</title><rect x="116.6" y="1075.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="119.6" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getParameter (30 samples, 0.64%)</title><rect x="116.6" y="1059.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="119.6" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getIntegerNetProperty (30 samples, 0.64%)</title><rect x="116.6" y="1043.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="119.6" y="1054.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (30 samples, 0.64%)</title><rect x="116.6" y="1027.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="119.6" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.02%)</title><rect x="116.6" y="1011.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="119.6" y="1022.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (23 samples, 0.49%)</title><rect x="116.9" y="1011.0" width="5.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="119.9" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.02%)</title><rect x="117.6" y="995.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="120.6" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.02%)</title><rect x="117.6" y="979.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="120.6" y="990.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.02%)</title><rect x="117.9" y="995.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="120.9" y="1006.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.06%)</title><rect x="118.1" y="995.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="121.1" y="1006.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="118.4" y="979.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="121.4" y="990.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.02%)</title><rect x="118.6" y="979.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="121.6" y="990.0"></text>
</g>
<g>
<title>nmethod::scopes_data_end() const (2 samples, 0.04%)</title><rect x="118.9" y="995.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="121.9" y="1006.0"></text>
</g>
<g>
<title>nmethod::scopes_pcs_begin() const (1 samples, 0.02%)</title><rect x="119.4" y="995.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="122.4" y="1006.0"></text>
</g>
<g>
<title>nmethod::scopes_pcs_end() const (1 samples, 0.02%)</title><rect x="119.6" y="995.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="122.6" y="1006.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool) (2 samples, 0.04%)</title><rect x="119.9" y="995.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="122.9" y="1006.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.04%)</title><rect x="119.9" y="979.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="122.9" y="990.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="119.9" y="963.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="122.9" y="974.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="119.9" y="947.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="122.9" y="958.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.02%)</title><rect x="120.1" y="963.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="123.1" y="974.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (9 samples, 0.19%)</title><rect x="120.4" y="995.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="123.4" y="1006.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (3 samples, 0.06%)</title><rect x="121.1" y="979.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="124.1" y="990.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.02%)</title><rect x="121.6" y="963.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="124.6" y="974.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (2 samples, 0.04%)</title><rect x="121.9" y="979.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="124.9" y="990.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.02%)</title><rect x="122.4" y="979.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="125.4" y="990.0"></text>
</g>
<g>
<title>call_stub (2 samples, 0.04%)</title><rect x="122.7" y="1011.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="125.7" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$61/1595282218.run (3 samples, 0.06%)</title><rect x="123.2" y="1011.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.2" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$getIntegerNetProperty$11 (2 samples, 0.04%)</title><rect x="123.4" y="995.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="126.4" y="1006.0"></text>
</g>
<g>
<title>sun/net/NetProperties.getInteger (2 samples, 0.04%)</title><rect x="123.4" y="979.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="126.4" y="990.0"></text>
</g>
<g>
<title>java/lang/System.getProperty (2 samples, 0.04%)</title><rect x="123.4" y="963.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.4" y="974.0"></text>
</g>
<g>
<title>java/lang/System.getSecurityManager (1 samples, 0.02%)</title><rect x="123.4" y="947.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="126.4" y="958.0"></text>
</g>
<g>
<title>java/util/Properties.getProperty (1 samples, 0.02%)</title><rect x="123.7" y="947.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.7" y="958.0"></text>
</g>
<g>
<title>java/util/Properties.getProperty (1 samples, 0.02%)</title><rect x="123.7" y="931.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="126.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.02%)</title><rect x="123.7" y="915.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.7" y="926.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.02%)</title><rect x="123.9" y="1011.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="126.9" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.&lt;init&gt; (1 samples, 0.02%)</title><rect x="124.2" y="1059.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="127.2" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.&lt;init&gt; (1 samples, 0.02%)</title><rect x="124.2" y="1043.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="127.2" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.fill (1 samples, 0.02%)</title><rect x="124.2" y="1027.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="127.2" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.setParameter (1 samples, 0.02%)</title><rect x="124.4" y="1059.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="127.4" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.toByteArray (9 samples, 0.19%)</title><rect x="124.7" y="1075.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="127.7" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.11%)</title><rect x="124.7" y="1059.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="127.7" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.11%)</title><rect x="124.7" y="1043.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="127.7" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.11%)</title><rect x="124.7" y="1027.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="127.7" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.11%)</title><rect x="124.7" y="1011.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="127.7" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.09%)</title><rect x="124.9" y="995.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="127.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="124.9" y="979.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="127.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="125.2" y="963.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="128.2" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="125.2" y="947.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="128.2" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="125.2" y="931.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="128.2" y="942.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.04%)</title><rect x="125.4" y="979.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="128.4" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.length (1 samples, 0.02%)</title><rect x="125.9" y="1059.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.9" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.toByteBuffer (3 samples, 0.06%)</title><rect x="126.2" y="1059.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="129.2" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="126.7" y="1043.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="129.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="126.7" y="1027.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="129.7" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="126.7" y="1011.0" width="0.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="129.7" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="126.7" y="995.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="129.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="126.7" y="979.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="129.7" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="126.7" y="963.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="129.7" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="126.7" y="947.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="129.7" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="126.7" y="931.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="129.7" y="942.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.setHeader (16 samples, 0.34%)</title><rect x="126.9" y="1091.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="129.9" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.06%)</title><rect x="126.9" y="1075.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="129.9" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.04%)</title><rect x="127.2" y="1059.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="130.2" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.04%)</title><rect x="127.2" y="1043.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="130.2" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.04%)</title><rect x="127.2" y="1027.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="130.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="127.2" y="1011.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="130.2" y="1022.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="127.4" y="1011.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="130.4" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (13 samples, 0.28%)</title><rect x="127.7" y="1075.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="130.7" y="1086.0"></text>
</g>
<g>
<title>java/util/TreeMap$Entry.&lt;init&gt; (2 samples, 0.04%)</title><rect x="127.9" y="1059.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="130.9" y="1070.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (5 samples, 0.11%)</title><rect x="128.5" y="1059.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="131.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (5 samples, 0.11%)</title><rect x="128.5" y="1043.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="131.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (5 samples, 0.11%)</title><rect x="128.5" y="1027.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="131.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="128.7" y="1011.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="131.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (3 samples, 0.06%)</title><rect x="129.0" y="1011.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.02%)</title><rect x="129.2" y="995.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="132.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.02%)</title><rect x="129.2" y="979.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="132.2" y="990.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.02%)</title><rect x="129.5" y="995.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="132.5" y="1006.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (5 samples, 0.11%)</title><rect x="129.7" y="1059.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.7" y="1070.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateLeft (2 samples, 0.04%)</title><rect x="129.7" y="1043.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.7" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (3 samples, 0.06%)</title><rect x="130.2" y="1043.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.2" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="130.7" y="1027.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="133.7" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="130.7" y="1011.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="133.7" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="130.7" y="995.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="133.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="130.7" y="979.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="133.7" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="130.7" y="963.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="133.7" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (3 samples, 0.06%)</title><rect x="131.0" y="1155.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="134.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.04%)</title><rect x="131.0" y="1139.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="134.0" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (1 samples, 0.02%)</title><rect x="131.5" y="1139.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="134.5" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.createHttp1Exchange (64 samples, 1.37%)</title><rect x="131.7" y="1203.0" width="16.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.7" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.&lt;init&gt; (64 samples, 1.37%)</title><rect x="131.7" y="1187.0" width="16.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="134.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.&lt;clinit&gt; (1 samples, 0.02%)</title><rect x="132.2" y="1171.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.2" y="1182.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.02%)</title><rect x="132.2" y="1155.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="135.2" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.&lt;init&gt; (2 samples, 0.04%)</title><rect x="132.5" y="1171.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="135.5" y="1182.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.02%)</title><rect x="132.7" y="1155.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="135.7" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.&lt;init&gt; (6 samples, 0.13%)</title><rect x="133.0" y="1171.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="136.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.06%)</title><rect x="133.7" y="1155.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="136.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.06%)</title><rect x="133.7" y="1139.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="136.7" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$$Lambda$181/1303688099.get$Lambda (3 samples, 0.06%)</title><rect x="133.7" y="1123.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="136.7" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.&lt;clinit&gt; (1 samples, 0.02%)</title><rect x="134.5" y="1171.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="137.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.02%)</title><rect x="134.5" y="1155.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="137.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.02%)</title><rect x="134.5" y="1139.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="137.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (1 samples, 0.02%)</title><rect x="134.5" y="1123.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="137.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/BootstrapMethodInvoker.invoke (1 samples, 0.02%)</title><rect x="134.5" y="1107.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="137.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invokeExact_MT (1 samples, 0.02%)</title><rect x="134.5" y="1091.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="137.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1411656898.invokeStatic (1 samples, 0.02%)</title><rect x="134.5" y="1075.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="137.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaMetafactory.metafactory (1 samples, 0.02%)</title><rect x="134.5" y="1059.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="137.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.02%)</title><rect x="134.5" y="1043.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="137.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.02%)</title><rect x="134.5" y="1027.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="137.5" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.defineAnonymousClass (1 samples, 0.02%)</title><rect x="134.5" y="1011.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="137.5" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.defineAnonymousClass0 (1 samples, 0.02%)</title><rect x="134.5" y="995.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="137.5" y="1006.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.02%)</title><rect x="134.5" y="979.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="137.5" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.getConnection (10 samples, 0.21%)</title><rect x="134.8" y="1171.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="137.8" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.getConnection (9 samples, 0.19%)</title><rect x="134.8" y="1155.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="137.8" y="1166.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.02%)</title><rect x="135.5" y="1139.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="138.5" y="1150.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="135.5" y="1123.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="138.5" y="1134.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.02%)</title><rect x="135.5" y="1107.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="138.5" y="1118.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="135.5" y="1091.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="138.5" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.findConnection (5 samples, 0.11%)</title><rect x="135.8" y="1139.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="138.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.09%)</title><rect x="136.0" y="1123.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="139.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.09%)</title><rect x="136.0" y="1107.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="139.0" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.equals (3 samples, 0.06%)</title><rect x="136.3" y="1091.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.3" y="1102.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="136.3" y="1075.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="139.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Objects.equals (2 samples, 0.04%)</title><rect x="136.5" y="1075.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="139.5" y="1086.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.equals (2 samples, 0.04%)</title><rect x="136.5" y="1059.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.5" y="1070.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress$InetSocketAddressHolder.equals (2 samples, 0.04%)</title><rect x="136.5" y="1043.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="139.5" y="1054.0"></text>
</g>
<g>
<title>java/net/Inet4Address.equals (2 samples, 0.04%)</title><rect x="136.5" y="1027.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="139.5" y="1038.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.hashCode (1 samples, 0.02%)</title><rect x="136.8" y="1011.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="139.8" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.isOpen (1 samples, 0.02%)</title><rect x="137.0" y="1155.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="140.0" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.getAddress (42 samples, 0.90%)</title><rect x="137.3" y="1171.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/22756955.linkToTargetMethod (2 samples, 0.04%)</title><rect x="137.3" y="1155.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.04%)</title><rect x="137.3" y="1139.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="140.3" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="137.3" y="1123.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="140.3" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="137.3" y="1107.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="140.3" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="137.3" y="1091.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="140.3" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="137.3" y="1075.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="140.3" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="137.3" y="1059.0" width="0.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="140.3" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="137.3" y="1043.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="140.3" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="137.3" y="1027.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="140.3" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="137.3" y="1011.0" width="0.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="140.3" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl$$Lambda$187/850260700.get$Lambda (1 samples, 0.02%)</title><rect x="137.5" y="1123.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="140.5" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl$$Lambda$187/850260700.&lt;init&gt; (1 samples, 0.02%)</title><rect x="137.5" y="1107.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="140.5" y="1118.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (40 samples, 0.85%)</title><rect x="137.8" y="1155.0" width="10.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="140.8" y="1166.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="137.8" y="1139.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="140.8" y="1150.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (21 samples, 0.45%)</title><rect x="138.0" y="1139.0" width="5.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="141.0" y="1150.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (2 samples, 0.04%)</title><rect x="139.0" y="1123.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="142.0" y="1134.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.02%)</title><rect x="139.5" y="1123.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="142.5" y="1134.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (5 samples, 0.11%)</title><rect x="139.8" y="1123.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="142.8" y="1134.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="140.0" y="1107.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="143.0" y="1118.0"></text>
</g>
<g>
<title>CompilationPolicy::can_be_compiled(methodHandle const&amp;, int) (1 samples, 0.02%)</title><rect x="140.0" y="1091.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="143.0" y="1102.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.02%)</title><rect x="140.3" y="1107.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="143.3" y="1118.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.02%)</title><rect x="140.6" y="1107.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="143.6" y="1118.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.02%)</title><rect x="140.6" y="1091.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="143.6" y="1102.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="140.8" y="1107.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="143.8" y="1118.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.04%)</title><rect x="141.1" y="1123.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="144.1" y="1134.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="141.6" y="1123.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="144.6" y="1134.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.02%)</title><rect x="141.6" y="1107.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="144.6" y="1118.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (6 samples, 0.13%)</title><rect x="141.8" y="1123.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="144.8" y="1134.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (3 samples, 0.06%)</title><rect x="141.8" y="1107.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="144.8" y="1118.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (2 samples, 0.04%)</title><rect x="141.8" y="1091.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="144.8" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="142.3" y="1091.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="145.3" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="142.3" y="1075.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="145.3" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="142.3" y="1059.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="145.3" y="1070.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.04%)</title><rect x="142.6" y="1107.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="145.6" y="1118.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="142.6" y="1091.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="145.6" y="1102.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="142.6" y="1075.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="145.6" y="1086.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.02%)</title><rect x="142.8" y="1091.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="145.8" y="1102.0"></text>
</g>
<g>
<title>nmethod::metadata_addr_at(int) const (1 samples, 0.02%)</title><rect x="143.1" y="1107.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="146.1" y="1118.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.02%)</title><rect x="143.3" y="1139.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="146.3" y="1150.0"></text>
</g>
<g>
<title>Method::is_method() const volatile (1 samples, 0.02%)</title><rect x="143.6" y="1139.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="146.6" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl$$Lambda$187/850260700.run (16 samples, 0.34%)</title><rect x="143.8" y="1139.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.8" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.lambda$getAddress$5 (16 samples, 0.34%)</title><rect x="143.8" y="1123.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.8" y="1134.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.&lt;init&gt; (16 samples, 0.34%)</title><rect x="143.8" y="1107.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="146.8" y="1118.0"></text>
</g>
<g>
<title>java/net/InetAddress.getByName (15 samples, 0.32%)</title><rect x="144.1" y="1091.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="147.1" y="1102.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName (15 samples, 0.32%)</title><rect x="144.1" y="1075.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="147.1" y="1086.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName (15 samples, 0.32%)</title><rect x="144.1" y="1059.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.13%)</title><rect x="144.1" y="1043.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="147.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.04%)</title><rect x="144.3" y="1027.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="147.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.06%)</title><rect x="144.8" y="1027.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="147.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="145.6" y="1043.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.6" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="145.6" y="1027.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="148.6" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="145.6" y="1011.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="148.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="145.6" y="995.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="148.6" y="1006.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName0 (8 samples, 0.17%)</title><rect x="145.8" y="1043.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/Object.clone (2 samples, 0.04%)</title><rect x="145.8" y="1027.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.8" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="145.8" y="1011.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="148.8" y="1022.0"></text>
</g>
<g>
<title>JVM_Clone (1 samples, 0.02%)</title><rect x="146.1" y="1011.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="149.1" y="1022.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;540784ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)9, 540784ul&gt;::access_barrier(oopDesc*, oopDesc*, unsigned long) (1 samples, 0.02%)</title><rect x="146.1" y="995.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="149.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (1 samples, 0.02%)</title><rect x="146.3" y="1027.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="149.3" y="1038.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="146.3" y="1011.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="149.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.02%)</title><rect x="146.6" y="1027.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="149.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.02%)</title><rect x="146.6" y="1011.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="149.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListSet.iterator (4 samples, 0.09%)</title><rect x="146.9" y="1027.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$KeySet.iterator (4 samples, 0.09%)</title><rect x="146.9" y="1011.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="149.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Iter.advance (1 samples, 0.02%)</title><rect x="147.4" y="995.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="150.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$KeyIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="147.6" y="995.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="150.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Iter.&lt;init&gt; (1 samples, 0.02%)</title><rect x="147.6" y="979.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="150.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Iter.advance (1 samples, 0.02%)</title><rect x="147.6" y="963.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="150.6" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.02%)</title><rect x="147.9" y="1267.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="150.9" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.02%)</title><rect x="147.9" y="1251.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.9" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (7 samples, 0.15%)</title><rect x="148.1" y="1299.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="151.1" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (7 samples, 0.15%)</title><rect x="148.1" y="1283.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="151.1" y="1294.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="148.4" y="1267.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="151.4" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.&lt;init&gt; (1 samples, 0.02%)</title><rect x="148.6" y="1267.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="151.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.&lt;init&gt; (1 samples, 0.02%)</title><rect x="148.6" y="1251.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="151.6" y="1262.0"></text>
</g>
<g>
<title>java/util/function/Function$$Lambda$33/510854293.apply (2 samples, 0.04%)</title><rect x="148.9" y="1267.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="151.9" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (2 samples, 0.04%)</title><rect x="149.4" y="1267.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="152.4" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (2 samples, 0.04%)</title><rect x="149.4" y="1251.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.4" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="149.6" y="1235.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="152.6" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="149.6" y="1219.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="152.6" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="149.6" y="1203.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="152.6" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="149.6" y="1187.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="152.6" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="149.6" y="1171.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="152.6" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="149.6" y="1155.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="152.6" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getConnectionFor (9 samples, 0.19%)</title><rect x="149.9" y="1299.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="152.9" y="1310.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.02%)</title><rect x="150.1" y="1283.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.1" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.02%)</title><rect x="150.1" y="1267.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.1" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.02%)</title><rect x="150.1" y="1251.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="153.1" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassInModuleOrNull (1 samples, 0.02%)</title><rect x="150.1" y="1235.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="153.1" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.02%)</title><rect x="150.1" y="1219.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="153.1" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/module/SystemModuleFinders$SystemModuleReader.read (1 samples, 0.02%)</title><rect x="150.1" y="1203.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="153.1" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/jimage/ImageReader.getResourceBuffer (1 samples, 0.02%)</title><rect x="150.1" y="1187.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="153.1" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/jimage/BasicImageReader.getResourceBuffer (1 samples, 0.02%)</title><rect x="150.1" y="1171.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.1" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/jimage/decompressor/Decompressor.decompressResource (1 samples, 0.02%)</title><rect x="150.1" y="1155.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="153.1" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/jimage/decompressor/ZipDecompressor.decompress (1 samples, 0.02%)</title><rect x="150.1" y="1139.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="153.1" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/jimage/decompressor/ZipDecompressor.decompress (1 samples, 0.02%)</title><rect x="150.1" y="1123.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="153.1" y="1134.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflate (1 samples, 0.02%)</title><rect x="150.1" y="1107.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="153.1" y="1118.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflate (1 samples, 0.02%)</title><rect x="150.1" y="1091.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="153.1" y="1102.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflateBytesBytes (1 samples, 0.02%)</title><rect x="150.1" y="1075.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.1" y="1086.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.02%)</title><rect x="150.1" y="1059.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="153.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.04%)</title><rect x="150.4" y="1283.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="153.4" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.02%)</title><rect x="150.4" y="1267.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="153.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.02%)</title><rect x="150.6" y="1267.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="153.6" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2Connection.keyFor (4 samples, 0.09%)</title><rect x="150.9" y="1283.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.9" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.04%)</title><rect x="150.9" y="1267.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.9" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.02%)</title><rect x="151.1" y="1251.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="154.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.02%)</title><rect x="151.1" y="1235.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="154.1" y="1246.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.02%)</title><rect x="151.1" y="1219.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="154.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.02%)</title><rect x="151.1" y="1203.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="154.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.02%)</title><rect x="151.1" y="1187.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="154.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.02%)</title><rect x="151.1" y="1171.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="154.1" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2Connection.keyString (2 samples, 0.04%)</title><rect x="151.4" y="1267.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="154.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1188682934.linkToTargetMethod (2 samples, 0.04%)</title><rect x="151.4" y="1251.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="154.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/189601446.invoke (2 samples, 0.04%)</title><rect x="151.4" y="1235.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="154.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="151.4" y="1219.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (1 samples, 0.02%)</title><rect x="151.4" y="1203.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="154.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (1 samples, 0.02%)</title><rect x="151.4" y="1187.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="154.4" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1561732919.invoke (1 samples, 0.02%)</title><rect x="151.6" y="1219.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="154.6" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (1 samples, 0.02%)</title><rect x="151.9" y="1283.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="154.9" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.02%)</title><rect x="151.9" y="1267.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="154.9" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.02%)</title><rect x="151.9" y="1251.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="154.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="151.9" y="1235.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="154.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="151.9" y="1219.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="154.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.02%)</title><rect x="151.9" y="1203.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="154.9" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.getExchange (1 samples, 0.02%)</title><rect x="152.1" y="1379.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="155.1" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.requestFilters (12 samples, 0.26%)</title><rect x="152.4" y="1379.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="155.4" y="1390.0"></text>
</g>
<g>
<title>java/util/AbstractSequentialList.iterator (4 samples, 0.09%)</title><rect x="152.4" y="1363.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="155.4" y="1374.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (4 samples, 0.09%)</title><rect x="152.4" y="1347.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.4" y="1358.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (4 samples, 0.09%)</title><rect x="152.4" y="1331.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="155.4" y="1342.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.&lt;init&gt; (1 samples, 0.02%)</title><rect x="152.4" y="1315.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="155.4" y="1326.0"></text>
</g>
<g>
<title>java/util/LinkedList.checkPositionIndex (2 samples, 0.04%)</title><rect x="152.6" y="1315.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="155.6" y="1326.0"></text>
</g>
<g>
<title>java/util/LinkedList.isPositionIndex (1 samples, 0.02%)</title><rect x="152.6" y="1299.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="155.6" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getConnectionFor (1 samples, 0.02%)</title><rect x="152.9" y="1299.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="155.9" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.02%)</title><rect x="153.2" y="1315.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="156.2" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.request (5 samples, 0.11%)</title><rect x="153.4" y="1363.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="156.4" y="1374.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="153.4" y="1347.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="156.4" y="1358.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_static_call_C(JavaThread*) (1 samples, 0.02%)</title><rect x="153.7" y="1347.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="156.7" y="1358.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.02%)</title><rect x="153.7" y="1331.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="156.7" y="1342.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.02%)</title><rect x="153.7" y="1315.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="156.7" y="1326.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.02%)</title><rect x="153.7" y="1299.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="156.7" y="1310.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Bytecodes::Code, Thread*) (1 samples, 0.02%)</title><rect x="153.7" y="1283.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="156.7" y="1294.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.02%)</title><rect x="153.7" y="1267.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="156.7" y="1278.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="153.7" y="1251.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="156.7" y="1262.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.02%)</title><rect x="153.7" y="1235.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="156.7" y="1246.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(Klass*, Klass*, Klass*, methodHandle const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="153.7" y="1219.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="156.7" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter$Cache.get (2 samples, 0.04%)</title><rect x="153.9" y="1347.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="156.9" y="1358.0"></text>
</g>
<g>
<title>java/util/AbstractSequentialList.iterator (2 samples, 0.04%)</title><rect x="153.9" y="1331.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="156.9" y="1342.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (1 samples, 0.02%)</title><rect x="154.2" y="1315.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.2" y="1326.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (1 samples, 0.02%)</title><rect x="154.2" y="1299.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.2" y="1310.0"></text>
</g>
<g>
<title>java/util/LinkedList.checkPositionIndex (1 samples, 0.02%)</title><rect x="154.2" y="1283.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="157.2" y="1294.0"></text>
</g>
<g>
<title>java/util/LinkedList.isPositionIndex (1 samples, 0.02%)</title><rect x="154.2" y="1267.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="157.2" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.getProxyURI (1 samples, 0.02%)</title><rect x="154.4" y="1347.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="157.4" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/RedirectFilter.request (2 samples, 0.04%)</title><rect x="154.7" y="1363.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="157.7" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Log.logTrace (1 samples, 0.02%)</title><rect x="155.2" y="1363.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="158.2" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (6 samples, 0.13%)</title><rect x="155.4" y="1475.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="158.4" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.11%)</title><rect x="155.7" y="1459.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="158.7" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (4 samples, 0.09%)</title><rect x="155.9" y="1443.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="158.9" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="156.4" y="1427.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="159.4" y="1438.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title><rect x="156.4" y="1411.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="159.4" y="1422.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="156.4" y="1395.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="159.4" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.06%)</title><rect x="156.9" y="1475.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="159.9" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.02%)</title><rect x="157.4" y="1459.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="160.4" y="1470.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="157.4" y="1443.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="160.4" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (610 samples, 13.03%)</title><rect x="157.7" y="1475.0" width="153.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.7" y="1486.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (21 samples, 0.45%)</title><rect x="157.7" y="1459.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="160.7" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (18 samples, 0.38%)</title><rect x="157.7" y="1443.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.7" y="1454.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.02%)</title><rect x="157.7" y="1427.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="160.7" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.02%)</title><rect x="157.9" y="1427.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="160.9" y="1438.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.02%)</title><rect x="157.9" y="1411.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="160.9" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.04%)</title><rect x="158.2" y="1427.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="161.2" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="158.4" y="1411.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="161.4" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="158.4" y="1395.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="161.4" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (1 samples, 0.02%)</title><rect x="158.4" y="1379.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.4" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.02%)</title><rect x="158.7" y="1427.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="161.7" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 0.28%)</title><rect x="158.9" y="1427.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.9" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (13 samples, 0.28%)</title><rect x="158.9" y="1411.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="161.9" y="1422.0"></text>
</g>
<g>
<title>Unsafe_Park (5 samples, 0.11%)</title><rect x="158.9" y="1395.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="161.9" y="1406.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.04%)</title><rect x="158.9" y="1379.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="161.9" y="1390.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="158.9" y="1363.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="161.9" y="1374.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="158.9" y="1347.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="161.9" y="1358.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="158.9" y="1331.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="161.9" y="1342.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="158.9" y="1315.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="161.9" y="1326.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="158.9" y="1299.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="161.9" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="159.2" y="1283.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="162.2" y="1294.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.02%)</title><rect x="159.5" y="1379.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="162.5" y="1390.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="159.7" y="1379.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="162.7" y="1390.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="160.0" y="1379.0" width="0.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="163.0" y="1390.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="160.2" y="1395.0" width="2.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="163.2" y="1406.0"></text>
</g>
<g>
<title>__pthread_cond_wait (8 samples, 0.17%)</title><rect x="160.2" y="1379.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="163.2" y="1390.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="160.7" y="1363.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="163.7" y="1374.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="160.7" y="1347.0" width="1.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="163.7" y="1358.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="161.5" y="1331.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="164.5" y="1342.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="161.5" y="1315.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="164.5" y="1326.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="161.5" y="1299.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="164.5" y="1310.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="161.5" y="1283.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="164.5" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="162.0" y="1267.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="165.0" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="162.0" y="1251.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="165.0" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="162.0" y="1235.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="165.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.06%)</title><rect x="162.2" y="1443.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="165.2" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.06%)</title><rect x="162.2" y="1427.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="165.2" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.06%)</title><rect x="162.2" y="1411.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="165.2" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.06%)</title><rect x="162.2" y="1395.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.2" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.06%)</title><rect x="162.2" y="1379.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.2" y="1390.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (3 samples, 0.06%)</title><rect x="162.2" y="1363.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="165.2" y="1374.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="162.2" y="1347.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="165.2" y="1358.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="162.2" y="1331.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="165.2" y="1342.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="162.2" y="1315.0" width="0.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="165.2" y="1326.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="162.2" y="1299.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="165.2" y="1310.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="162.2" y="1283.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="165.2" y="1294.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="162.2" y="1267.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="165.2" y="1278.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="162.2" y="1251.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="165.2" y="1262.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="162.2" y="1235.0" width="0.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="165.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (1 samples, 0.02%)</title><rect x="163.0" y="1459.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.0" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.poll (222 samples, 4.74%)</title><rect x="163.2" y="1459.0" width="56.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="166.2" y="1470.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (221 samples, 4.72%)</title><rect x="163.2" y="1443.0" width="55.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="166.2" y="1454.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.awaitFulfill (213 samples, 4.55%)</title><rect x="164.7" y="1427.0" width="53.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="167.7" y="1438.0">java/..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="168.3" y="1411.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="171.3" y="1422.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="168.3" y="1395.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="171.3" y="1406.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.11%)</title><rect x="168.5" y="1411.0" width="1.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="171.5" y="1422.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.06%)</title><rect x="169.8" y="1411.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="172.8" y="1422.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.02%)</title><rect x="170.3" y="1395.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="173.3" y="1406.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.02%)</title><rect x="170.3" y="1379.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="173.3" y="1390.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.02%)</title><rect x="170.3" y="1363.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="173.3" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.shouldSpin (65 samples, 1.39%)</title><rect x="170.5" y="1411.0" width="16.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="173.5" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="186.7" y="1395.0" width="0.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="189.7" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="186.7" y="1379.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="189.7" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="186.7" y="1363.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="189.7" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="186.7" y="1347.0" width="0.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="189.7" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="186.7" y="1331.0" width="0.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="189.7" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="186.7" y="1315.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="189.7" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="186.7" y="1299.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="189.7" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.parkNanos (124 samples, 2.65%)</title><rect x="186.9" y="1411.0" width="31.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="189.9" y="1422.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (124 samples, 2.65%)</title><rect x="186.9" y="1395.0" width="31.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.9" y="1406.0">jd..</text>
</g>
<g>
<title>Unsafe_Park (42 samples, 0.90%)</title><rect x="186.9" y="1379.0" width="10.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="189.9" y="1390.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="187.4" y="1363.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="190.4" y="1374.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (11 samples, 0.23%)</title><rect x="187.7" y="1363.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="190.7" y="1374.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="189.2" y="1347.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="192.2" y="1358.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.04%)</title><rect x="189.4" y="1347.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="192.4" y="1358.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="189.7" y="1331.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="192.7" y="1342.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="189.9" y="1347.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="192.9" y="1358.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.02%)</title><rect x="190.2" y="1347.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="193.2" y="1358.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (3 samples, 0.06%)</title><rect x="190.5" y="1363.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="193.5" y="1374.0"></text>
</g>
<g>
<title>__lll_unlock_wake (18 samples, 0.38%)</title><rect x="191.2" y="1363.0" width="4.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="194.2" y="1374.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.28%)</title><rect x="192.5" y="1347.0" width="3.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="195.5" y="1358.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.28%)</title><rect x="192.5" y="1331.0" width="3.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="195.5" y="1342.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="194.0" y="1315.0" width="1.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="197.0" y="1326.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="194.5" y="1299.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="197.5" y="1310.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="194.7" y="1283.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="197.7" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="195.5" y="1267.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="198.5" y="1278.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.02%)</title><rect x="195.7" y="1363.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="198.7" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.04%)</title><rect x="196.0" y="1363.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="199.0" y="1374.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.04%)</title><rect x="196.5" y="1363.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="199.5" y="1374.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.04%)</title><rect x="197.0" y="1363.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="200.0" y="1374.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="197.5" y="1379.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="200.5" y="1390.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="197.5" y="1363.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="200.5" y="1374.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="197.8" y="1363.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="200.8" y="1374.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (1 samples, 0.02%)</title><rect x="198.0" y="1379.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="201.0" y="1390.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (77 samples, 1.64%)</title><rect x="198.3" y="1379.0" width="19.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="201.3" y="1390.0"></text>
</g>
<g>
<title>[unknown] (56 samples, 1.20%)</title><rect x="203.6" y="1363.0" width="14.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="206.6" y="1374.0"></text>
</g>
<g>
<title>[unknown] (56 samples, 1.20%)</title><rect x="203.6" y="1347.0" width="14.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="206.6" y="1358.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.03%)</title><rect x="205.6" y="1331.0" width="12.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="208.6" y="1342.0"></text>
</g>
<g>
<title>[unknown] (46 samples, 0.98%)</title><rect x="206.1" y="1315.0" width="11.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="209.1" y="1326.0"></text>
</g>
<g>
<title>[unknown] (42 samples, 0.90%)</title><rect x="207.1" y="1299.0" width="10.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="210.1" y="1310.0"></text>
</g>
<g>
<title>[unknown] (40 samples, 0.85%)</title><rect x="207.6" y="1283.0" width="10.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="210.6" y="1294.0"></text>
</g>
<g>
<title>[unknown] (35 samples, 0.75%)</title><rect x="208.9" y="1267.0" width="8.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="211.9" y="1278.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.64%)</title><rect x="210.1" y="1251.0" width="7.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="213.1" y="1262.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="216.4" y="1235.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="219.4" y="1246.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="216.7" y="1219.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="219.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="216.7" y="1203.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="219.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="216.7" y="1187.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="219.7" y="1198.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="216.7" y="1171.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="219.7" y="1182.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="216.7" y="1155.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="219.7" y="1166.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="216.9" y="1139.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="219.9" y="1150.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="217.2" y="1123.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="220.2" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="217.4" y="1107.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="220.4" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="217.4" y="1091.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="220.4" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="217.4" y="1075.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="220.4" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="217.4" y="1059.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="220.4" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.02%)</title><rect x="217.7" y="1379.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="220.7" y="1390.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="217.9" y="1379.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="220.9" y="1390.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="217.9" y="1363.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="220.9" y="1374.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="218.2" y="1411.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="221.2" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.snode (2 samples, 0.04%)</title><rect x="218.4" y="1427.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.4" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack$SNode.&lt;init&gt; (2 samples, 0.04%)</title><rect x="218.4" y="1411.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.4" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/TimeUnit.toNanos (1 samples, 0.02%)</title><rect x="218.9" y="1443.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.9" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.take (365 samples, 7.80%)</title><rect x="219.2" y="1459.0" width="92.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.2" y="1470.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (363 samples, 7.75%)</title><rect x="219.7" y="1443.0" width="91.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.7" y="1454.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.awaitFulfill (362 samples, 7.73%)</title><rect x="219.9" y="1427.0" width="91.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="222.9" y="1438.0">java/util/c..</text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (6 samples, 0.13%)</title><rect x="222.5" y="1411.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="225.5" y="1422.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.06%)</title><rect x="223.2" y="1395.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.2" y="1406.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.04%)</title><rect x="223.5" y="1379.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="226.5" y="1390.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="223.7" y="1363.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="226.7" y="1374.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.02%)</title><rect x="223.7" y="1347.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="226.7" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.shouldSpin (299 samples, 6.39%)</title><rect x="224.0" y="1411.0" width="75.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.0" y="1422.0">java/uti..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="299.1" y="1395.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="302.1" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="299.1" y="1379.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="302.1" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="299.1" y="1363.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="302.1" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (47 samples, 1.00%)</title><rect x="299.3" y="1411.0" width="11.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.3" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (1 samples, 0.02%)</title><rect x="299.3" y="1395.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="302.3" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (46 samples, 0.98%)</title><rect x="299.6" y="1395.0" width="11.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.6" y="1406.0"></text>
</g>
<g>
<title>Unsafe_Park (21 samples, 0.45%)</title><rect x="299.6" y="1379.0" width="5.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="302.6" y="1390.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title><rect x="299.8" y="1363.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="302.8" y="1374.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.15%)</title><rect x="300.1" y="1363.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="303.1" y="1374.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="301.1" y="1347.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="304.1" y="1358.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="301.1" y="1331.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="304.1" y="1342.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.04%)</title><rect x="301.3" y="1347.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="304.3" y="1358.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.04%)</title><rect x="301.8" y="1363.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="304.8" y="1374.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.11%)</title><rect x="302.4" y="1363.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="305.4" y="1374.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="302.9" y="1347.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="305.9" y="1358.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="302.9" y="1331.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="305.9" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="303.4" y="1315.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="306.4" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="303.4" y="1299.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="306.4" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="303.4" y="1283.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="306.4" y="1294.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.02%)</title><rect x="303.6" y="1363.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="306.6" y="1374.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="303.9" y="1363.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="306.9" y="1374.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.04%)</title><rect x="304.1" y="1363.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="307.1" y="1374.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="304.6" y="1363.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="307.6" y="1374.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.47%)</title><rect x="304.9" y="1379.0" width="5.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="307.9" y="1390.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (1 samples, 0.02%)</title><rect x="304.9" y="1363.0" width="0.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="307.9" y="1374.0"></text>
</g>
<g>
<title>__pthread_cond_wait (20 samples, 0.43%)</title><rect x="305.1" y="1363.0" width="5.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="308.1" y="1374.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.21%)</title><rect x="307.6" y="1347.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="310.6" y="1358.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.21%)</title><rect x="307.6" y="1331.0" width="2.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="310.6" y="1342.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="307.9" y="1315.0" width="2.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="310.9" y="1326.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="308.2" y="1299.0" width="2.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="311.2" y="1310.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="308.2" y="1283.0" width="2.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="311.2" y="1294.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="309.4" y="1267.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="312.4" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="309.9" y="1251.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="312.9" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="309.9" y="1235.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="312.9" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="309.9" y="1219.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="312.9" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="309.9" y="1203.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="312.9" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="309.9" y="1187.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="312.9" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="309.9" y="1171.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="312.9" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="309.9" y="1155.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="312.9" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="309.9" y="1139.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="312.9" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="309.9" y="1123.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="312.9" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="309.9" y="1107.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="312.9" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="310.2" y="1363.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="313.2" y="1374.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.02%)</title><rect x="310.4" y="1379.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="313.4" y="1390.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.04%)</title><rect x="310.7" y="1379.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="313.7" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="310.9" y="1363.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="313.9" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="310.9" y="1347.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="313.9" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="310.9" y="1331.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="313.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.02%)</title><rect x="311.2" y="1459.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="314.2" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.02%)</title><rect x="311.4" y="1475.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.4" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.02%)</title><rect x="311.7" y="1475.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.7" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$303/1457596202.run (272 samples, 5.81%)</title><rect x="311.9" y="1475.0" width="68.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="314.9" y="1486.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (272 samples, 5.81%)</title><rect x="311.9" y="1459.0" width="68.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="314.9" y="1470.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (272 samples, 5.81%)</title><rect x="311.9" y="1443.0" width="68.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="314.9" y="1454.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$Http1WriteSubscription.request (272 samples, 5.81%)</title><rect x="311.9" y="1427.0" width="68.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.9" y="1438.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (271 samples, 5.79%)</title><rect x="312.2" y="1411.0" width="68.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="315.2" y="1422.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (271 samples, 5.79%)</title><rect x="312.2" y="1395.0" width="68.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="315.2" y="1406.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (271 samples, 5.79%)</title><rect x="312.2" y="1379.0" width="68.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="315.2" y="1390.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (271 samples, 5.79%)</title><rect x="312.2" y="1363.0" width="68.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="315.2" y="1374.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (271 samples, 5.79%)</title><rect x="312.2" y="1347.0" width="68.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="315.2" y="1358.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (271 samples, 5.79%)</title><rect x="312.2" y="1331.0" width="68.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="315.2" y="1342.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (271 samples, 5.79%)</title><rect x="312.2" y="1315.0" width="68.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.2" y="1326.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getOutgoing (61 samples, 1.30%)</title><rect x="312.7" y="1299.0" width="15.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="315.7" y="1310.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.02%)</title><rect x="313.2" y="1283.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="316.2" y="1294.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.02%)</title><rect x="313.2" y="1267.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="316.2" y="1278.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.02%)</title><rect x="313.2" y="1251.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="316.2" y="1262.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.02%)</title><rect x="313.2" y="1235.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="316.2" y="1246.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Bytecodes::Code, Thread*) (1 samples, 0.02%)</title><rect x="313.2" y="1219.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="316.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="313.4" y="1283.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="316.4" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="313.4" y="1267.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="316.4" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$313/1568044126.get$Lambda (1 samples, 0.02%)</title><rect x="313.4" y="1251.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="316.4" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$313/1568044126.&lt;init&gt; (1 samples, 0.02%)</title><rect x="313.4" y="1235.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (48 samples, 1.03%)</title><rect x="313.7" y="1283.0" width="12.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.7" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (48 samples, 1.03%)</title><rect x="313.7" y="1267.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="316.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (48 samples, 1.03%)</title><rect x="313.7" y="1251.0" width="12.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="316.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (2 samples, 0.04%)</title><rect x="313.7" y="1235.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="316.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (1 samples, 0.02%)</title><rect x="314.2" y="1235.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.tryFire (1 samples, 0.02%)</title><rect x="314.5" y="1235.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="317.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (2 samples, 0.04%)</title><rect x="314.7" y="1235.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="317.7" y="1246.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="314.7" y="1219.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="317.7" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="315.0" y="1219.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="318.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="315.0" y="1203.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="318.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (39 samples, 0.83%)</title><rect x="315.2" y="1235.0" width="9.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="318.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (5 samples, 0.11%)</title><rect x="315.2" y="1219.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="318.2" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$308/1021512958.apply (3 samples, 0.06%)</title><rect x="315.2" y="1203.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="318.2" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$sendRequestBody$6 (3 samples, 0.06%)</title><rect x="315.2" y="1187.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.2" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getResponseAsync (3 samples, 0.06%)</title><rect x="315.2" y="1171.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.2" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readHeadersAsync (2 samples, 0.04%)</title><rect x="315.5" y="1155.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="318.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="315.5" y="1139.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="318.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="315.5" y="1123.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="318.5" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$314/1397481348.get$Lambda (1 samples, 0.02%)</title><rect x="315.5" y="1107.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.5" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$314/1397481348.&lt;init&gt; (1 samples, 0.02%)</title><rect x="315.5" y="1091.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApplyAsync (1 samples, 0.02%)</title><rect x="315.7" y="1139.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="318.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (1 samples, 0.02%)</title><rect x="315.7" y="1123.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="318.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyNow (1 samples, 0.02%)</title><rect x="315.7" y="1107.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="318.7" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$236/1436763450.apply (1 samples, 0.02%)</title><rect x="315.7" y="1091.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="318.7" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.lambda$createExchangeImpl$1 (1 samples, 0.02%)</title><rect x="315.7" y="1075.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="318.7" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.h2Upgrade (1 samples, 0.02%)</title><rect x="315.7" y="1059.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="318.7" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.setH2Upgrade (1 samples, 0.02%)</title><rect x="315.7" y="1043.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="318.7" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.setHeader (1 samples, 0.02%)</title><rect x="315.7" y="1027.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="318.7" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="315.7" y="1011.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="318.7" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="315.7" y="995.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.7" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="315.7" y="979.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.7" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="315.7" y="963.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="318.7" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$158/1622813550.apply (2 samples, 0.04%)</title><rect x="316.0" y="1203.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="319.0" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$4 (2 samples, 0.04%)</title><rect x="316.0" y="1187.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.0" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.readBodyAsync (2 samples, 0.04%)</title><rect x="316.0" y="1171.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="319.0" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.readBodyAsync (2 samples, 0.04%)</title><rect x="316.0" y="1155.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="319.0" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readBody (2 samples, 0.04%)</title><rect x="316.0" y="1139.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.0" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (2 samples, 0.04%)</title><rect x="316.0" y="1123.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.0" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$323/1833703036.run (2 samples, 0.04%)</title><rect x="316.0" y="1107.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="319.0" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$3 (2 samples, 0.04%)</title><rect x="316.0" y="1091.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.0" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.addTrailingOperation (2 samples, 0.04%)</title><rect x="316.0" y="1075.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.0" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.add (2 samples, 0.04%)</title><rect x="316.0" y="1059.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="319.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.04%)</title><rect x="316.0" y="1043.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.04%)</title><rect x="316.0" y="1027.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.04%)</title><rect x="316.0" y="1011.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="319.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.04%)</title><rect x="316.0" y="995.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeThrowable (2 samples, 0.04%)</title><rect x="316.0" y="979.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="319.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.encodeThrowable (2 samples, 0.04%)</title><rect x="316.0" y="963.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="319.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletionException.&lt;init&gt; (2 samples, 0.04%)</title><rect x="316.0" y="947.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.0" y="958.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (2 samples, 0.04%)</title><rect x="316.0" y="931.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.0" y="942.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (2 samples, 0.04%)</title><rect x="316.0" y="915.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="319.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (2 samples, 0.04%)</title><rect x="316.0" y="899.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.0" y="910.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (2 samples, 0.04%)</title><rect x="316.0" y="883.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="319.0" y="894.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (2 samples, 0.04%)</title><rect x="316.0" y="867.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="319.0" y="878.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (2 samples, 0.04%)</title><rect x="316.0" y="851.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="319.0" y="862.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (2 samples, 0.04%)</title><rect x="316.0" y="835.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="319.0" y="846.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (2 samples, 0.04%)</title><rect x="316.0" y="819.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="319.0" y="830.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (2 samples, 0.04%)</title><rect x="316.0" y="803.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="319.0" y="814.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (1 samples, 0.02%)</title><rect x="316.2" y="787.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="319.2" y="798.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (1 samples, 0.02%)</title><rect x="316.2" y="771.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="319.2" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="316.2" y="755.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="319.2" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="316.2" y="739.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="319.2" y="750.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="316.2" y="723.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="319.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (33 samples, 0.70%)</title><rect x="316.5" y="1219.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (32 samples, 0.68%)</title><rect x="316.7" y="1203.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="319.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.02%)</title><rect x="316.7" y="1187.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="319.7" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1 samples, 0.02%)</title><rect x="316.7" y="1171.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="319.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (1 samples, 0.02%)</title><rect x="316.7" y="1155.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="319.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (1 samples, 0.02%)</title><rect x="316.7" y="1139.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.02%)</title><rect x="316.7" y="1123.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.02%)</title><rect x="316.7" y="1107.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="319.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="316.7" y="1091.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="319.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="316.7" y="1075.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="319.7" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$286/689008889.apply (1 samples, 0.02%)</title><rect x="316.7" y="1059.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.7" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$286/689008889.apply (31 samples, 0.66%)</title><rect x="317.0" y="1187.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="320.0" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$7 (31 samples, 0.66%)</title><rect x="317.0" y="1171.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="320.0" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (31 samples, 0.66%)</title><rect x="317.0" y="1155.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="320.0" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$172/544090600.apply (25 samples, 0.53%)</title><rect x="317.0" y="1139.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="320.0" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.sendRequestBody (25 samples, 0.53%)</title><rect x="317.0" y="1123.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="320.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (1 samples, 0.02%)</title><rect x="317.0" y="1107.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="320.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (1 samples, 0.02%)</title><rect x="317.0" y="1091.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="320.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.02%)</title><rect x="317.0" y="1075.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="320.0" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.wrapForUpgrade (1 samples, 0.02%)</title><rect x="317.2" y="1107.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="320.2" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendBodyAsync (23 samples, 0.49%)</title><rect x="317.5" y="1107.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="320.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.02%)</title><rect x="317.7" y="1091.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="320.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.02%)</title><rect x="317.7" y="1075.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="320.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (1 samples, 0.02%)</title><rect x="317.7" y="1059.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="320.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/BootstrapMethodInvoker.invoke (1 samples, 0.02%)</title><rect x="317.7" y="1043.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="320.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invokeExact_MT (1 samples, 0.02%)</title><rect x="317.7" y="1027.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="320.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1411656898.invokeStatic (1 samples, 0.02%)</title><rect x="317.7" y="1011.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="320.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaMetafactory.metafactory (1 samples, 0.02%)</title><rect x="317.7" y="995.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="320.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.02%)</title><rect x="317.7" y="979.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.7" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.02%)</title><rect x="317.7" y="963.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="320.7" y="974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.defineAnonymousClass (1 samples, 0.02%)</title><rect x="317.7" y="947.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="320.7" y="958.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.defineAnonymousClass0 (1 samples, 0.02%)</title><rect x="317.7" y="931.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="320.7" y="942.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0 (1 samples, 0.02%)</title><rect x="317.7" y="915.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="320.7" y="926.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.02%)</title><rect x="317.7" y="899.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="320.7" y="910.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.02%)</title><rect x="317.7" y="883.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="320.7" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.02%)</title><rect x="317.7" y="867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="320.7" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.02%)</title><rect x="317.7" y="851.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="320.7" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.02%)</title><rect x="317.7" y="835.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="320.7" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.02%)</title><rect x="317.7" y="819.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="320.7" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.02%)</title><rect x="317.7" y="803.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="320.7" y="814.0"></text>
</g>
<g>
<title>Symbol::as_C_string_flexible_buffer(Thread*, char*, int) const (1 samples, 0.02%)</title><rect x="317.7" y="787.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="320.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenAccept (12 samples, 0.26%)</title><rect x="318.0" y="1091.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="321.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniAcceptStage (11 samples, 0.23%)</title><rect x="318.2" y="1075.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="321.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniAcceptNow (11 samples, 0.23%)</title><rect x="318.2" y="1059.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="321.2" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$305/1944453069.accept (2 samples, 0.04%)</title><rect x="318.5" y="1043.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="321.5" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.lambda$sendBodyAsync$7 (2 samples, 0.04%)</title><rect x="318.5" y="1027.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="321.5" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.cancelIfFailed (2 samples, 0.04%)</title><rect x="318.5" y="1011.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="321.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="318.5" y="995.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="321.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="318.5" y="979.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="321.5" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$306/1143115771.get$Lambda (1 samples, 0.02%)</title><rect x="318.5" y="963.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.5" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$306/1143115771.&lt;init&gt; (1 samples, 0.02%)</title><rect x="318.5" y="947.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="321.5" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (1 samples, 0.02%)</title><rect x="318.5" y="931.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenCompleteAsync (1 samples, 0.02%)</title><rect x="318.7" y="995.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="321.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.02%)</title><rect x="318.7" y="979.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="321.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.02%)</title><rect x="318.7" y="963.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="321.7" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$307/840568830.accept (5 samples, 0.11%)</title><rect x="319.0" y="1043.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="322.0" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.lambda$sendBodyAsync$8 (5 samples, 0.11%)</title><rect x="319.0" y="1027.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.0" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.requestMoreBody (5 samples, 0.11%)</title><rect x="319.0" y="1011.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="322.0" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1BodySubscriber.request (5 samples, 0.11%)</title><rect x="319.0" y="995.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="322.0" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PullPublisher$Subscription.request (5 samples, 0.11%)</title><rect x="319.0" y="979.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="322.0" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.increase (1 samples, 0.02%)</title><rect x="319.0" y="963.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="322.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.getAndAccumulate (1 samples, 0.02%)</title><rect x="319.0" y="947.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="322.0" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (4 samples, 0.09%)</title><rect x="319.2" y="963.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="322.2" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (4 samples, 0.09%)</title><rect x="319.2" y="947.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="322.2" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (4 samples, 0.09%)</title><rect x="319.2" y="931.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="322.2" y="942.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (4 samples, 0.09%)</title><rect x="319.2" y="915.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="322.2" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PullPublisher$Subscription$PullTask.run (4 samples, 0.09%)</title><rect x="319.2" y="899.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="322.2" y="910.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onComplete (1 samples, 0.02%)</title><rect x="319.5" y="883.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="322.5" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (2 samples, 0.04%)</title><rect x="319.7" y="883.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="322.7" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (2 samples, 0.04%)</title><rect x="319.7" y="867.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="322.7" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (3 samples, 0.06%)</title><rect x="320.2" y="1043.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="323.2" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (3 samples, 0.06%)</title><rect x="320.2" y="1027.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.2" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.continueRequest (9 samples, 0.19%)</title><rect x="321.0" y="1091.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="324.0" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/RequestPublishers$ByteArrayPublisher.subscribe (8 samples, 0.17%)</title><rect x="321.3" y="1075.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.3" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PullPublisher.subscribe (2 samples, 0.04%)</title><rect x="321.5" y="1059.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="324.5" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.02%)</title><rect x="321.8" y="1043.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.8" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/RequestPublishers$ByteArrayPublisher.copy (5 samples, 0.11%)</title><rect x="322.0" y="1059.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="325.0" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.04%)</title><rect x="322.5" y="1043.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="322.5" y="1027.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="325.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="322.5" y="1011.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="322.5" y="995.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="322.5" y="979.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.5" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="322.8" y="995.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="325.8" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.02%)</title><rect x="323.0" y="1043.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="326.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/System.arraycopy (1 samples, 0.02%)</title><rect x="323.0" y="1027.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="326.0" y="1038.0"></text>
</g>
<g>
<title>JVM_ArrayCopy (1 samples, 0.02%)</title><rect x="323.0" y="1011.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="326.0" y="1022.0"></text>
</g>
<g>
<title>Copy::conjoint_memory_atomic(void const*, void*, unsigned long) (1 samples, 0.02%)</title><rect x="323.0" y="995.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="326.0" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$173/1773270012.apply (6 samples, 0.13%)</title><rect x="323.3" y="1139.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.3" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$8 (6 samples, 0.13%)</title><rect x="323.3" y="1123.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="326.3" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendHeadersAsync (6 samples, 0.13%)</title><rect x="323.3" y="1107.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.3" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.&lt;init&gt; (6 samples, 0.13%)</title><rect x="323.3" y="1091.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="323.8" y="1075.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="326.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="323.8" y="1059.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="326.8" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.&lt;init&gt; (2 samples, 0.04%)</title><rect x="324.0" y="1075.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="327.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="324.0" y="1059.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="327.0" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="324.0" y="1043.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="327.0" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="324.0" y="1027.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="327.0" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="324.3" y="1059.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="327.3" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.start (1 samples, 0.02%)</title><rect x="324.5" y="1075.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.5" y="1086.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="324.8" y="1219.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="327.8" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$313/1568044126.get (3 samples, 0.06%)</title><rect x="325.0" y="1235.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="328.0" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.lambda$getOutgoing$14 (3 samples, 0.06%)</title><rect x="325.0" y="1219.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="328.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.pollFirst (6 samples, 0.13%)</title><rect x="325.8" y="1283.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="326.0" y="1267.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="329.0" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.02%)</title><rect x="326.0" y="1251.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="329.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.unlink (4 samples, 0.09%)</title><rect x="326.3" y="1267.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="329.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.updateTail (2 samples, 0.04%)</title><rect x="326.8" y="1251.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="329.8" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (3 samples, 0.06%)</title><rect x="327.3" y="1283.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.3" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$312/1117598094.run (3 samples, 0.06%)</title><rect x="327.3" y="1267.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.3" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.requestMoreBody (2 samples, 0.04%)</title><rect x="327.6" y="1251.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="330.6" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1BodySubscriber.request (2 samples, 0.04%)</title><rect x="327.6" y="1235.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="330.6" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.hasOutgoing (1 samples, 0.02%)</title><rect x="328.1" y="1299.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.1" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.isEmpty (1 samples, 0.02%)</title><rect x="328.1" y="1283.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.peekFirst (1 samples, 0.02%)</title><rect x="328.1" y="1267.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.1" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (207 samples, 4.42%)</title><rect x="328.3" y="1299.0" width="52.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="331.3" y="1310.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (207 samples, 4.42%)</title><rect x="328.3" y="1283.0" width="52.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="331.3" y="1294.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onNext (207 samples, 4.42%)</title><rect x="328.3" y="1267.0" width="52.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.3" y="1278.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.tryFlushCurrent (206 samples, 4.40%)</title><rect x="328.6" y="1251.0" width="51.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.6" y="1262.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$311/767570311.run (1 samples, 0.02%)</title><rect x="329.1" y="1235.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="332.1" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (1 samples, 0.02%)</title><rect x="329.1" y="1219.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="332.1" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (1 samples, 0.02%)</title><rect x="329.1" y="1203.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.1" y="1214.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.02%)</title><rect x="329.1" y="1187.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="332.1" y="1198.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.02%)</title><rect x="329.1" y="1171.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="332.1" y="1182.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.02%)</title><rect x="329.1" y="1155.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="332.1" y="1166.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.02%)</title><rect x="329.1" y="1139.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="332.1" y="1150.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.02%)</title><rect x="329.1" y="1123.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="332.1" y="1134.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(Bytecodes::Code, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.02%)</title><rect x="329.1" y="1107.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="332.1" y="1118.0"></text>
</g>
<g>
<title>ConstantPool::klass_ref_at(int, Thread*) (1 samples, 0.02%)</title><rect x="329.1" y="1091.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="332.1" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.writeAvailable (199 samples, 4.25%)</title><rect x="329.3" y="1235.0" width="50.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="332.3" y="1246.0">jdk/i..</text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (194 samples, 4.14%)</title><rect x="329.3" y="1219.0" width="48.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="332.3" y="1230.0">java..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (194 samples, 4.14%)</title><rect x="329.3" y="1203.0" width="48.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="332.3" y="1214.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="329.3" y="1187.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="332.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="329.3" y="1171.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="332.3" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (192 samples, 4.10%)</title><rect x="329.6" y="1187.0" width="48.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="332.6" y="1198.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (192 samples, 4.10%)</title><rect x="329.6" y="1171.0" width="48.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="332.6" y="1182.0">sun/..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.11%)</title><rect x="329.6" y="1155.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.6" y="1166.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.11%)</title><rect x="329.6" y="1139.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="332.6" y="1150.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (1 samples, 0.02%)</title><rect x="330.1" y="1123.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="333.1" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.04%)</title><rect x="330.3" y="1123.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="333.3" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/IOVecWrapper.clearRefs (1 samples, 0.02%)</title><rect x="330.8" y="1155.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="333.8" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerLastTemporaryDirectBuffer (1 samples, 0.02%)</title><rect x="330.8" y="1139.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="333.8" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/IOVecWrapper.get (5 samples, 0.11%)</title><rect x="331.1" y="1155.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.1" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/IOVecWrapper.&lt;init&gt; (4 samples, 0.09%)</title><rect x="331.3" y="1139.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="334.3" y="1150.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="331.3" y="1123.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="334.3" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.02%)</title><rect x="332.1" y="1123.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="335.1" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/IOVecWrapper.putBase (1 samples, 0.02%)</title><rect x="332.3" y="1155.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="335.3" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeObject.putLong (1 samples, 0.02%)</title><rect x="332.3" y="1139.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="335.3" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (178 samples, 3.80%)</title><rect x="332.6" y="1155.0" width="44.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="335.6" y="1166.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (177 samples, 3.78%)</title><rect x="332.8" y="1139.0" width="44.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="335.8" y="1150.0">sun/..</text>
</g>
<g>
<title>[unknown] (174 samples, 3.72%)</title><rect x="333.1" y="1123.0" width="43.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="336.1" y="1134.0">[unk..</text>
</g>
<g>
<title>[unknown] (174 samples, 3.72%)</title><rect x="333.1" y="1107.0" width="43.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="336.1" y="1118.0">[unk..</text>
</g>
<g>
<title>__GI___writev (173 samples, 3.70%)</title><rect x="333.1" y="1091.0" width="43.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="336.1" y="1102.0">__GI..</text>
</g>
<g>
<title>[unknown] (167 samples, 3.57%)</title><rect x="334.6" y="1075.0" width="42.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="337.6" y="1086.0">[unk..</text>
</g>
<g>
<title>[unknown] (167 samples, 3.57%)</title><rect x="334.6" y="1059.0" width="42.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="337.6" y="1070.0">[unk..</text>
</g>
<g>
<title>[unknown] (164 samples, 3.50%)</title><rect x="335.4" y="1043.0" width="41.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="338.4" y="1054.0">[un..</text>
</g>
<g>
<title>[unknown] (164 samples, 3.50%)</title><rect x="335.4" y="1027.0" width="41.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="338.4" y="1038.0">[un..</text>
</g>
<g>
<title>[unknown] (163 samples, 3.48%)</title><rect x="335.6" y="1011.0" width="41.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="338.6" y="1022.0">[un..</text>
</g>
<g>
<title>[unknown] (163 samples, 3.48%)</title><rect x="335.6" y="995.0" width="41.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="338.6" y="1006.0">[un..</text>
</g>
<g>
<title>[unknown] (162 samples, 3.46%)</title><rect x="335.9" y="979.0" width="40.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="338.9" y="990.0">[un..</text>
</g>
<g>
<title>[unknown] (159 samples, 3.40%)</title><rect x="336.6" y="963.0" width="40.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="339.6" y="974.0">[un..</text>
</g>
<g>
<title>[unknown] (157 samples, 3.35%)</title><rect x="337.1" y="947.0" width="39.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="340.1" y="958.0">[un..</text>
</g>
<g>
<title>[unknown] (157 samples, 3.35%)</title><rect x="337.1" y="931.0" width="39.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="340.1" y="942.0">[un..</text>
</g>
<g>
<title>[unknown] (157 samples, 3.35%)</title><rect x="337.1" y="915.0" width="39.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="340.1" y="926.0">[un..</text>
</g>
<g>
<title>[unknown] (157 samples, 3.35%)</title><rect x="337.1" y="899.0" width="39.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="340.1" y="910.0">[un..</text>
</g>
<g>
<title>[unknown] (143 samples, 3.05%)</title><rect x="340.7" y="883.0" width="36.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="343.7" y="894.0">[un..</text>
</g>
<g>
<title>[unknown] (142 samples, 3.03%)</title><rect x="340.9" y="867.0" width="35.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="343.9" y="878.0">[un..</text>
</g>
<g>
<title>[unknown] (136 samples, 2.90%)</title><rect x="342.4" y="851.0" width="34.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="345.4" y="862.0">[u..</text>
</g>
<g>
<title>[unknown] (127 samples, 2.71%)</title><rect x="344.7" y="835.0" width="32.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="347.7" y="846.0">[u..</text>
</g>
<g>
<title>[unknown] (120 samples, 2.56%)</title><rect x="346.5" y="819.0" width="30.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="349.5" y="830.0">[u..</text>
</g>
<g>
<title>[unknown] (119 samples, 2.54%)</title><rect x="346.7" y="803.0" width="30.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="349.7" y="814.0">[u..</text>
</g>
<g>
<title>[unknown] (112 samples, 2.39%)</title><rect x="348.5" y="787.0" width="28.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="351.5" y="798.0">[u..</text>
</g>
<g>
<title>[unknown] (107 samples, 2.29%)</title><rect x="349.7" y="771.0" width="27.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="352.7" y="782.0">[..</text>
</g>
<g>
<title>[unknown] (104 samples, 2.22%)</title><rect x="350.5" y="755.0" width="26.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="353.5" y="766.0">[..</text>
</g>
<g>
<title>[unknown] (99 samples, 2.11%)</title><rect x="351.8" y="739.0" width="24.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="354.8" y="750.0">[..</text>
</g>
<g>
<title>[unknown] (88 samples, 1.88%)</title><rect x="354.5" y="723.0" width="22.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="357.5" y="734.0">[..</text>
</g>
<g>
<title>[unknown] (85 samples, 1.82%)</title><rect x="355.3" y="707.0" width="21.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="358.3" y="718.0">[..</text>
</g>
<g>
<title>[unknown] (71 samples, 1.52%)</title><rect x="358.8" y="691.0" width="17.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="361.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (67 samples, 1.43%)</title><rect x="359.8" y="675.0" width="16.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="362.8" y="686.0"></text>
</g>
<g>
<title>[unknown] (60 samples, 1.28%)</title><rect x="361.6" y="659.0" width="15.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="364.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (57 samples, 1.22%)</title><rect x="362.3" y="643.0" width="14.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="365.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.15%)</title><rect x="363.1" y="627.0" width="13.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="366.1" y="638.0"></text>
</g>
<g>
<title>[unknown] (53 samples, 1.13%)</title><rect x="363.3" y="611.0" width="13.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="366.3" y="622.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 1.09%)</title><rect x="363.8" y="595.0" width="12.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="366.8" y="606.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 1.05%)</title><rect x="364.4" y="579.0" width="12.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="367.4" y="590.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.03%)</title><rect x="364.6" y="563.0" width="12.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="367.6" y="574.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.03%)</title><rect x="364.6" y="547.0" width="12.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="367.6" y="558.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.03%)</title><rect x="364.6" y="531.0" width="12.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="367.6" y="542.0"></text>
</g>
<g>
<title>[unknown] (46 samples, 0.98%)</title><rect x="365.1" y="515.0" width="11.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="368.1" y="526.0"></text>
</g>
<g>
<title>[unknown] (42 samples, 0.90%)</title><rect x="366.1" y="499.0" width="10.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="369.1" y="510.0"></text>
</g>
<g>
<title>[unknown] (40 samples, 0.85%)</title><rect x="366.6" y="483.0" width="10.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="369.6" y="494.0"></text>
</g>
<g>
<title>[unknown] (36 samples, 0.77%)</title><rect x="367.6" y="467.0" width="9.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="370.6" y="478.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 0.68%)</title><rect x="368.6" y="451.0" width="8.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="371.6" y="462.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 0.56%)</title><rect x="370.1" y="435.0" width="6.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="373.1" y="446.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.53%)</title><rect x="370.4" y="419.0" width="6.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="373.4" y="430.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.43%)</title><rect x="371.7" y="403.0" width="5.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="374.7" y="414.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.02%)</title><rect x="376.7" y="1091.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="379.7" y="1102.0"></text>
</g>
<g>
<title>__GI___writev (2 samples, 0.04%)</title><rect x="377.0" y="1123.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="380.0" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.04%)</title><rect x="377.5" y="1155.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="380.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.04%)</title><rect x="377.5" y="1139.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="380.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.02%)</title><rect x="377.5" y="1123.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="380.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.02%)</title><rect x="377.7" y="1123.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="380.7" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/misc/TerminatingThreadLocal.register (1 samples, 0.02%)</title><rect x="377.7" y="1107.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="380.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.02%)</title><rect x="377.7" y="1091.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="380.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.02%)</title><rect x="377.7" y="1075.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="380.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.currentThread (1 samples, 0.02%)</title><rect x="377.7" y="1059.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="380.7" y="1070.0"></text>
</g>
<g>
<title>JVM_CurrentThread (1 samples, 0.02%)</title><rect x="377.7" y="1043.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="380.7" y="1054.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.02%)</title><rect x="377.7" y="1027.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="380.7" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.02%)</title><rect x="378.0" y="1187.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="381.0" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureOpenAndConnected (1 samples, 0.02%)</title><rect x="378.0" y="1171.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="381.0" y="1182.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (5 samples, 0.11%)</title><rect x="378.2" y="1219.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="381.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.02%)</title><rect x="378.5" y="1203.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="381.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (3 samples, 0.06%)</title><rect x="378.7" y="1203.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="381.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newArray (3 samples, 0.06%)</title><rect x="378.7" y="1187.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="381.7" y="1198.0"></text>
</g>
<g>
<title>JVM_NewArray (3 samples, 0.06%)</title><rect x="378.7" y="1171.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="381.7" y="1182.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="378.7" y="1155.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="381.7" y="1166.0"></text>
</g>
<g>
<title>Reflection::reflect_new_array(oopDesc*, int, Thread*) (2 samples, 0.04%)</title><rect x="379.0" y="1155.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="382.0" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.04%)</title><rect x="379.0" y="1139.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="382.0" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="379.0" y="1123.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="382.0" y="1134.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="379.0" y="1107.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="382.0" y="1118.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="379.0" y="1091.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="382.0" y="1102.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.02%)</title><rect x="379.2" y="1123.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="382.2" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.remaining (4 samples, 0.09%)</title><rect x="379.5" y="1235.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="382.5" y="1246.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$AbstractImmutableList.iterator (1 samples, 0.02%)</title><rect x="380.0" y="1219.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="383.0" y="1230.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$ListItr.&lt;init&gt; (1 samples, 0.02%)</title><rect x="380.0" y="1203.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="383.0" y="1214.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$ListItr.next (1 samples, 0.02%)</title><rect x="380.2" y="1219.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="383.2" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (312 samples, 6.66%)</title><rect x="380.5" y="1475.0" width="78.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="383.5" y="1486.0">jdk/inter..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (310 samples, 6.62%)</title><rect x="381.0" y="1459.0" width="78.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="384.0" y="1470.0">jdk/inter..</text>
</g>
<g>
<title>jdk/internal/net/http/PullPublisher$Subscription$PullTask.run (2 samples, 0.04%)</title><rect x="381.2" y="1443.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.2" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (2 samples, 0.04%)</title><rect x="381.2" y="1427.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="384.2" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (2 samples, 0.04%)</title><rect x="381.2" y="1411.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="384.2" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (2 samples, 0.04%)</title><rect x="381.2" y="1395.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="384.2" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (2 samples, 0.04%)</title><rect x="381.2" y="1379.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="384.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.add (1 samples, 0.02%)</title><rect x="381.2" y="1363.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="384.2" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.offerLast (1 samples, 0.02%)</title><rect x="381.2" y="1347.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="384.2" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.linkLast (1 samples, 0.02%)</title><rect x="381.2" y="1331.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="384.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.02%)</title><rect x="381.2" y="1315.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="384.2" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.02%)</title><rect x="381.2" y="1299.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="384.2" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (1 samples, 0.02%)</title><rect x="381.2" y="1283.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="384.2" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="381.2" y="1267.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="384.2" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="381.2" y="1251.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="384.2" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="381.2" y="1235.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="384.2" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="381.5" y="1363.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="384.5" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="381.5" y="1347.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="384.5" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (184 samples, 3.93%)</title><rect x="381.7" y="1443.0" width="46.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="384.7" y="1454.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$231/136586174.run (184 samples, 3.93%)</title><rect x="381.7" y="1427.0" width="46.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.7" y="1438.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (184 samples, 3.93%)</title><rect x="381.7" y="1411.0" width="46.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.7" y="1422.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.checkRequestMore (13 samples, 0.28%)</title><rect x="382.0" y="1395.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="385.0" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.requestMore (12 samples, 0.26%)</title><rect x="382.0" y="1379.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.0" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (12 samples, 0.26%)</title><rect x="382.0" y="1363.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="385.0" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (12 samples, 0.26%)</title><rect x="382.0" y="1347.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="385.0" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1659367709.linkToTargetMethod (1 samples, 0.02%)</title><rect x="382.2" y="1331.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="385.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/81412691.invoke (1 samples, 0.02%)</title><rect x="382.2" y="1315.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="385.2" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="382.2" y="1299.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="385.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.02%)</title><rect x="382.2" y="1283.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="385.2" y="1294.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.02%)</title><rect x="382.2" y="1267.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="385.2" y="1278.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.02%)</title><rect x="382.2" y="1251.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="385.2" y="1262.0"></text>
</g>
<g>
<title>CompiledIC::CompiledIC(CompiledMethod*, NativeCall*) (1 samples, 0.02%)</title><rect x="382.2" y="1235.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="385.2" y="1246.0"></text>
</g>
<g>
<title>RelocIterator::set_limits(unsigned char*, unsigned char*) (1 samples, 0.02%)</title><rect x="382.2" y="1219.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="385.2" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (10 samples, 0.21%)</title><rect x="382.5" y="1331.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="385.5" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="382.5" y="1315.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="385.5" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="382.5" y="1299.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="385.5" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$301/1292517547.get$Lambda (1 samples, 0.02%)</title><rect x="382.5" y="1283.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="385.5" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (9 samples, 0.19%)</title><rect x="382.8" y="1315.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="385.8" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (9 samples, 0.19%)</title><rect x="382.8" y="1299.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="385.8" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (9 samples, 0.19%)</title><rect x="382.8" y="1283.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="385.8" y="1294.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="382.8" y="1267.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="385.8" y="1278.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.02%)</title><rect x="382.8" y="1251.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="385.8" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (8 samples, 0.17%)</title><rect x="383.0" y="1267.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="386.0" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (8 samples, 0.17%)</title><rect x="383.0" y="1251.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="386.0" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (7 samples, 0.15%)</title><rect x="383.3" y="1235.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="386.3" y="1246.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="383.3" y="1219.0" width="1.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="386.3" y="1230.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="383.3" y="1203.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="386.3" y="1214.0"></text>
</g>
<g>
<title>__write (1 samples, 0.02%)</title><rect x="383.3" y="1187.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="386.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.3" y="1171.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="386.3" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.3" y="1155.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="386.3" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.3" y="1139.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="386.3" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.3" y="1123.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="386.3" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.3" y="1107.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="386.3" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.3" y="1091.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="386.3" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.3" y="1075.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="386.3" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.3" y="1059.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="386.3" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.3" y="1043.0" width="0.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="386.3" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.3" y="1027.0" width="0.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="386.3" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.3" y="1011.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="386.3" y="1022.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="383.5" y="1203.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="386.5" y="1214.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="383.5" y="1187.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="386.5" y="1198.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="383.5" y="1171.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="386.5" y="1182.0"></text>
</g>
<g>
<title>__write (1 samples, 0.02%)</title><rect x="383.5" y="1155.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="386.5" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.5" y="1139.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="386.5" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.5" y="1123.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="386.5" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.5" y="1107.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="386.5" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.5" y="1091.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="386.5" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.5" y="1075.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="386.5" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.5" y="1059.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="386.5" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.5" y="1043.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="386.5" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.5" y="1027.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="386.5" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.5" y="1011.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="386.5" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.5" y="995.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="386.5" y="1006.0"></text>
</g>
<g>
<title>__write (1 samples, 0.02%)</title><rect x="383.8" y="1171.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="386.8" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.8" y="1155.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="386.8" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.8" y="1139.0" width="0.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="386.8" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="383.8" y="1123.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="386.8" y="1134.0"></text>
</g>
<g>
<title>__write (2 samples, 0.04%)</title><rect x="384.0" y="1187.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="387.0" y="1198.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="384.0" y="1171.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="387.0" y="1182.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="384.0" y="1155.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="387.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="384.0" y="1139.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="387.0" y="1150.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="384.0" y="1123.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="387.0" y="1134.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="384.0" y="1107.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="387.0" y="1118.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="384.0" y="1091.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="387.0" y="1102.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="384.0" y="1075.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="387.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="384.3" y="1059.0" width="0.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="387.3" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="384.3" y="1043.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="387.3" y="1054.0"></text>
</g>
<g>
<title>__write (2 samples, 0.04%)</title><rect x="384.5" y="1203.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="387.5" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="384.8" y="1187.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="387.8" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="384.8" y="1171.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="387.8" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="384.8" y="1155.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="387.8" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="384.8" y="1139.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="387.8" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="384.8" y="1123.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="387.8" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="384.8" y="1107.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="387.8" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="384.8" y="1091.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="387.8" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="384.8" y="1075.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="387.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="384.8" y="1059.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="387.8" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="384.8" y="1043.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="387.8" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="384.8" y="1027.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="387.8" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.hasDemand (1 samples, 0.02%)</title><rect x="385.0" y="1379.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="388.0" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (1 samples, 0.02%)</title><rect x="385.3" y="1395.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="388.3" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onSubscribe (1 samples, 0.02%)</title><rect x="385.3" y="1379.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="388.3" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.onSubscribe (1 samples, 0.02%)</title><rect x="385.3" y="1363.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.3" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$325/652349130.run (1 samples, 0.02%)</title><rect x="385.3" y="1347.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.3" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.onFinished (1 samples, 0.02%)</title><rect x="385.3" y="1331.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="388.3" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.closeOrReturnToCache (1 samples, 0.02%)</title><rect x="385.3" y="1315.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="388.3" y="1326.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (1 samples, 0.02%)</title><rect x="385.3" y="1299.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.3" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (1 samples, 0.02%)</title><rect x="385.3" y="1283.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="388.3" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.02%)</title><rect x="385.3" y="1267.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="388.3" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (1 samples, 0.02%)</title><rect x="385.3" y="1251.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="388.3" y="1262.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (1 samples, 0.02%)</title><rect x="385.3" y="1235.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.3" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.hasDemand (2 samples, 0.04%)</title><rect x="385.5" y="1395.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.5" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AbstractSubscription.demand (1 samples, 0.02%)</title><rect x="385.8" y="1379.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="388.8" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeStatusLine (1 samples, 0.02%)</title><rect x="386.0" y="1395.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="389.0" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.tryAsyncReceive (1 samples, 0.02%)</title><rect x="386.3" y="1395.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="389.3" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (1 samples, 0.02%)</title><rect x="386.3" y="1379.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="389.3" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.tryAsyncReceive (165 samples, 3.52%)</title><rect x="386.5" y="1395.0" width="41.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="389.5" y="1406.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (165 samples, 3.52%)</title><rect x="386.5" y="1379.0" width="41.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="389.5" y="1390.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (165 samples, 3.52%)</title><rect x="386.5" y="1363.0" width="41.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="389.5" y="1374.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (165 samples, 3.52%)</title><rect x="386.5" y="1347.0" width="41.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="389.5" y="1358.0">jdk..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (91 samples, 1.94%)</title><rect x="386.8" y="1331.0" width="22.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="389.8" y="1342.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.02%)</title><rect x="386.8" y="1315.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.8" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="386.8" y="1299.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="389.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="386.8" y="1283.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="389.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (90 samples, 1.92%)</title><rect x="387.0" y="1315.0" width="22.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="390.0" y="1326.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (90 samples, 1.92%)</title><rect x="387.0" y="1299.0" width="22.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="390.0" y="1310.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (89 samples, 1.90%)</title><rect x="387.3" y="1283.0" width="22.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.3" y="1294.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (1 samples, 0.02%)</title><rect x="387.3" y="1267.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="390.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalSubmit (1 samples, 0.02%)</title><rect x="387.3" y="1251.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="390.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.push (1 samples, 0.02%)</title><rect x="387.3" y="1235.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="390.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LIL_V (1 samples, 0.02%)</title><rect x="387.3" y="1219.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$Array.setRelease (1 samples, 0.02%)</title><rect x="387.3" y="1203.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="390.3" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$314/1397481348.apply (1 samples, 0.02%)</title><rect x="387.3" y="1187.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="390.3" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (88 samples, 1.88%)</title><rect x="387.5" y="1267.0" width="22.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="390.5" y="1278.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (88 samples, 1.88%)</title><rect x="387.5" y="1251.0" width="22.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="390.5" y="1262.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (87 samples, 1.86%)</title><rect x="387.8" y="1235.0" width="21.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="390.8" y="1246.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (2 samples, 0.04%)</title><rect x="388.0" y="1219.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="391.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.tryFire (2 samples, 0.04%)</title><rect x="388.5" y="1219.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="391.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (77 samples, 1.64%)</title><rect x="389.1" y="1219.0" width="19.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="392.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (77 samples, 1.64%)</title><rect x="389.1" y="1203.0" width="19.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="392.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (73 samples, 1.56%)</title><rect x="389.3" y="1187.0" width="18.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="392.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.04%)</title><rect x="389.6" y="1171.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="392.6" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (2 samples, 0.04%)</title><rect x="389.6" y="1155.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="392.6" y="1166.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="389.6" y="1139.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="392.6" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$158/1622813550.apply (1 samples, 0.02%)</title><rect x="389.8" y="1139.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="392.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.&lt;init&gt; (1 samples, 0.02%)</title><rect x="390.1" y="1171.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="393.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.&lt;init&gt; (1 samples, 0.02%)</title><rect x="390.1" y="1155.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="393.1" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$158/1622813550.apply (63 samples, 1.35%)</title><rect x="390.3" y="1171.0" width="15.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="393.3" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$4 (63 samples, 1.35%)</title><rect x="390.3" y="1155.0" width="15.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="393.3" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.readBodyAsync (62 samples, 1.32%)</title><rect x="390.3" y="1139.0" width="15.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="390.3" y="1123.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="393.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="390.3" y="1107.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="393.3" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$340/122266442.get$Lambda (1 samples, 0.02%)</title><rect x="390.3" y="1091.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="393.3" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$340/122266442.&lt;init&gt; (1 samples, 0.02%)</title><rect x="390.3" y="1075.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.02%)</title><rect x="390.6" y="1123.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="393.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.02%)</title><rect x="390.6" y="1107.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="393.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (1 samples, 0.02%)</title><rect x="390.6" y="1091.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="393.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/BootstrapMethodInvoker.invoke (1 samples, 0.02%)</title><rect x="390.6" y="1075.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="393.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invokeExact_MT (1 samples, 0.02%)</title><rect x="390.6" y="1059.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="393.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1411656898.invokeStatic (1 samples, 0.02%)</title><rect x="390.6" y="1043.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaMetafactory.metafactory (1 samples, 0.02%)</title><rect x="390.6" y="1027.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="393.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.02%)</title><rect x="390.6" y="1011.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="393.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.findStatic (1 samples, 0.02%)</title><rect x="390.6" y="995.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="393.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.resolveOrFail (1 samples, 0.02%)</title><rect x="390.6" y="979.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="393.6" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName$Factory.resolveOrFail (1 samples, 0.02%)</title><rect x="390.6" y="963.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="393.6" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName$Factory.resolve (1 samples, 0.02%)</title><rect x="390.6" y="947.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="393.6" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName.clone (1 samples, 0.02%)</title><rect x="390.6" y="931.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="393.6" y="942.0"></text>
</g>
<g>
<title>java/lang/Object.clone (1 samples, 0.02%)</title><rect x="390.6" y="915.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="393.6" y="926.0"></text>
</g>
<g>
<title>JVM_Clone (1 samples, 0.02%)</title><rect x="390.6" y="899.0" width="0.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="393.6" y="910.0"></text>
</g>
<g>
<title>Klass::is_cloneable() const (1 samples, 0.02%)</title><rect x="390.6" y="883.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="393.6" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.readBodyAsync (59 samples, 1.26%)</title><rect x="390.8" y="1123.0" width="14.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="393.8" y="1134.0"></text>
</g>
<g>
<title>java/net/http/HttpResponse$BodyHandlers$$Lambda$146/2083139844.apply (1 samples, 0.02%)</title><rect x="390.8" y="1107.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="393.8" y="1118.0"></text>
</g>
<g>
<title>java/net/http/HttpResponse$BodyHandlers.lambda$discarding$6 (1 samples, 0.02%)</title><rect x="390.8" y="1091.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.8" y="1102.0"></text>
</g>
<g>
<title>java/net/http/HttpResponse$BodySubscribers.discarding (1 samples, 0.02%)</title><rect x="390.8" y="1075.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="393.8" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$NullSubscriber.&lt;init&gt; (1 samples, 0.02%)</title><rect x="390.8" y="1059.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="393.8" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readBody (57 samples, 1.22%)</title><rect x="391.1" y="1107.0" width="14.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="394.1" y="1118.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.02%)</title><rect x="391.3" y="1091.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="394.3" y="1102.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.02%)</title><rect x="391.3" y="1075.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="394.3" y="1086.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Bytecodes::Code, Thread*) (1 samples, 0.02%)</title><rect x="391.3" y="1059.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="394.3" y="1070.0"></text>
</g>
<g>
<title>ConstantPool::klass_ref_at(int, Thread*) (1 samples, 0.02%)</title><rect x="391.3" y="1043.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="394.3" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.02%)</title><rect x="391.3" y="1027.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="394.3" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.02%)</title><rect x="391.3" y="1011.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="394.3" y="1022.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_load(JavaThread*, Klass*) (1 samples, 0.02%)</title><rect x="391.3" y="995.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="394.3" y="1006.0"></text>
</g>
<g>
<title>JvmtiJavaThreadEventTransition::~JvmtiJavaThreadEventTransition() (1 samples, 0.02%)</title><rect x="391.3" y="979.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="394.3" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="391.6" y="1091.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="394.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="391.6" y="1075.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="394.6" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="391.6" y="1059.0" width="0.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="394.6" y="1070.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValueAsLong (19 samples, 0.41%)</title><rect x="391.8" y="1091.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="394.8" y="1102.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (1 samples, 0.02%)</title><rect x="391.8" y="1075.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="394.8" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.02%)</title><rect x="391.8" y="1059.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="394.8" y="1070.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (1 samples, 0.02%)</title><rect x="391.8" y="1043.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="394.8" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.02%)</title><rect x="391.8" y="1027.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="394.8" y="1038.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.02%)</title><rect x="391.8" y="1011.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="394.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="391.8" y="995.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="394.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="391.8" y="979.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="394.8" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.02%)</title><rect x="391.8" y="963.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="394.8" y="974.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.02%)</title><rect x="391.8" y="947.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="394.8" y="958.0"></text>
</g>
<g>
<title>java/util/Collection.stream (3 samples, 0.06%)</title><rect x="392.1" y="1075.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="395.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.04%)</title><rect x="392.3" y="1059.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="395.3" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (1 samples, 0.02%)</title><rect x="392.6" y="1043.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="395.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (1 samples, 0.02%)</title><rect x="392.6" y="1027.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="395.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/LongPipeline.findFirst (14 samples, 0.30%)</title><rect x="392.8" y="1075.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="395.8" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (14 samples, 0.30%)</title><rect x="392.8" y="1059.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="395.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (14 samples, 0.30%)</title><rect x="392.8" y="1043.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="395.8" y="1054.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="392.8" y="1027.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="395.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (12 samples, 0.26%)</title><rect x="393.1" y="1027.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="396.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (12 samples, 0.26%)</title><rect x="393.1" y="1011.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.1" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (11 samples, 0.23%)</title><rect x="393.1" y="995.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="396.1" y="1006.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="393.6" y="979.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="396.6" y="990.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (1 samples, 0.02%)</title><rect x="393.8" y="979.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="396.8" y="990.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (2 samples, 0.04%)</title><rect x="394.1" y="979.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="397.1" y="990.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (2 samples, 0.04%)</title><rect x="394.1" y="963.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="397.1" y="974.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (2 samples, 0.04%)</title><rect x="394.1" y="947.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="397.1" y="958.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (2 samples, 0.04%)</title><rect x="394.1" y="931.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.1" y="942.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (1 samples, 0.02%)</title><rect x="394.3" y="915.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="397.3" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (2 samples, 0.04%)</title><rect x="394.6" y="979.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.6" y="990.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.tryAdvance (1 samples, 0.02%)</title><rect x="394.6" y="963.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="397.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$5$1.accept (1 samples, 0.02%)</title><rect x="394.6" y="947.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.6" y="958.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$318/1210854148.applyAsLong (1 samples, 0.02%)</title><rect x="394.6" y="931.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="397.6" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.02%)</title><rect x="394.6" y="915.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="397.6" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (1 samples, 0.02%)</title><rect x="394.6" y="899.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="397.6" y="910.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.02%)</title><rect x="394.6" y="883.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="397.6" y="894.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.02%)</title><rect x="394.6" y="867.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.6" y="878.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.02%)</title><rect x="394.6" y="851.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="397.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.cancellationRequested (1 samples, 0.02%)</title><rect x="394.8" y="963.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="397.8" y="974.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="394.8" y="947.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="397.8" y="958.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.04%)</title><rect x="395.1" y="979.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="398.1" y="990.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="395.4" y="963.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="398.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.02%)</title><rect x="395.6" y="979.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="398.6" y="990.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="395.6" y="963.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="398.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.02%)</title><rect x="395.9" y="995.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="398.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindSink$OfLong.get (1 samples, 0.02%)</title><rect x="396.1" y="1027.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="399.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindSink$OfLong.get (1 samples, 0.02%)</title><rect x="396.1" y="1011.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="399.1" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.mapToLong (1 samples, 0.02%)</title><rect x="396.4" y="1075.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="399.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.02%)</title><rect x="396.6" y="1091.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="399.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.02%)</title><rect x="396.6" y="1075.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="399.6" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="396.6" y="1059.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="399.6" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="396.6" y="1043.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="399.6" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="396.6" y="1027.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="399.6" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$ClientRefCountTracker.&lt;init&gt; (1 samples, 0.02%)</title><rect x="396.9" y="1091.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="399.9" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.fixupContentLen (3 samples, 0.06%)</title><rect x="397.1" y="1091.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="400.1" y="1102.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="397.1" y="1075.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="400.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.04%)</title><rect x="397.4" y="1075.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="400.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.02%)</title><rect x="397.6" y="1059.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="400.6" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (30 samples, 0.64%)</title><rect x="397.9" y="1091.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="400.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.02%)</title><rect x="397.9" y="1075.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="400.9" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$323/1833703036.run (1 samples, 0.02%)</title><rect x="397.9" y="1059.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="400.9" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$323/1833703036.run (29 samples, 0.62%)</title><rect x="398.1" y="1075.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="401.1" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$3 (29 samples, 0.62%)</title><rect x="398.1" y="1059.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="401.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.09%)</title><rect x="398.4" y="1043.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="401.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.06%)</title><rect x="398.6" y="1027.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="401.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.02%)</title><rect x="398.6" y="1011.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="401.6" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$325/652349130.get$Lambda (1 samples, 0.02%)</title><rect x="398.9" y="1011.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="401.9" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$327/1994142006.get$Lambda (1 samples, 0.02%)</title><rect x="399.1" y="1011.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.1" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$327/1994142006.&lt;init&gt; (1 samples, 0.02%)</title><rect x="399.1" y="995.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="402.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.isCompletedExceptionally (1 samples, 0.02%)</title><rect x="399.4" y="1043.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="402.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.04%)</title><rect x="399.6" y="1043.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="402.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.04%)</title><rect x="399.6" y="1027.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="402.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.04%)</title><rect x="399.6" y="1011.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="402.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.tryPushStack (1 samples, 0.02%)</title><rect x="399.9" y="995.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="402.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="399.9" y="979.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="402.9" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="399.9" y="963.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="402.9" y="974.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.02%)</title><rect x="399.9" y="947.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.9" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.subscribe (2 samples, 0.04%)</title><rect x="400.1" y="1043.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="403.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.isEmpty (1 samples, 0.02%)</title><rect x="400.4" y="1027.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.peekFirst (1 samples, 0.02%)</title><rect x="400.4" y="1011.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="403.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.first (1 samples, 0.02%)</title><rect x="400.4" y="995.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="403.4" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.start (1 samples, 0.02%)</title><rect x="400.6" y="1043.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="403.6" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.&lt;init&gt; (1 samples, 0.02%)</title><rect x="400.6" y="1027.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="403.6" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.addTrailingOperation (8 samples, 0.17%)</title><rect x="400.9" y="1043.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.9" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.add (8 samples, 0.17%)</title><rect x="400.9" y="1027.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="403.9" y="1038.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.put (6 samples, 0.13%)</title><rect x="401.1" y="1011.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="404.1" y="1022.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.hash (5 samples, 0.11%)</title><rect x="401.4" y="995.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="404.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/System.identityHashCode (5 samples, 0.11%)</title><rect x="401.4" y="979.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.4" y="990.0"></text>
</g>
<g>
<title>JVM_IHashCode (4 samples, 0.09%)</title><rect x="401.4" y="963.0" width="1.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="404.4" y="974.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="401.7" y="947.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="404.7" y="958.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (1 samples, 0.02%)</title><rect x="401.9" y="947.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="404.9" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.02%)</title><rect x="402.2" y="947.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="405.2" y="958.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="402.4" y="963.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="405.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.02%)</title><rect x="402.7" y="1011.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="405.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.02%)</title><rect x="402.7" y="995.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="405.7" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent.&lt;init&gt; (6 samples, 0.13%)</title><rect x="402.9" y="1043.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="405.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.09%)</title><rect x="403.2" y="1027.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1122606666.invoke (4 samples, 0.09%)</title><rect x="403.2" y="1011.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="406.2" y="1022.0"></text>
</g>
<g>
<title>_invokeBasic (1 samples, 0.02%)</title><rect x="403.2" y="995.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="406.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.06%)</title><rect x="403.4" y="995.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="406.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (1 samples, 0.02%)</title><rect x="403.7" y="979.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="406.7" y="990.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="403.7" y="963.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.7" y="974.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.02%)</title><rect x="403.9" y="979.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="406.9" y="990.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="403.9" y="963.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="406.9" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="403.9" y="947.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="406.9" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.dbgString (1 samples, 0.02%)</title><rect x="404.2" y="1027.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="407.2" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent.getBodyParser (4 samples, 0.09%)</title><rect x="404.4" y="1043.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.4" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.&lt;init&gt; (4 samples, 0.09%)</title><rect x="404.4" y="1027.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="407.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.06%)</title><rect x="404.7" y="1011.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="407.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="404.7" y="995.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="407.7" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser$$Lambda$332/1558533558.get$Lambda (1 samples, 0.02%)</title><rect x="404.7" y="979.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="407.7" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1122606666.invoke (2 samples, 0.04%)</title><rect x="404.9" y="995.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="404.9" y="979.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="407.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="404.9" y="963.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="407.9" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="404.9" y="947.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="407.9" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="405.2" y="979.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="408.2" y="990.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.02%)</title><rect x="405.2" y="963.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="408.2" y="974.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.02%)</title><rect x="405.2" y="947.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="408.2" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseInfoImpl.&lt;init&gt; (1 samples, 0.02%)</title><rect x="405.4" y="1107.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="408.4" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readBody (1 samples, 0.02%)</title><rect x="405.4" y="1091.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="408.4" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.isWebSocket (1 samples, 0.02%)</title><rect x="405.7" y="1123.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="408.7" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.getExchange (1 samples, 0.02%)</title><rect x="405.9" y="1139.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="408.9" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$294/2004173693.apply (6 samples, 0.13%)</title><rect x="406.2" y="1171.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="409.2" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsyncImpl$6 (5 samples, 0.11%)</title><rect x="406.4" y="1155.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="409.4" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseFilters (5 samples, 0.11%)</title><rect x="406.4" y="1139.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.4" y="1150.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="406.7" y="1123.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="409.7" y="1134.0"></text>
</g>
<g>
<title>java/util/LinkedList.descendingIterator (1 samples, 0.02%)</title><rect x="406.9" y="1123.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.9" y="1134.0"></text>
</g>
<g>
<title>java/util/LinkedList$DescendingIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="406.9" y="1107.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="409.9" y="1118.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.&lt;init&gt; (1 samples, 0.02%)</title><rect x="406.9" y="1091.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="409.9" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.response (1 samples, 0.02%)</title><rect x="407.2" y="1123.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="410.2" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/RedirectFilter.response (1 samples, 0.02%)</title><rect x="407.4" y="1123.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="410.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (2 samples, 0.04%)</title><rect x="407.7" y="1187.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="410.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (2 samples, 0.04%)</title><rect x="407.7" y="1171.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="410.7" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$296/730056817.apply (1 samples, 0.02%)</title><rect x="408.0" y="1155.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="411.0" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsyncImpl$7 (1 samples, 0.02%)</title><rect x="408.0" y="1139.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="411.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.tryFire (1 samples, 0.02%)</title><rect x="408.2" y="1187.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="411.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.02%)</title><rect x="408.2" y="1171.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.2" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$314/1397481348.apply (5 samples, 0.11%)</title><rect x="408.5" y="1219.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="411.5" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readHeadersAsync$0 (5 samples, 0.11%)</title><rect x="408.5" y="1203.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="411.5" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Response.&lt;init&gt; (4 samples, 0.09%)</title><rect x="408.5" y="1187.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="411.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.04%)</title><rect x="408.5" y="1171.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="408.5" y="1155.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.02%)</title><rect x="408.7" y="1139.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="411.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.02%)</title><rect x="408.7" y="1123.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="411.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.02%)</title><rect x="408.7" y="1107.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="411.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.02%)</title><rect x="408.7" y="1091.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.02%)</title><rect x="408.7" y="1075.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="411.7" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Response.&lt;init&gt; (2 samples, 0.04%)</title><rect x="409.0" y="1171.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="412.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="409.0" y="1155.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="412.0" y="1166.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.02%)</title><rect x="409.0" y="1139.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="412.0" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.getLocalAddress (1 samples, 0.02%)</title><rect x="409.2" y="1155.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="412.2" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Log.headers (1 samples, 0.02%)</title><rect x="409.5" y="1187.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="412.5" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.parse (73 samples, 1.56%)</title><rect x="409.7" y="1331.0" width="18.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="412.7" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.canContinueParsing (4 samples, 0.09%)</title><rect x="410.5" y="1315.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="413.5" y="1326.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="410.7" y="1299.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="413.7" y="1310.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="410.7" y="1283.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="413.7" y="1294.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="410.7" y="1267.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="413.7" y="1278.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="410.7" y="1251.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="413.7" y="1262.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="410.7" y="1235.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="413.7" y="1246.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="410.7" y="1219.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="413.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="410.7" y="1203.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="413.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="411.0" y="1187.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="414.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/Enum.ordinal (1 samples, 0.02%)</title><rect x="411.2" y="1299.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="414.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.02%)</title><rect x="411.2" y="1283.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="414.2" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.maybeStartHeaders (6 samples, 0.13%)</title><rect x="411.5" y="1315.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="414.5" y="1326.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 0.11%)</title><rect x="411.7" y="1299.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="414.7" y="1310.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.11%)</title><rect x="411.7" y="1283.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="414.7" y="1294.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.02%)</title><rect x="412.7" y="1267.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="415.7" y="1278.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="412.7" y="1251.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="415.7" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeHeader (8 samples, 0.17%)</title><rect x="413.0" y="1315.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="416.0" y="1326.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.02%)</title><rect x="413.8" y="1299.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="416.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.02%)</title><rect x="413.8" y="1283.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="416.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.02%)</title><rect x="413.8" y="1267.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="416.8" y="1278.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title><rect x="414.0" y="1299.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="417.0" y="1310.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.02%)</title><rect x="414.0" y="1283.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="417.0" y="1294.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.02%)</title><rect x="414.3" y="1283.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="417.3" y="1294.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="414.5" y="1299.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="417.5" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeStatusLine (6 samples, 0.13%)</title><rect x="415.0" y="1315.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="418.0" y="1326.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.06%)</title><rect x="415.0" y="1299.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="418.0" y="1310.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.06%)</title><rect x="415.0" y="1283.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="418.0" y="1294.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.04%)</title><rect x="415.3" y="1267.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="418.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (1 samples, 0.02%)</title><rect x="415.5" y="1251.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="418.5" y="1262.0"></text>
</g>
<g>
<title>java/nio/Buffer.hasRemaining (1 samples, 0.02%)</title><rect x="415.8" y="1299.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="418.8" y="1310.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title><rect x="416.0" y="1299.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="419.0" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readStatusLineFeed (4 samples, 0.09%)</title><rect x="416.5" y="1315.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="419.5" y="1326.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.02%)</title><rect x="416.8" y="1299.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="419.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.02%)</title><rect x="416.8" y="1283.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="419.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="416.8" y="1267.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="419.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="416.8" y="1251.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="419.8" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeStatusLine (1 samples, 0.02%)</title><rect x="416.8" y="1235.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="419.8" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.04%)</title><rect x="417.0" y="1299.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="420.0" y="1310.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.isLatin1 (1 samples, 0.02%)</title><rect x="417.0" y="1283.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="420.0" y="1294.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="417.0" y="1267.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="420.0" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeHeader (1 samples, 0.02%)</title><rect x="417.3" y="1283.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="420.3" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.resumeOrEndHeaders (11 samples, 0.23%)</title><rect x="417.5" y="1315.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="420.5" y="1326.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (9 samples, 0.19%)</title><rect x="418.0" y="1299.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="421.0" y="1310.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (9 samples, 0.19%)</title><rect x="418.0" y="1283.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="421.0" y="1294.0"></text>
</g>
<g>
<title>java/util/AbstractMap.isEmpty (2 samples, 0.04%)</title><rect x="418.3" y="1267.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="421.3" y="1278.0"></text>
</g>
<g>
<title>java/util/TreeMap.size (1 samples, 0.02%)</title><rect x="418.5" y="1251.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="421.5" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.forEach (1 samples, 0.02%)</title><rect x="418.5" y="1235.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="421.5" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.forEach (5 samples, 0.11%)</title><rect x="418.8" y="1267.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="421.8" y="1278.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$137/1564001392.accept (5 samples, 0.11%)</title><rect x="418.8" y="1251.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="421.8" y="1262.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (4 samples, 0.09%)</title><rect x="419.0" y="1235.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="422.0" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.trim (4 samples, 0.09%)</title><rect x="419.0" y="1219.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="422.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (4 samples, 0.09%)</title><rect x="419.0" y="1203.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.06%)</title><rect x="419.3" y="1187.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="422.3" y="1198.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.06%)</title><rect x="419.3" y="1171.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="422.3" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$62/1431467659.test (2 samples, 0.04%)</title><rect x="419.5" y="1155.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="422.5" y="1166.0"></text>
</g>
<g>
<title>java/util/TreeMap.&lt;init&gt; (1 samples, 0.02%)</title><rect x="420.1" y="1267.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="423.1" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.resumeOrSecondCR (31 samples, 0.66%)</title><rect x="420.3" y="1315.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="423.3" y="1326.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.02%)</title><rect x="420.3" y="1299.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="423.3" y="1310.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.02%)</title><rect x="420.3" y="1283.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="423.3" y="1294.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (4 samples, 0.09%)</title><rect x="420.6" y="1299.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="423.6" y="1310.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.09%)</title><rect x="420.6" y="1283.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.6" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.09%)</title><rect x="420.6" y="1267.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="423.6" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.addHeaderFromString (26 samples, 0.56%)</title><rect x="421.6" y="1299.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="424.6" y="1310.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.17%)</title><rect x="422.1" y="1283.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="425.1" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.17%)</title><rect x="422.1" y="1267.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.17%)</title><rect x="422.1" y="1251.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.1" y="1262.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="423.3" y="1235.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="426.3" y="1246.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="423.6" y="1235.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="426.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="424.1" y="1283.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="427.1" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (4 samples, 0.09%)</title><rect x="424.3" y="1283.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="427.3" y="1294.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (4 samples, 0.09%)</title><rect x="424.3" y="1267.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="427.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (1 samples, 0.02%)</title><rect x="425.3" y="1283.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="428.3" y="1294.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.06%)</title><rect x="425.6" y="1283.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="428.6" y="1294.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.06%)</title><rect x="425.6" y="1267.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="428.6" y="1278.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.06%)</title><rect x="425.6" y="1251.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="428.6" y="1262.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.06%)</title><rect x="425.6" y="1235.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="428.6" y="1246.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.06%)</title><rect x="425.6" y="1219.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="428.6" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.computeIfAbsent (7 samples, 0.15%)</title><rect x="426.4" y="1283.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="429.4" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.02%)</title><rect x="426.9" y="1267.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="429.9" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.02%)</title><rect x="426.9" y="1251.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="429.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.02%)</title><rect x="426.9" y="1235.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="429.9" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.02%)</title><rect x="427.1" y="1267.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="430.1" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="427.1" y="1251.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="430.1" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="427.1" y="1235.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="430.1" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="427.1" y="1219.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="430.1" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="427.1" y="1203.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="430.1" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="427.1" y="1187.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="430.1" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="427.1" y="1171.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="430.1" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser$$Lambda$315/1017512857.apply (3 samples, 0.06%)</title><rect x="427.4" y="1267.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="430.4" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.lambda$addHeaderFromString$0 (3 samples, 0.06%)</title><rect x="427.4" y="1251.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="430.4" y="1262.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.06%)</title><rect x="427.4" y="1235.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="430.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.04%)</title><rect x="427.6" y="1219.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="430.6" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (123 samples, 2.63%)</title><rect x="428.1" y="1443.0" width="31.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="431.1" y="1454.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (120 samples, 2.56%)</title><rect x="428.9" y="1427.0" width="30.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="431.9" y="1438.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (119 samples, 2.54%)</title><rect x="429.1" y="1411.0" width="30.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="432.1" y="1422.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$231/136586174.run (119 samples, 2.54%)</title><rect x="429.1" y="1395.0" width="30.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.1" y="1406.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (119 samples, 2.54%)</title><rect x="429.1" y="1379.0" width="30.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="432.1" y="1390.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (115 samples, 2.46%)</title><rect x="429.1" y="1363.0" width="29.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="432.1" y="1374.0">jd..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="429.1" y="1347.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="432.1" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="429.1" y="1331.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.1" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.internalMemberName (1 samples, 0.02%)</title><rect x="429.1" y="1315.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="432.1" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.&lt;init&gt; (1 samples, 0.02%)</title><rect x="429.4" y="1347.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="432.4" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AbstractSubscription.&lt;init&gt; (1 samples, 0.02%)</title><rect x="429.4" y="1331.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="432.4" y="1342.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.02%)</title><rect x="429.4" y="1315.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="432.4" y="1326.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.02%)</title><rect x="429.4" y="1299.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="432.4" y="1310.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.02%)</title><rect x="429.4" y="1283.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="432.4" y="1294.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.02%)</title><rect x="429.4" y="1267.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="432.4" y="1278.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="429.4" y="1251.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="432.4" y="1262.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.02%)</title><rect x="429.4" y="1235.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="432.4" y="1246.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.02%)</title><rect x="429.4" y="1219.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="432.4" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onSubscribe (106 samples, 2.26%)</title><rect x="429.6" y="1347.0" width="26.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="432.6" y="1358.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.onSubscribe (105 samples, 2.24%)</title><rect x="429.9" y="1331.0" width="26.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="432.9" y="1342.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$325/652349130.run (44 samples, 0.94%)</title><rect x="430.1" y="1315.0" width="11.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="433.1" y="1326.0"></text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (1 samples, 0.02%)</title><rect x="430.1" y="1299.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="433.1" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.onFinished (43 samples, 0.92%)</title><rect x="430.4" y="1299.0" width="10.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="433.4" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.clear (1 samples, 0.02%)</title><rect x="430.4" y="1283.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="433.4" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.closeOrReturnToCache (42 samples, 0.90%)</title><rect x="430.6" y="1283.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.6" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.02%)</title><rect x="430.6" y="1267.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.02%)</title><rect x="430.6" y="1251.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="433.6" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (1 samples, 0.02%)</title><rect x="430.6" y="1235.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="433.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/BootstrapMethodInvoker.invoke (1 samples, 0.02%)</title><rect x="430.6" y="1219.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="433.6" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invokeExact_MT (1 samples, 0.02%)</title><rect x="430.6" y="1203.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1411656898.invokeStatic (1 samples, 0.02%)</title><rect x="430.6" y="1187.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="433.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaMetafactory.metafactory (1 samples, 0.02%)</title><rect x="430.6" y="1171.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="433.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.02%)</title><rect x="430.6" y="1155.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="433.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.02%)</title><rect x="430.6" y="1139.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="433.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.acquireConstructorAccessor (1 samples, 0.02%)</title><rect x="430.6" y="1123.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="433.6" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/reflect/ReflectionFactory.newConstructorAccessor (1 samples, 0.02%)</title><rect x="430.6" y="1107.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="433.6" y="1118.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (6 samples, 0.13%)</title><rect x="430.9" y="1267.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="433.9" y="1278.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (4 samples, 0.09%)</title><rect x="430.9" y="1251.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="433.9" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 0.09%)</title><rect x="430.9" y="1235.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="433.9" y="1246.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (4 samples, 0.09%)</title><rect x="430.9" y="1219.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="433.9" y="1230.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (4 samples, 0.09%)</title><rect x="430.9" y="1203.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="433.9" y="1214.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (4 samples, 0.09%)</title><rect x="430.9" y="1187.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="433.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (3 samples, 0.06%)</title><rect x="431.1" y="1171.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="434.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (3 samples, 0.06%)</title><rect x="431.1" y="1155.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="434.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (2 samples, 0.04%)</title><rect x="431.4" y="1139.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="434.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.getChar (1 samples, 0.02%)</title><rect x="431.6" y="1123.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (2 samples, 0.04%)</title><rect x="431.9" y="1251.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="434.9" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.04%)</title><rect x="431.9" y="1235.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="434.9" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (2 samples, 0.04%)</title><rect x="431.9" y="1219.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="434.9" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.02%)</title><rect x="432.1" y="1203.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="435.1" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.02%)</title><rect x="432.1" y="1187.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="435.1" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.02%)</title><rect x="432.1" y="1171.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.1" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.02%)</title><rect x="432.1" y="1155.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="435.1" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindSink.cancellationRequested (1 samples, 0.02%)</title><rect x="432.1" y="1139.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="435.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.02%)</title><rect x="432.4" y="1267.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="435.4" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (34 samples, 0.73%)</title><rect x="432.7" y="1267.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="435.7" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (34 samples, 0.73%)</title><rect x="432.7" y="1251.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.7" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.add (1 samples, 0.02%)</title><rect x="432.7" y="1235.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="435.7" y="1246.0"></text>
</g>
<g>
<title>java/time/Instant.truncatedTo (1 samples, 0.02%)</title><rect x="432.7" y="1219.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="435.7" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.putConnection (9 samples, 0.19%)</title><rect x="432.9" y="1235.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="435.9" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.15%)</title><rect x="432.9" y="1219.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="435.9" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.11%)</title><rect x="432.9" y="1203.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="435.9" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.equals (3 samples, 0.06%)</title><rect x="432.9" y="1187.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="435.9" y="1198.0"></text>
</g>
<g>
<title>java/util/Objects.equals (3 samples, 0.06%)</title><rect x="432.9" y="1171.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="435.9" y="1182.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.equals (3 samples, 0.06%)</title><rect x="432.9" y="1155.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="435.9" y="1166.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress$InetSocketAddressHolder.equals (3 samples, 0.06%)</title><rect x="432.9" y="1139.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="435.9" y="1150.0"></text>
</g>
<g>
<title>java/net/Inet4Address.equals (2 samples, 0.04%)</title><rect x="433.2" y="1123.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="436.2" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (2 samples, 0.04%)</title><rect x="433.7" y="1187.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="436.7" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.04%)</title><rect x="434.2" y="1203.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="437.2" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.hashCode (2 samples, 0.04%)</title><rect x="434.2" y="1187.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="437.2" y="1198.0"></text>
</g>
<g>
<title>java/util/Objects.hash (1 samples, 0.02%)</title><rect x="434.4" y="1171.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="437.4" y="1182.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (1 samples, 0.02%)</title><rect x="434.4" y="1155.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="437.4" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection.cacheKey (2 samples, 0.04%)</title><rect x="434.7" y="1219.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="437.7" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.&lt;init&gt; (2 samples, 0.04%)</title><rect x="434.7" y="1203.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="437.7" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.registerCleanupTrigger (24 samples, 0.51%)</title><rect x="435.2" y="1235.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="438.2" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.connectFlows (22 samples, 0.47%)</title><rect x="435.7" y="1219.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="438.7" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.subscribe (3 samples, 0.06%)</title><rect x="435.9" y="1203.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="438.9" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (3 samples, 0.06%)</title><rect x="435.9" y="1187.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="438.9" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (3 samples, 0.06%)</title><rect x="435.9" y="1171.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="438.9" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (2 samples, 0.04%)</title><rect x="436.2" y="1155.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="439.2" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (2 samples, 0.04%)</title><rect x="436.2" y="1139.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="439.2" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (2 samples, 0.04%)</title><rect x="436.2" y="1123.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="439.2" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.subscribe (18 samples, 0.38%)</title><rect x="436.7" y="1203.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="439.7" y="1214.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.02%)</title><rect x="436.7" y="1187.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="439.7" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher.subscribe (17 samples, 0.36%)</title><rect x="436.9" y="1187.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="439.9" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalSubscribe (16 samples, 0.34%)</title><rect x="436.9" y="1171.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="439.9" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (16 samples, 0.34%)</title><rect x="436.9" y="1155.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="439.9" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (16 samples, 0.34%)</title><rect x="436.9" y="1139.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="439.9" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="436.9" y="1123.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="439.9" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="436.9" y="1107.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="439.9" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="436.9" y="1091.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="439.9" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="436.9" y="1075.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="439.9" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (15 samples, 0.32%)</title><rect x="437.2" y="1123.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.2" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (14 samples, 0.30%)</title><rect x="437.4" y="1107.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.4" y="1118.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="437.7" y="1091.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="440.7" y="1102.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="437.7" y="1075.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="440.7" y="1086.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="437.7" y="1059.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="440.7" y="1070.0"></text>
</g>
<g>
<title>__write (2 samples, 0.04%)</title><rect x="437.7" y="1043.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="440.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="437.9" y="1027.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="440.9" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="437.9" y="1011.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="440.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="437.9" y="995.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="440.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="437.9" y="979.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="440.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="437.9" y="963.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="440.9" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="437.9" y="947.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="440.9" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="437.9" y="931.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="440.9" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="437.9" y="915.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="440.9" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="437.9" y="899.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="440.9" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="437.9" y="883.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="440.9" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="437.9" y="867.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="440.9" y="878.0"></text>
</g>
<g>
<title>__write (2 samples, 0.04%)</title><rect x="438.2" y="1059.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="441.2" y="1070.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="438.2" y="1043.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="441.2" y="1054.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="438.2" y="1027.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="441.2" y="1038.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="438.2" y="1011.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="441.2" y="1022.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="438.2" y="995.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="441.2" y="1006.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="438.2" y="979.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="441.2" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="438.2" y="963.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="441.2" y="974.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="438.2" y="947.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="441.2" y="958.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="438.2" y="931.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="441.2" y="942.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="438.2" y="915.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="441.2" y="926.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="438.2" y="899.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="441.2" y="910.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="438.2" y="883.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="441.2" y="894.0"></text>
</g>
<g>
<title>__write (9 samples, 0.19%)</title><rect x="438.7" y="1091.0" width="2.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="441.7" y="1102.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="439.0" y="1075.0" width="2.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="442.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="439.0" y="1059.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="442.0" y="1070.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="439.0" y="1043.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="442.0" y="1054.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="439.0" y="1027.0" width="2.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="442.0" y="1038.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="439.0" y="1011.0" width="2.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="442.0" y="1022.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="439.0" y="995.0" width="2.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="442.0" y="1006.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="439.2" y="979.0" width="1.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="442.2" y="990.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="439.5" y="963.0" width="1.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="442.5" y="974.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="439.5" y="947.0" width="1.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="442.5" y="958.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="439.7" y="931.0" width="1.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="442.7" y="942.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="439.7" y="915.0" width="1.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="442.7" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.&lt;init&gt; (1 samples, 0.02%)</title><rect x="441.0" y="1171.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="444.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="441.0" y="1155.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="444.0" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$327/1994142006.accept (4 samples, 0.09%)</title><rect x="441.2" y="1315.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="444.2" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$1 (4 samples, 0.09%)</title><rect x="441.2" y="1299.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="444.2" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onComplete (4 samples, 0.09%)</title><rect x="441.2" y="1283.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="444.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (4 samples, 0.09%)</title><rect x="441.2" y="1267.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="444.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (4 samples, 0.09%)</title><rect x="441.2" y="1251.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="444.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.09%)</title><rect x="441.2" y="1235.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="444.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.09%)</title><rect x="441.2" y="1219.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="444.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.04%)</title><rect x="441.2" y="1203.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="444.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (2 samples, 0.04%)</title><rect x="441.2" y="1187.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="444.2" y="1198.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="441.2" y="1171.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="444.2" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations$$Lambda$335/1458335372.accept (1 samples, 0.02%)</title><rect x="441.5" y="1171.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="444.5" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$333/1978442940.accept (1 samples, 0.02%)</title><rect x="441.7" y="1203.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="444.7" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations$$Lambda$335/1458335372.accept (1 samples, 0.02%)</title><rect x="442.0" y="1203.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="445.0" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.lambda$add$0 (1 samples, 0.02%)</title><rect x="442.0" y="1187.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="445.0" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.remove (1 samples, 0.02%)</title><rect x="442.0" y="1171.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="445.0" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="442.0" y="1155.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="445.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="442.0" y="1139.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="445.0" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="442.0" y="1123.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="445.0" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="442.0" y="1107.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="445.0" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="442.0" y="1091.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="445.0" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="442.0" y="1075.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="445.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="442.0" y="1059.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="445.0" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onComplete (53 samples, 1.13%)</title><rect x="442.2" y="1315.0" width="13.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="445.2" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.complete (53 samples, 1.13%)</title><rect x="442.2" y="1299.0" width="13.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="445.2" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$NullSubscriber.onComplete (52 samples, 1.11%)</title><rect x="442.5" y="1283.0" width="13.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="445.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (52 samples, 1.11%)</title><rect x="442.5" y="1267.0" width="13.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="445.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (52 samples, 1.11%)</title><rect x="442.5" y="1251.0" width="13.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="445.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (52 samples, 1.11%)</title><rect x="442.5" y="1235.0" width="13.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="445.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (52 samples, 1.11%)</title><rect x="442.5" y="1219.0" width="13.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="445.5" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$337/1586705746.accept (52 samples, 1.11%)</title><rect x="442.5" y="1203.0" width="13.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="445.5" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$4 (52 samples, 1.11%)</title><rect x="442.5" y="1187.0" width="13.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="445.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (52 samples, 1.11%)</title><rect x="442.5" y="1171.0" width="13.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (52 samples, 1.11%)</title><rect x="442.5" y="1155.0" width="13.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="445.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (6 samples, 0.13%)</title><rect x="442.7" y="1139.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="445.7" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$341/1769506406.apply (6 samples, 0.13%)</title><rect x="442.7" y="1123.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="445.7" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$3 (5 samples, 0.11%)</title><rect x="443.0" y="1107.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="446.0" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpResponseImpl.&lt;init&gt; (5 samples, 0.11%)</title><rect x="443.0" y="1091.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="446.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.tryFire (1 samples, 0.02%)</title><rect x="444.2" y="1139.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="447.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (44 samples, 0.94%)</title><rect x="444.5" y="1139.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="447.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (43 samples, 0.92%)</title><rect x="444.8" y="1123.0" width="10.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="447.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (43 samples, 0.92%)</title><rect x="444.8" y="1107.0" width="10.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="447.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (38 samples, 0.81%)</title><rect x="444.8" y="1091.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="447.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalSubmit (38 samples, 0.81%)</title><rect x="444.8" y="1075.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="447.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalPush (38 samples, 0.81%)</title><rect x="444.8" y="1059.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="447.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.lockedPush (1 samples, 0.02%)</title><rect x="445.0" y="1043.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="448.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (36 samples, 0.77%)</title><rect x="445.3" y="1043.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="448.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LJJ_Z (2 samples, 0.04%)</title><rect x="445.3" y="1027.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="448.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleLongs$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="445.3" y="1011.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="448.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (34 samples, 0.73%)</title><rect x="445.8" y="1027.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="448.8" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (34 samples, 0.73%)</title><rect x="445.8" y="1011.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="448.8" y="1022.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.02%)</title><rect x="445.8" y="995.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="448.8" y="1006.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.02%)</title><rect x="446.0" y="995.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="449.0" y="1006.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="446.0" y="979.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="449.0" y="990.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (32 samples, 0.68%)</title><rect x="446.3" y="995.0" width="8.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="449.3" y="1006.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.62%)</title><rect x="447.0" y="979.0" width="7.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="450.0" y="990.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.62%)</title><rect x="447.0" y="963.0" width="7.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="450.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.58%)</title><rect x="447.5" y="947.0" width="6.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="450.5" y="958.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.58%)</title><rect x="447.5" y="931.0" width="6.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="450.5" y="942.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.58%)</title><rect x="447.5" y="915.0" width="6.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="450.5" y="926.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.53%)</title><rect x="448.0" y="899.0" width="6.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="451.0" y="910.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.49%)</title><rect x="448.5" y="883.0" width="5.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="451.5" y="894.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.49%)</title><rect x="448.5" y="867.0" width="5.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="451.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.02%)</title><rect x="454.3" y="1091.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="457.3" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$340/122266442.accept (1 samples, 0.02%)</title><rect x="454.3" y="1075.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="457.3" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (4 samples, 0.09%)</title><rect x="454.6" y="1091.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="457.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (3 samples, 0.06%)</title><rect x="454.6" y="1075.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="457.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.06%)</title><rect x="454.6" y="1059.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.02%)</title><rect x="454.8" y="1043.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="457.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.02%)</title><rect x="454.8" y="1027.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="457.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="454.8" y="1011.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="457.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="454.8" y="995.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="457.8" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$$Lambda$164/1050524402.accept (1 samples, 0.02%)</title><rect x="455.1" y="1043.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="458.1" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$$Lambda$100/762384154.getAsBoolean (1 samples, 0.02%)</title><rect x="455.3" y="1075.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="458.3" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.isSelectorThread (1 samples, 0.02%)</title><rect x="455.3" y="1059.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="458.3" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onSubscribe (3 samples, 0.06%)</title><rect x="455.6" y="1315.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="458.6" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$NullSubscriber.onSubscribe (2 samples, 0.04%)</title><rect x="455.8" y="1299.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="458.8" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.request (2 samples, 0.04%)</title><rect x="455.8" y="1283.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="458.8" y="1294.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="455.8" y="1267.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="458.8" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="456.1" y="1267.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="459.1" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="456.1" y="1251.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="459.1" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.onSubscribe (7 samples, 0.15%)</title><rect x="456.3" y="1347.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="459.3" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.request (4 samples, 0.09%)</title><rect x="457.1" y="1331.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="460.1" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.increase (1 samples, 0.02%)</title><rect x="457.9" y="1315.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="460.9" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.getAndAccumulate (1 samples, 0.02%)</title><rect x="457.9" y="1299.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="460.9" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.tryAsyncReceive (2 samples, 0.04%)</title><rect x="458.1" y="1363.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="461.1" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (1 samples, 0.02%)</title><rect x="458.4" y="1347.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="461.4" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.tryAsyncReceive (2 samples, 0.04%)</title><rect x="458.6" y="1363.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="461.6" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (2 samples, 0.04%)</title><rect x="458.6" y="1347.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="461.6" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (2 samples, 0.04%)</title><rect x="458.6" y="1331.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.6" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (2 samples, 0.04%)</title><rect x="458.6" y="1315.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="461.6" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.parse (2 samples, 0.04%)</title><rect x="458.6" y="1299.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="461.6" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.maybeStartHeaders (2 samples, 0.04%)</title><rect x="458.6" y="1283.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="461.6" y="1294.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController$$Lambda$120/1687895486.run (477 samples, 10.19%)</title><rect x="459.1" y="1475.0" width="120.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="462.1" y="1486.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController.lambda$asyncExecute$3 (477 samples, 10.19%)</title><rect x="459.1" y="1459.0" width="120.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="462.1" y="1470.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController$$Lambda$115/59933779.submit (321 samples, 6.86%)</title><rect x="459.1" y="1443.0" width="80.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="462.1" y="1454.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController.lambda$entity$2 (321 samples, 6.86%)</title><rect x="459.1" y="1427.0" width="80.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="462.1" y="1438.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/service/rest/service/EntityService.upsert (321 samples, 6.86%)</title><rect x="459.1" y="1411.0" width="80.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="462.1" y="1422.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="459.6" y="1395.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="462.6" y="1406.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="459.9" y="1379.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="462.9" y="1390.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (154 samples, 3.29%)</title><rect x="460.1" y="1395.0" width="38.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="463.1" y="1406.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/service/rest/service/EntityService$$Lambda$131/1648498957.accept (154 samples, 3.29%)</title><rect x="460.1" y="1379.0" width="38.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="463.1" y="1390.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/rest/service/EntityService.lambda$upsert$3 (154 samples, 3.29%)</title><rect x="460.1" y="1363.0" width="38.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="463.1" y="1374.0">ru/..</text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.04%)</title><rect x="460.4" y="1347.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="463.4" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.add (5 samples, 0.11%)</title><rect x="460.9" y="1347.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="463.9" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (5 samples, 0.11%)</title><rect x="460.9" y="1331.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="463.9" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.06%)</title><rect x="461.1" y="1315.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="464.1" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.weakCompareAndSet (3 samples, 0.06%)</title><rect x="461.1" y="1299.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="464.1" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.weakCompareAndSetObject (1 samples, 0.02%)</title><rect x="461.4" y="1283.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="464.4" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.PUT (1 samples, 0.02%)</title><rect x="461.6" y="1283.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="464.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.&lt;init&gt; (1 samples, 0.02%)</title><rect x="461.9" y="1315.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="464.9" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.02%)</title><rect x="461.9" y="1299.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="464.9" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.02%)</title><rect x="461.9" y="1283.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="464.9" y="1294.0"></text>
</g>
<g>
<title>ru/mail/polis/client/AsyncHttpClientImpl.upsert (128 samples, 2.73%)</title><rect x="462.1" y="1347.0" width="32.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="465.1" y="1358.0">ru..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.build (8 samples, 0.17%)</title><rect x="462.1" y="1331.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="465.1" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ImmutableHttpRequest.&lt;init&gt; (7 samples, 0.15%)</title><rect x="462.4" y="1315.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="465.4" y="1326.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (7 samples, 0.15%)</title><rect x="462.4" y="1299.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="465.4" y="1310.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (7 samples, 0.15%)</title><rect x="462.4" y="1283.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="465.4" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="462.4" y="1267.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="465.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="462.4" y="1251.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="465.4" y="1262.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$137/1564001392.get$Lambda (1 samples, 0.02%)</title><rect x="462.4" y="1235.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="465.4" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableMap (1 samples, 0.02%)</title><rect x="462.6" y="1267.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="465.6" y="1278.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (5 samples, 0.11%)</title><rect x="462.9" y="1267.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="465.9" y="1278.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$137/1564001392.accept (5 samples, 0.11%)</title><rect x="462.9" y="1251.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="465.9" y="1262.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (5 samples, 0.11%)</title><rect x="462.9" y="1235.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="465.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.trim (2 samples, 0.04%)</title><rect x="462.9" y="1219.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="465.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (2 samples, 0.04%)</title><rect x="462.9" y="1203.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="463.1" y="1187.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="466.1" y="1198.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="463.1" y="1171.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="466.1" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$63/1016363973.test (1 samples, 0.02%)</title><rect x="463.1" y="1155.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="466.1" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (3 samples, 0.06%)</title><rect x="463.4" y="1219.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.4" y="1230.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$145/1493650191.accept (2 samples, 0.04%)</title><rect x="463.7" y="1203.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="466.7" y="1214.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (2 samples, 0.04%)</title><rect x="463.7" y="1187.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="466.7" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$63/1016363973.test (2 samples, 0.04%)</title><rect x="463.7" y="1171.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="466.7" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$1 (2 samples, 0.04%)</title><rect x="463.7" y="1155.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="466.7" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (2 samples, 0.04%)</title><rect x="463.7" y="1139.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="466.7" y="1150.0"></text>
</g>
<g>
<title>java/util/TreeSet.contains (2 samples, 0.04%)</title><rect x="463.7" y="1123.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="466.7" y="1134.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (2 samples, 0.04%)</title><rect x="463.7" y="1107.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.7" y="1118.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (2 samples, 0.04%)</title><rect x="463.7" y="1091.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="466.7" y="1102.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (2 samples, 0.04%)</title><rect x="463.7" y="1075.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="466.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.04%)</title><rect x="463.7" y="1059.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="466.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.04%)</title><rect x="463.7" y="1043.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="466.7" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/client/AsyncHttpClientImpl.builder (31 samples, 0.66%)</title><rect x="464.2" y="1331.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="467.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (6 samples, 0.13%)</title><rect x="464.2" y="1315.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="467.2" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (6 samples, 0.13%)</title><rect x="464.2" y="1299.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="467.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/452805835.invoke (6 samples, 0.13%)</title><rect x="464.2" y="1283.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="467.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (6 samples, 0.13%)</title><rect x="464.2" y="1267.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="467.2" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="464.2" y="1251.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="467.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixCoder (1 samples, 0.02%)</title><rect x="464.4" y="1251.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="467.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (3 samples, 0.06%)</title><rect x="464.7" y="1251.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="467.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.02%)</title><rect x="464.7" y="1235.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="467.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="464.9" y="1235.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="467.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="465.2" y="1219.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="468.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.02%)</title><rect x="465.4" y="1251.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="468.4" y="1262.0"></text>
</g>
<g>
<title>java/net/URI.create (20 samples, 0.43%)</title><rect x="465.7" y="1315.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="468.7" y="1326.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (19 samples, 0.41%)</title><rect x="465.9" y="1299.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="468.9" y="1310.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (18 samples, 0.38%)</title><rect x="466.2" y="1283.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.2" y="1294.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChar (3 samples, 0.06%)</title><rect x="466.9" y="1267.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="469.9" y="1278.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (3 samples, 0.06%)</title><rect x="466.9" y="1251.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="469.9" y="1262.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (3 samples, 0.06%)</title><rect x="466.9" y="1235.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="469.9" y="1246.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (1 samples, 0.02%)</title><rect x="467.7" y="1267.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="470.7" y="1278.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (1 samples, 0.02%)</title><rect x="467.7" y="1251.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="470.7" y="1262.0"></text>
</g>
<g>
<title>java/net/URI.match (1 samples, 0.02%)</title><rect x="467.7" y="1235.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="470.7" y="1246.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (11 samples, 0.23%)</title><rect x="467.9" y="1267.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="470.9" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="468.4" y="1251.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="471.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="468.4" y="1235.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="471.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="468.4" y="1219.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="471.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="468.4" y="1203.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.4" y="1214.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.02%)</title><rect x="468.4" y="1187.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="471.4" y="1198.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (7 samples, 0.15%)</title><rect x="468.7" y="1251.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="471.7" y="1262.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (5 samples, 0.11%)</title><rect x="468.9" y="1235.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="471.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.04%)</title><rect x="469.2" y="1219.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="472.2" y="1230.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (1 samples, 0.02%)</title><rect x="469.7" y="1219.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="472.7" y="1230.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (1 samples, 0.02%)</title><rect x="469.7" y="1203.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="472.7" y="1214.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (1 samples, 0.02%)</title><rect x="470.0" y="1219.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="473.0" y="1230.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (1 samples, 0.02%)</title><rect x="470.2" y="1235.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="473.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="470.2" y="1219.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="473.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.02%)</title><rect x="470.2" y="1203.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="473.2" y="1214.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (1 samples, 0.02%)</title><rect x="470.5" y="1251.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="473.5" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.header (5 samples, 0.11%)</title><rect x="470.7" y="1315.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="473.7" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.header (5 samples, 0.11%)</title><rect x="470.7" y="1299.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="473.7" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.checkNameAndValue (1 samples, 0.02%)</title><rect x="470.7" y="1283.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="473.7" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$63/1016363973.test (1 samples, 0.02%)</title><rect x="470.7" y="1267.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="473.7" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$1 (1 samples, 0.02%)</title><rect x="470.7" y="1251.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="473.7" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.02%)</title><rect x="470.7" y="1235.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="473.7" y="1246.0"></text>
</g>
<g>
<title>java/util/TreeSet.contains (1 samples, 0.02%)</title><rect x="470.7" y="1219.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="473.7" y="1230.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (1 samples, 0.02%)</title><rect x="470.7" y="1203.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="473.7" y="1214.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.02%)</title><rect x="470.7" y="1187.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="473.7" y="1198.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.02%)</title><rect x="470.7" y="1171.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="473.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="470.7" y="1155.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="473.7" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.addHeader (4 samples, 0.09%)</title><rect x="471.0" y="1283.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="474.0" y="1294.0"></text>
</g>
<g>
<title>java/util/Map.computeIfAbsent (4 samples, 0.09%)</title><rect x="471.0" y="1267.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="474.0" y="1278.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (2 samples, 0.04%)</title><rect x="471.2" y="1251.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="474.2" y="1262.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (2 samples, 0.04%)</title><rect x="471.2" y="1235.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="474.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.04%)</title><rect x="471.2" y="1219.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="474.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.04%)</title><rect x="471.2" y="1203.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="474.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (2 samples, 0.04%)</title><rect x="471.2" y="1187.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="474.2" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder$$Lambda$135/1156412280.apply (1 samples, 0.02%)</title><rect x="471.7" y="1251.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="474.7" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/client/AsyncHttpClientImpl.sendAsyncRequest (89 samples, 1.90%)</title><rect x="472.0" y="1331.0" width="22.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="475.0" y="1342.0">r..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientFacade.sendAsync (89 samples, 1.90%)</title><rect x="472.0" y="1315.0" width="22.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="475.0" y="1326.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (89 samples, 1.90%)</title><rect x="472.0" y="1299.0" width="22.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="475.0" y="1310.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (89 samples, 1.90%)</title><rect x="472.0" y="1283.0" width="22.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="475.0" y="1294.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (89 samples, 1.90%)</title><rect x="472.0" y="1267.0" width="22.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="475.0" y="1278.0">j..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="472.2" y="1251.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="475.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.02%)</title><rect x="472.5" y="1251.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="475.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="472.5" y="1235.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="475.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.02%)</title><rect x="472.7" y="1251.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="475.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.02%)</title><rect x="473.0" y="1251.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="476.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenCompleteAsync (1 samples, 0.02%)</title><rect x="473.2" y="1251.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="476.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.screenExecutor (1 samples, 0.02%)</title><rect x="473.2" y="1235.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="476.2" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.&lt;init&gt; (51 samples, 1.09%)</title><rect x="473.5" y="1251.0" width="12.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="476.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (1 samples, 0.02%)</title><rect x="474.0" y="1235.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="477.0" y="1246.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (12 samples, 0.26%)</title><rect x="474.2" y="1235.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="477.2" y="1246.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (3 samples, 0.06%)</title><rect x="474.2" y="1219.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="477.2" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.06%)</title><rect x="474.2" y="1203.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="477.2" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.04%)</title><rect x="474.2" y="1187.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="477.2" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="474.2" y="1171.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="477.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.02%)</title><rect x="474.2" y="1155.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="477.2" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.02%)</title><rect x="474.5" y="1171.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="477.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.02%)</title><rect x="474.5" y="1155.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="477.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.02%)</title><rect x="474.5" y="1139.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="477.5" y="1150.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (1 samples, 0.02%)</title><rect x="474.7" y="1187.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="477.7" y="1198.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.02%)</title><rect x="474.7" y="1171.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="477.7" y="1182.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.02%)</title><rect x="474.7" y="1155.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="477.7" y="1166.0"></text>
</g>
<g>
<title>java/util/Collection.stream (4 samples, 0.09%)</title><rect x="475.0" y="1219.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="478.0" y="1230.0"></text>
</g>
<g>
<title>java/util/List.spliterator (2 samples, 0.04%)</title><rect x="475.0" y="1203.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="478.0" y="1214.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="475.2" y="1187.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="478.2" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.04%)</title><rect x="475.5" y="1203.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="478.5" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (1 samples, 0.02%)</title><rect x="475.7" y="1187.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (1 samples, 0.02%)</title><rect x="475.7" y="1171.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="478.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.02%)</title><rect x="475.7" y="1155.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="478.7" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="475.7" y="1139.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="478.7" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="475.7" y="1123.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="478.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="475.7" y="1107.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="478.7" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (5 samples, 0.11%)</title><rect x="476.0" y="1219.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="479.0" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (5 samples, 0.11%)</title><rect x="476.0" y="1203.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="479.0" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.sourceSpliterator (1 samples, 0.02%)</title><rect x="476.3" y="1187.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="479.3" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (3 samples, 0.06%)</title><rect x="476.5" y="1187.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="479.5" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.06%)</title><rect x="476.5" y="1171.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="479.5" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.04%)</title><rect x="476.8" y="1155.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="479.8" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.02%)</title><rect x="477.0" y="1139.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="480.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.02%)</title><rect x="477.0" y="1123.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.0" y="1134.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.estimateSize (1 samples, 0.02%)</title><rect x="477.0" y="1107.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="480.0" y="1118.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.getFence (1 samples, 0.02%)</title><rect x="477.0" y="1091.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="480.0" y="1102.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (8 samples, 0.17%)</title><rect x="477.3" y="1235.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="480.3" y="1246.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (8 samples, 0.17%)</title><rect x="477.3" y="1219.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="480.3" y="1230.0"></text>
</g>
<g>
<title>java/util/AbstractMap.isEmpty (1 samples, 0.02%)</title><rect x="477.3" y="1203.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.3" y="1214.0"></text>
</g>
<g>
<title>java/util/TreeMap.size (1 samples, 0.02%)</title><rect x="477.3" y="1187.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.3" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.forEach (1 samples, 0.02%)</title><rect x="477.3" y="1171.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.3" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.forEach (7 samples, 0.15%)</title><rect x="477.5" y="1203.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="480.5" y="1214.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (7 samples, 0.15%)</title><rect x="477.5" y="1187.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.5" y="1198.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$137/1564001392.accept (7 samples, 0.15%)</title><rect x="477.5" y="1171.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.5" y="1182.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (7 samples, 0.15%)</title><rect x="477.5" y="1155.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="480.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (7 samples, 0.15%)</title><rect x="477.5" y="1139.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="480.5" y="1150.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$145/1493650191.accept (6 samples, 0.13%)</title><rect x="477.5" y="1123.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.5" y="1134.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (6 samples, 0.13%)</title><rect x="477.5" y="1107.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="480.5" y="1118.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="477.5" y="1091.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="480.5" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$64/1620948027.test (5 samples, 0.11%)</title><rect x="477.8" y="1091.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.8" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$2 (5 samples, 0.11%)</title><rect x="477.8" y="1075.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="480.8" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$63/1016363973.test (3 samples, 0.06%)</title><rect x="477.8" y="1059.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="480.8" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$1 (3 samples, 0.06%)</title><rect x="477.8" y="1043.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="480.8" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (3 samples, 0.06%)</title><rect x="477.8" y="1027.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="480.8" y="1038.0"></text>
</g>
<g>
<title>java/util/TreeSet.contains (2 samples, 0.04%)</title><rect x="478.0" y="1011.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="481.0" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (2 samples, 0.04%)</title><rect x="478.0" y="995.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="481.0" y="1006.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.02%)</title><rect x="478.3" y="979.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="481.3" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.02%)</title><rect x="478.3" y="963.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="481.3" y="974.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="478.3" y="947.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="481.3" y="958.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="478.3" y="931.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="481.3" y="942.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.02%)</title><rect x="478.3" y="915.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="481.3" y="926.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.02%)</title><rect x="478.3" y="899.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="481.3" y="910.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.02%)</title><rect x="478.3" y="883.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="481.3" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.isValidName (1 samples, 0.02%)</title><rect x="478.5" y="1059.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="481.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="478.5" y="1043.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="481.5" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.isValidValue (1 samples, 0.02%)</title><rect x="478.8" y="1059.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="481.8" y="1070.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$ListItr.hasNext (1 samples, 0.02%)</title><rect x="479.0" y="1123.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="482.0" y="1134.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.02%)</title><rect x="479.3" y="1235.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="482.3" y="1246.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.02%)</title><rect x="479.5" y="1235.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="482.5" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.checkURI (2 samples, 0.04%)</title><rect x="479.8" y="1235.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="482.8" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.04%)</title><rect x="479.8" y="1219.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="482.8" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.retrieveProxy (23 samples, 0.49%)</title><rect x="480.3" y="1235.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="483.3" y="1246.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector.select (22 samples, 0.47%)</title><rect x="480.5" y="1219.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="483.5" y="1230.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (21 samples, 0.45%)</title><rect x="480.8" y="1203.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="483.8" y="1214.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (11 samples, 0.23%)</title><rect x="480.8" y="1187.0" width="2.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="483.8" y="1198.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.02%)</title><rect x="481.0" y="1171.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="484.0" y="1182.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.09%)</title><rect x="481.3" y="1171.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="484.3" y="1182.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.02%)</title><rect x="481.5" y="1155.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="484.5" y="1166.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.02%)</title><rect x="481.8" y="1155.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="484.8" y="1166.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.02%)</title><rect x="481.8" y="1139.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="484.8" y="1150.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="482.1" y="1155.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="485.1" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.02%)</title><rect x="482.3" y="1171.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="485.3" y="1182.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool) (2 samples, 0.04%)</title><rect x="482.6" y="1171.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="485.6" y="1182.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.02%)</title><rect x="482.8" y="1155.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="485.8" y="1166.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (2 samples, 0.04%)</title><rect x="483.1" y="1171.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="486.1" y="1182.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (2 samples, 0.04%)</title><rect x="483.1" y="1155.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="486.1" y="1166.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.02%)</title><rect x="483.3" y="1139.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="486.3" y="1150.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.02%)</title><rect x="483.6" y="1187.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="486.6" y="1198.0"></text>
</g>
<g>
<title>Method::is_method() const volatile (1 samples, 0.02%)</title><rect x="483.8" y="1187.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="486.8" y="1198.0"></text>
</g>
<g>
<title>call_stub (2 samples, 0.04%)</title><rect x="484.1" y="1187.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="487.1" y="1198.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector$4.run (6 samples, 0.13%)</title><rect x="484.6" y="1187.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="487.6" y="1198.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector$4.run (6 samples, 0.13%)</title><rect x="484.6" y="1171.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="487.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.02%)</title><rect x="484.6" y="1155.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="487.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.02%)</title><rect x="484.6" y="1139.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="487.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.02%)</title><rect x="484.6" y="1123.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="487.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.02%)</title><rect x="484.6" y="1107.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="487.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.02%)</title><rect x="484.6" y="1091.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="487.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.02%)</title><rect x="484.6" y="1075.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="487.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.06%)</title><rect x="484.8" y="1155.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="487.8" y="1166.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.06%)</title><rect x="484.8" y="1139.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="487.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.02%)</title><rect x="484.8" y="1123.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="487.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 0.04%)</title><rect x="485.1" y="1123.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="488.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.02%)</title><rect x="485.3" y="1107.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.3" y="1118.0"></text>
</g>
<g>
<title>sun/net/NetProperties.get (2 samples, 0.04%)</title><rect x="485.6" y="1155.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="488.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/System.getProperty (1 samples, 0.02%)</title><rect x="485.8" y="1139.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="488.8" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ImmutableHttpRequest.bodyPublisher (1 samples, 0.02%)</title><rect x="486.1" y="1235.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="489.1" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.&lt;init&gt; (9 samples, 0.19%)</title><rect x="486.3" y="1251.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="489.3" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.&lt;init&gt; (2 samples, 0.04%)</title><rect x="486.3" y="1235.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="489.3" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getDebugLogger (1 samples, 0.02%)</title><rect x="486.6" y="1219.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="489.6" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getDebugLogger (1 samples, 0.02%)</title><rect x="486.6" y="1203.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="489.6" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/DebugLogger.createHttpLogger (1 samples, 0.02%)</title><rect x="486.6" y="1187.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="489.6" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/DebugLogger.levelEnabledFor (1 samples, 0.02%)</title><rect x="486.6" y="1171.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="489.6" y="1182.0"></text>
</g>
<g>
<title>sun/util/logging/internal/LoggingProviderImpl$JULWrapper.isLoggable (1 samples, 0.02%)</title><rect x="486.6" y="1155.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="489.6" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.filterChain (7 samples, 0.15%)</title><rect x="486.8" y="1235.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="489.8" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/FilterFactory.getFilterChain (7 samples, 0.15%)</title><rect x="486.8" y="1219.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="489.8" y="1230.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.11%)</title><rect x="487.1" y="1203.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="490.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.checkAccess (3 samples, 0.06%)</title><rect x="487.1" y="1187.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="490.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.verifyAccess (3 samples, 0.06%)</title><rect x="487.1" y="1171.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.slowVerifyAccess (2 samples, 0.04%)</title><rect x="487.3" y="1155.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.3" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/reflect/Reflection.verifyMemberAccess (2 samples, 0.04%)</title><rect x="487.3" y="1139.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="490.3" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/reflect/Reflection.isSameClassPackage (2 samples, 0.04%)</title><rect x="487.3" y="1123.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="490.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/Class.getPackageName (2 samples, 0.04%)</title><rect x="487.3" y="1107.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="490.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="487.3" y="1091.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="487.3" y="1075.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="490.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.04%)</title><rect x="487.3" y="1059.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="490.3" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.02%)</title><rect x="487.8" y="1187.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.8" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor8.newInstance (1 samples, 0.02%)</title><rect x="487.8" y="1171.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="490.8" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="487.8" y="1155.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="490.8" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="487.8" y="1139.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="490.8" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="487.8" y="1123.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="490.8" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="487.8" y="1107.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="490.8" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="487.8" y="1091.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="490.8" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="487.8" y="1075.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="490.8" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/reflect/Reflection.getCallerClass (1 samples, 0.02%)</title><rect x="488.1" y="1187.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="491.1" y="1198.0"></text>
</g>
<g>
<title>JVM_GetCallerClass (1 samples, 0.02%)</title><rect x="488.1" y="1171.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="491.1" y="1182.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (1 samples, 0.02%)</title><rect x="488.1" y="1155.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="491.1" y="1166.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="488.1" y="1139.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="491.1" y="1150.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="488.1" y="1123.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="491.1" y="1134.0"></text>
</g>
<g>
<title>java/util/AbstractSequentialList.iterator (1 samples, 0.02%)</title><rect x="488.4" y="1203.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="491.4" y="1214.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (1 samples, 0.02%)</title><rect x="488.4" y="1187.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="491.4" y="1198.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (1 samples, 0.02%)</title><rect x="488.4" y="1171.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.4" y="1182.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.&lt;init&gt; (1 samples, 0.02%)</title><rect x="488.4" y="1155.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="491.4" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsync (23 samples, 0.49%)</title><rect x="488.6" y="1251.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="491.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (23 samples, 0.49%)</title><rect x="488.6" y="1235.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="491.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (22 samples, 0.47%)</title><rect x="488.9" y="1219.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="491.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.offer (21 samples, 0.45%)</title><rect x="488.9" y="1203.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="491.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (21 samples, 0.45%)</title><rect x="488.9" y="1187.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="491.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack$SNode.tryMatch (20 samples, 0.43%)</title><rect x="489.1" y="1171.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="492.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 0.38%)</title><rect x="489.6" y="1155.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="492.6" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (18 samples, 0.38%)</title><rect x="489.6" y="1139.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="492.6" y="1150.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.06%)</title><rect x="489.9" y="1123.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="492.9" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.02%)</title><rect x="490.1" y="1107.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="493.1" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.02%)</title><rect x="490.4" y="1107.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="493.4" y="1118.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (14 samples, 0.30%)</title><rect x="490.6" y="1123.0" width="3.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="493.6" y="1134.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.23%)</title><rect x="491.4" y="1107.0" width="2.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="494.4" y="1118.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.23%)</title><rect x="491.4" y="1091.0" width="2.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="494.4" y="1102.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.21%)</title><rect x="491.6" y="1075.0" width="2.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="494.6" y="1086.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.21%)</title><rect x="491.6" y="1059.0" width="2.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="494.6" y="1070.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.21%)</title><rect x="491.6" y="1043.0" width="2.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="494.6" y="1054.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="491.9" y="1027.0" width="2.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="494.9" y="1038.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="491.9" y="1011.0" width="2.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="494.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="492.1" y="995.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="495.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.addWorker (1 samples, 0.02%)</title><rect x="494.1" y="1203.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="497.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.start (1 samples, 0.02%)</title><rect x="494.1" y="1187.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="497.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/Thread.start0 (1 samples, 0.02%)</title><rect x="494.1" y="1171.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="497.1" y="1182.0"></text>
</g>
<g>
<title>JVM_StartThread (1 samples, 0.02%)</title><rect x="494.1" y="1155.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="497.1" y="1166.0"></text>
</g>
<g>
<title>JavaThread::JavaThread(void (*)(JavaThread*, Thread*), unsigned long) (1 samples, 0.02%)</title><rect x="494.1" y="1139.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="497.1" y="1150.0"></text>
</g>
<g>
<title>Thread::Thread() (1 samples, 0.02%)</title><rect x="494.1" y="1123.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="497.1" y="1134.0"></text>
</g>
<g>
<title>Arena::Arena(MemoryType) (1 samples, 0.02%)</title><rect x="494.1" y="1107.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="497.1" y="1118.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="494.1" y="1091.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="497.1" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.02%)</title><rect x="494.1" y="1075.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="497.1" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/service/EntityService.handleLocal (11 samples, 0.23%)</title><rect x="494.4" y="1347.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="497.4" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.runAsync (11 samples, 0.23%)</title><rect x="494.4" y="1331.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="497.4" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.asyncRunStage (11 samples, 0.23%)</title><rect x="494.4" y="1315.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="497.4" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (11 samples, 0.23%)</title><rect x="494.4" y="1299.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="497.4" y="1310.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="494.4" y="1283.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="497.4" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (9 samples, 0.19%)</title><rect x="494.7" y="1283.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="497.7" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (6 samples, 0.13%)</title><rect x="494.9" y="1267.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="497.9" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.04%)</title><rect x="494.9" y="1251.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="497.9" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.04%)</title><rect x="494.9" y="1235.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="497.9" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.04%)</title><rect x="494.9" y="1219.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="497.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (1 samples, 0.02%)</title><rect x="495.2" y="1203.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="498.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="495.2" y="1187.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="498.2" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="495.2" y="1171.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="498.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.02%)</title><rect x="495.2" y="1155.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="498.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.09%)</title><rect x="495.4" y="1251.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.4" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.09%)</title><rect x="495.4" y="1235.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="498.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.09%)</title><rect x="495.4" y="1219.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="498.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.09%)</title><rect x="495.4" y="1203.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="498.4" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.09%)</title><rect x="495.4" y="1187.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="498.4" y="1198.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (4 samples, 0.09%)</title><rect x="495.4" y="1171.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="498.4" y="1182.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="495.4" y="1155.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="498.4" y="1166.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="495.4" y="1139.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="498.4" y="1150.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="495.4" y="1123.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="498.4" y="1134.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="495.4" y="1107.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="498.4" y="1118.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="495.4" y="1091.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="498.4" y="1102.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="495.4" y="1075.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="498.4" y="1086.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="495.4" y="1059.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="498.4" y="1070.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="495.4" y="1043.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="498.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.02%)</title><rect x="496.4" y="1267.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="499.4" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.02%)</title><rect x="496.4" y="1251.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="499.4" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.02%)</title><rect x="496.4" y="1235.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="499.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.02%)</title><rect x="496.4" y="1219.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="499.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.02%)</title><rect x="496.4" y="1203.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="499.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="496.4" y="1187.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="499.4" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="496.4" y="1171.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="499.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="496.7" y="1267.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="499.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="496.7" y="1251.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="499.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="496.7" y="1235.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="499.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="496.7" y="1219.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="499.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="496.7" y="1203.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="499.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.02%)</title><rect x="496.7" y="1187.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="499.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.addWorker (1 samples, 0.02%)</title><rect x="496.9" y="1283.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="499.9" y="1294.0"></text>
</g>
<g>
<title>java/lang/Thread.start (1 samples, 0.02%)</title><rect x="496.9" y="1267.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="499.9" y="1278.0"></text>
</g>
<g>
<title>java/lang/Thread.start0 (1 samples, 0.02%)</title><rect x="496.9" y="1251.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="499.9" y="1262.0"></text>
</g>
<g>
<title>JVM_StartThread (1 samples, 0.02%)</title><rect x="496.9" y="1235.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="499.9" y="1246.0"></text>
</g>
<g>
<title>os::create_thread(Thread*, os::ThreadType, unsigned long) (1 samples, 0.02%)</title><rect x="496.9" y="1219.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="499.9" y="1230.0"></text>
</g>
<g>
<title>clone (1 samples, 0.02%)</title><rect x="496.9" y="1203.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="499.9" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="496.9" y="1187.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="499.9" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="496.9" y="1171.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="499.9" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="496.9" y="1155.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="499.9" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="496.9" y="1139.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="499.9" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="496.9" y="1123.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="499.9" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="496.9" y="1107.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="499.9" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/service/topology/ConsistentHashTopology.isMe (5 samples, 0.11%)</title><rect x="497.2" y="1347.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="500.2" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/service/topology/ConsistentHashTopology.isMe (5 samples, 0.11%)</title><rect x="497.2" y="1331.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="500.2" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/service/topology/node/ServiceNode.key (5 samples, 0.11%)</title><rect x="497.2" y="1315.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="500.2" y="1326.0"></text>
</g>
<g>
<title>java/net/URL.toString (5 samples, 0.11%)</title><rect x="497.2" y="1299.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="500.2" y="1310.0"></text>
</g>
<g>
<title>java/net/URL.toExternalForm (5 samples, 0.11%)</title><rect x="497.2" y="1283.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="500.2" y="1294.0"></text>
</g>
<g>
<title>java/net/URLStreamHandler.toExternalForm (5 samples, 0.11%)</title><rect x="497.2" y="1267.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="500.2" y="1278.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.06%)</title><rect x="497.4" y="1251.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="500.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.04%)</title><rect x="497.7" y="1235.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="500.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="497.9" y="1219.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="500.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.02%)</title><rect x="498.2" y="1251.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="501.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="498.2" y="1235.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="501.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="498.2" y="1219.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="501.2" y="1230.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="498.2" y="1203.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="501.2" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/service/topology/node/ServiceNode.key (2 samples, 0.04%)</title><rect x="498.4" y="1347.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="501.4" y="1358.0"></text>
</g>
<g>
<title>java/net/URL.toString (2 samples, 0.04%)</title><rect x="498.4" y="1331.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="501.4" y="1342.0"></text>
</g>
<g>
<title>java/net/URL.toExternalForm (2 samples, 0.04%)</title><rect x="498.4" y="1315.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="501.4" y="1326.0"></text>
</g>
<g>
<title>java/net/URLStreamHandler.toExternalForm (2 samples, 0.04%)</title><rect x="498.4" y="1299.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="501.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.04%)</title><rect x="498.4" y="1283.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="501.4" y="1294.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.04%)</title><rect x="498.4" y="1267.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="501.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.02%)</title><rect x="498.4" y="1251.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="501.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (1 samples, 0.02%)</title><rect x="498.7" y="1251.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="501.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.&lt;init&gt; (1 samples, 0.02%)</title><rect x="498.9" y="1395.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="501.9" y="1406.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.02%)</title><rect x="499.2" y="1395.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="502.2" y="1406.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/LSMDao.upsert (32 samples, 0.68%)</title><rect x="499.4" y="1395.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="502.4" y="1406.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/table/MemoryTablePool.upsert (32 samples, 0.68%)</title><rect x="499.4" y="1379.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="502.4" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (3 samples, 0.06%)</title><rect x="499.4" y="1363.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="502.4" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (3 samples, 0.06%)</title><rect x="499.4" y="1347.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="502.4" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (3 samples, 0.06%)</title><rect x="499.4" y="1331.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="502.4" y="1342.0"></text>
</g>
<g>
<title>java/lang/Thread.currentThread (1 samples, 0.02%)</title><rect x="499.4" y="1315.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="502.4" y="1326.0"></text>
</g>
<g>
<title>JVM_CurrentThread (1 samples, 0.02%)</title><rect x="499.4" y="1299.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="502.4" y="1310.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.02%)</title><rect x="499.4" y="1283.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="502.4" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="499.7" y="1315.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="502.7" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="499.9" y="1299.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="502.9" y="1310.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/storage/table/MemTable.upsert (29 samples, 0.62%)</title><rect x="500.2" y="1363.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="503.2" y="1374.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.02%)</title><rect x="500.2" y="1347.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="503.2" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (1 samples, 0.02%)</title><rect x="500.2" y="1331.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="503.2" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="500.2" y="1315.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="503.2" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="500.2" y="1299.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="503.2" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="500.2" y="1283.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="503.2" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="500.2" y="1267.0" width="0.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="503.2" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="500.2" y="1251.0" width="0.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="503.2" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="500.2" y="1235.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="503.2" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="500.2" y="1219.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="503.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (28 samples, 0.60%)</title><rect x="500.4" y="1347.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="503.4" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (28 samples, 0.60%)</title><rect x="500.4" y="1331.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="503.4" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.04%)</title><rect x="501.0" y="1315.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="504.0" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="501.0" y="1299.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="504.0" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.04%)</title><rect x="501.5" y="1315.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="504.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (22 samples, 0.47%)</title><rect x="502.0" y="1315.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="505.0" y="1326.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (22 samples, 0.47%)</title><rect x="502.0" y="1299.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="505.0" y="1310.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (22 samples, 0.47%)</title><rect x="502.0" y="1283.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="505.0" y="1294.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="502.2" y="1267.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="505.2" y="1278.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (20 samples, 0.43%)</title><rect x="502.5" y="1267.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="505.5" y="1278.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (19 samples, 0.41%)</title><rect x="502.7" y="1251.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="505.7" y="1262.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (16 samples, 0.34%)</title><rect x="503.2" y="1235.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="506.2" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="507.0" y="1219.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="510.0" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="507.0" y="1203.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="510.0" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="507.0" y="1187.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="510.0" y="1198.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.02%)</title><rect x="507.3" y="1235.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="510.3" y="1246.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/service/EntityService.fromCompletableFuture (28 samples, 0.60%)</title><rect x="507.5" y="1395.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="510.5" y="1406.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.error (1 samples, 0.02%)</title><rect x="507.5" y="1379.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="510.5" y="1390.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.02%)</title><rect x="507.5" y="1363.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="510.5" y="1374.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.02%)</title><rect x="507.5" y="1347.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="510.5" y="1358.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.&lt;init&gt; (1 samples, 0.02%)</title><rect x="507.5" y="1331.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="510.5" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.get (27 samples, 0.58%)</title><rect x="507.8" y="1379.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="510.8" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.timedGet (27 samples, 0.58%)</title><rect x="507.8" y="1363.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.8" y="1374.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.02%)</title><rect x="508.8" y="1347.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="511.8" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.tryPushStack (1 samples, 0.02%)</title><rect x="509.0" y="1347.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="512.0" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.02%)</title><rect x="509.0" y="1331.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.0" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.02%)</title><rect x="509.0" y="1315.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="512.0" y="1326.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.02%)</title><rect x="509.0" y="1299.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="512.0" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.managedBlock (21 samples, 0.45%)</title><rect x="509.3" y="1347.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="512.3" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Signaller.block (20 samples, 0.43%)</title><rect x="509.3" y="1331.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="512.3" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Signaller.isReleasable (2 samples, 0.04%)</title><rect x="509.3" y="1315.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="512.3" y="1326.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.02%)</title><rect x="509.5" y="1299.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="512.5" y="1310.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.02%)</title><rect x="509.5" y="1283.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="512.5" y="1294.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.02%)</title><rect x="509.5" y="1267.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="512.5" y="1278.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="509.5" y="1251.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="512.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.parkNanos (18 samples, 0.38%)</title><rect x="509.8" y="1315.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="512.8" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (18 samples, 0.38%)</title><rect x="509.8" y="1299.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="512.8" y="1310.0"></text>
</g>
<g>
<title>Unsafe_Park (7 samples, 0.15%)</title><rect x="509.8" y="1283.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="512.8" y="1294.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="509.8" y="1267.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="512.8" y="1278.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="509.8" y="1251.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="512.8" y="1262.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.02%)</title><rect x="510.0" y="1267.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="513.0" y="1278.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.09%)</title><rect x="510.3" y="1267.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="513.3" y="1278.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="510.8" y="1251.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="513.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="510.8" y="1235.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="513.8" y="1246.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="510.8" y="1219.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="513.8" y="1230.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="510.8" y="1203.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="513.8" y="1214.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="510.8" y="1187.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="513.8" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="511.3" y="1267.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="514.3" y="1278.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 0.23%)</title><rect x="511.5" y="1283.0" width="2.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="514.5" y="1294.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="512.5" y="1267.0" width="1.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="515.5" y="1278.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="512.5" y="1251.0" width="1.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="515.5" y="1262.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="512.8" y="1235.0" width="1.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="515.8" y="1246.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="513.0" y="1219.0" width="1.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="516.0" y="1230.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="513.0" y="1203.0" width="1.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="516.0" y="1214.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="513.3" y="1187.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="516.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="513.3" y="1171.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="516.3" y="1182.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="513.6" y="1155.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="516.6" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="514.1" y="1139.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="517.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Signaller.isReleasable (1 samples, 0.02%)</title><rect x="514.3" y="1331.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="517.3" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/service/EntityService.responseFuture (25 samples, 0.53%)</title><rect x="514.6" y="1395.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="517.6" y="1406.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="515.1" y="1379.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="518.1" y="1390.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="515.3" y="1379.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="518.3" y="1390.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="515.6" y="1379.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="518.6" y="1390.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (1 samples, 0.02%)</title><rect x="515.8" y="1379.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="518.8" y="1390.0"></text>
</g>
<g>
<title>java/util/RegularEnumSet.contains (1 samples, 0.02%)</title><rect x="516.1" y="1379.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="519.1" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.02%)</title><rect x="516.3" y="1379.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="519.3" y="1390.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="516.6" y="1379.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="519.6" y="1390.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/FutureUtils.collapseFutures (16 samples, 0.34%)</title><rect x="516.8" y="1379.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="519.8" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.forEach (16 samples, 0.34%)</title><rect x="516.8" y="1363.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="519.8" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.forEachFrom (16 samples, 0.34%)</title><rect x="516.8" y="1347.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.8" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/FutureUtils$$Lambda$168/674464149.accept (16 samples, 0.34%)</title><rect x="516.8" y="1331.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="519.8" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/FutureUtils.lambda$collapseFutures$2 (15 samples, 0.32%)</title><rect x="517.1" y="1315.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="520.1" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.exceptionally (1 samples, 0.02%)</title><rect x="517.1" y="1299.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="520.1" y="1310.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.02%)</title><rect x="517.1" y="1283.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="520.1" y="1294.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.02%)</title><rect x="517.1" y="1267.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="520.1" y="1278.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.02%)</title><rect x="517.1" y="1251.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="520.1" y="1262.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.02%)</title><rect x="517.1" y="1235.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="520.1" y="1246.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="517.1" y="1219.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="520.1" y="1230.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.02%)</title><rect x="517.1" y="1203.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="520.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApply (2 samples, 0.04%)</title><rect x="517.3" y="1299.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="520.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (2 samples, 0.04%)</title><rect x="517.3" y="1283.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="520.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.&lt;init&gt; (1 samples, 0.02%)</title><rect x="517.3" y="1267.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="520.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyNow (1 samples, 0.02%)</title><rect x="517.6" y="1267.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="520.6" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1 samples, 0.02%)</title><rect x="517.6" y="1251.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="520.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.02%)</title><rect x="517.6" y="1235.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="520.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenCompleteAsync (11 samples, 0.23%)</title><rect x="517.8" y="1299.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="520.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.23%)</title><rect x="517.8" y="1283.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="520.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.&lt;init&gt; (1 samples, 0.02%)</title><rect x="517.8" y="1267.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="520.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (3 samples, 0.06%)</title><rect x="518.1" y="1267.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="521.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.tryPushStack (1 samples, 0.02%)</title><rect x="518.6" y="1251.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="521.6" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.02%)</title><rect x="518.6" y="1235.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="521.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.02%)</title><rect x="518.6" y="1219.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="521.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (7 samples, 0.15%)</title><rect x="518.8" y="1267.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="521.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalSubmit (7 samples, 0.15%)</title><rect x="518.8" y="1251.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="521.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalPush (7 samples, 0.15%)</title><rect x="518.8" y="1235.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="521.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.tryLockPhase (1 samples, 0.02%)</title><rect x="518.8" y="1219.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="521.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (6 samples, 0.13%)</title><rect x="519.1" y="1219.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="522.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.13%)</title><rect x="519.1" y="1203.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="522.1" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.13%)</title><rect x="519.1" y="1187.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="522.1" y="1198.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (6 samples, 0.13%)</title><rect x="519.1" y="1171.0" width="1.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="522.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="519.1" y="1155.0" width="1.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="522.1" y="1166.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="519.1" y="1139.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="522.1" y="1150.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="519.1" y="1123.0" width="1.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="522.1" y="1134.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="519.1" y="1107.0" width="1.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="522.1" y="1118.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="519.1" y="1091.0" width="1.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="522.1" y="1102.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="519.1" y="1075.0" width="1.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="522.1" y="1086.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="519.4" y="1059.0" width="1.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="522.4" y="1070.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="519.4" y="1043.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="522.4" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/FutureUtils.biConsumer (1 samples, 0.02%)</title><rect x="520.6" y="1299.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="523.6" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1708024697.linkToTargetMethod (1 samples, 0.02%)</title><rect x="520.6" y="1283.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="523.6" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/156204642.invokeStatic (1 samples, 0.02%)</title><rect x="520.6" y="1267.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="523.6" y="1278.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/FutureUtils$$Lambda$169/27627117.get$Lambda (1 samples, 0.02%)</title><rect x="520.6" y="1251.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="523.6" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/service/topology/ConsistentHashTopology.replicas (75 samples, 1.60%)</title><rect x="520.9" y="1395.0" width="18.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="523.9" y="1406.0"></text>
</g>
<g>
<title>java/util/ArrayList.addAll (2 samples, 0.04%)</title><rect x="520.9" y="1379.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="523.9" y="1390.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="521.1" y="1363.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="524.1" y="1374.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="521.1" y="1347.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="524.1" y="1358.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.04%)</title><rect x="521.4" y="1379.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="524.4" y="1390.0"></text>
</g>
<g>
<title>java/util/Collection.spliterator (2 samples, 0.04%)</title><rect x="521.4" y="1363.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="524.4" y="1374.0"></text>
</g>
<g>
<title>java/util/Spliterators.spliterator (2 samples, 0.04%)</title><rect x="521.4" y="1347.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="524.4" y="1358.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="521.6" y="1331.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="524.6" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (33 samples, 0.70%)</title><rect x="521.9" y="1379.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="524.9" y="1390.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.02%)</title><rect x="521.9" y="1363.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="524.9" y="1374.0"></text>
</g>
<g>
<title>java/util/RegularEnumSet.contains (1 samples, 0.02%)</title><rect x="521.9" y="1347.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="524.9" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (32 samples, 0.68%)</title><rect x="522.1" y="1363.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="525.1" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.02%)</title><rect x="522.1" y="1347.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="525.1" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.02%)</title><rect x="522.1" y="1331.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="525.1" y="1342.0"></text>
</g>
<g>
<title>java/util/RegularEnumSet.contains (1 samples, 0.02%)</title><rect x="522.1" y="1315.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="525.1" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (31 samples, 0.66%)</title><rect x="522.4" y="1347.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="525.4" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (29 samples, 0.62%)</title><rect x="522.4" y="1331.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="525.4" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (26 samples, 0.56%)</title><rect x="522.4" y="1315.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="525.4" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (25 samples, 0.53%)</title><rect x="522.4" y="1299.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="525.4" y="1310.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (11 samples, 0.23%)</title><rect x="522.6" y="1283.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="525.6" y="1294.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (11 samples, 0.23%)</title><rect x="522.6" y="1267.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="525.6" y="1278.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (6 samples, 0.13%)</title><rect x="522.9" y="1251.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="525.9" y="1262.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (6 samples, 0.13%)</title><rect x="522.9" y="1235.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="525.9" y="1246.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (4 samples, 0.09%)</title><rect x="523.1" y="1219.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="526.1" y="1230.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (4 samples, 0.09%)</title><rect x="523.1" y="1203.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="526.1" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.02%)</title><rect x="523.1" y="1187.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="526.1" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.cancellationRequested (1 samples, 0.02%)</title><rect x="523.4" y="1187.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="526.4" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps$1.opWrapSink (1 samples, 0.02%)</title><rect x="523.6" y="1187.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="526.6" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$OfRef.opWrapSink (1 samples, 0.02%)</title><rect x="523.9" y="1187.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="526.9" y="1198.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (1 samples, 0.02%)</title><rect x="524.1" y="1219.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="527.1" y="1230.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.size (4 samples, 0.09%)</title><rect x="524.4" y="1251.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="527.4" y="1262.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.size (4 samples, 0.09%)</title><rect x="524.4" y="1235.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="527.4" y="1246.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$EntrySetView.size (4 samples, 0.09%)</title><rect x="524.4" y="1219.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="527.4" y="1230.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (2 samples, 0.04%)</title><rect x="524.9" y="1203.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="527.9" y="1214.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (2 samples, 0.04%)</title><rect x="524.9" y="1187.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="527.9" y="1198.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (2 samples, 0.04%)</title><rect x="524.9" y="1171.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="527.9" y="1182.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.02%)</title><rect x="525.1" y="1155.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="528.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="525.1" y="1139.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="528.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="525.1" y="1123.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="528.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.02%)</title><rect x="525.1" y="1107.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="528.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (6 samples, 0.13%)</title><rect x="525.4" y="1283.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="528.4" y="1294.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (6 samples, 0.13%)</title><rect x="525.4" y="1267.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="528.4" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (6 samples, 0.13%)</title><rect x="525.4" y="1251.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="528.4" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/DistinctOps$1$2.accept (6 samples, 0.13%)</title><rect x="525.4" y="1235.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="528.4" y="1246.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.02%)</title><rect x="525.4" y="1219.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="528.4" y="1230.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.02%)</title><rect x="525.4" y="1203.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="528.4" y="1214.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.02%)</title><rect x="525.4" y="1187.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="528.4" y="1198.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.02%)</title><rect x="525.4" y="1171.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="528.4" y="1182.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.02%)</title><rect x="525.4" y="1155.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="528.4" y="1166.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.04%)</title><rect x="525.7" y="1219.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="528.7" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.04%)</title><rect x="525.7" y="1203.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="528.7" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.04%)</title><rect x="525.7" y="1187.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="528.7" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="525.7" y="1171.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="528.7" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="525.7" y="1155.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="528.7" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="525.7" y="1139.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="528.7" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="525.7" y="1123.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="528.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="525.7" y="1107.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="528.7" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="525.7" y="1091.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="528.7" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="525.7" y="1075.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="528.7" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="525.7" y="1059.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="528.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.02%)</title><rect x="525.9" y="1171.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="528.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.02%)</title><rect x="526.2" y="1219.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="529.2" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.02%)</title><rect x="526.2" y="1203.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="529.2" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="526.2" y="1187.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="529.2" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps$1$1.accept (2 samples, 0.04%)</title><rect x="526.4" y="1219.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="529.4" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$RefSortingSink.accept (2 samples, 0.04%)</title><rect x="526.4" y="1203.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="529.4" y="1214.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="526.7" y="1187.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="529.7" y="1198.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="526.7" y="1171.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="529.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.04%)</title><rect x="526.9" y="1283.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="529.9" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/DistinctOps$1$2.begin (2 samples, 0.04%)</title><rect x="526.9" y="1267.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="529.9" y="1278.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.02%)</title><rect x="526.9" y="1251.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="529.9" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps$1$1.begin (1 samples, 0.02%)</title><rect x="527.2" y="1251.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="530.2" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$RefSortingSink.begin (1 samples, 0.02%)</title><rect x="527.2" y="1235.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="530.2" y="1246.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.02%)</title><rect x="527.2" y="1219.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="530.2" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (5 samples, 0.11%)</title><rect x="527.4" y="1283.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="530.4" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/DistinctOps$1$2.end (5 samples, 0.11%)</title><rect x="527.4" y="1267.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="530.4" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (5 samples, 0.11%)</title><rect x="527.4" y="1251.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="530.4" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$RefSortingSink.end (5 samples, 0.11%)</title><rect x="527.4" y="1235.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="530.4" y="1246.0"></text>
</g>
<g>
<title>java/util/ArrayList.sort (3 samples, 0.06%)</title><rect x="527.7" y="1219.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="530.7" y="1230.0"></text>
</g>
<g>
<title>java/util/Arrays.sort (3 samples, 0.06%)</title><rect x="527.7" y="1203.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="530.7" y="1214.0"></text>
</g>
<g>
<title>java/util/Arrays.rangeCheck (1 samples, 0.02%)</title><rect x="527.9" y="1187.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="530.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.02%)</title><rect x="527.9" y="1171.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="530.9" y="1182.0"></text>
</g>
<g>
<title>java/util/TimSort.sort (1 samples, 0.02%)</title><rect x="528.2" y="1187.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="531.2" y="1198.0"></text>
</g>
<g>
<title>java/util/TimSort.countRunAndMakeAscending (1 samples, 0.02%)</title><rect x="528.2" y="1171.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="531.2" y="1182.0"></text>
</g>
<g>
<title>java/util/TimSort.reverseRange (1 samples, 0.02%)</title><rect x="528.2" y="1155.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="531.2" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.02%)</title><rect x="528.4" y="1219.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="531.4" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$12/1543974463.accept (1 samples, 0.02%)</title><rect x="528.4" y="1203.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="531.4" y="1214.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="528.4" y="1187.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="531.4" y="1198.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="528.4" y="1171.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="531.4" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="528.4" y="1155.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="531.4" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.02%)</title><rect x="528.7" y="1299.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="531.7" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (3 samples, 0.06%)</title><rect x="528.9" y="1315.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="531.9" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/DistinctOps$1.opWrapSink (1 samples, 0.02%)</title><rect x="528.9" y="1299.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="531.9" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.02%)</title><rect x="529.2" y="1299.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="532.2" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$OfRef.opWrapSink (1 samples, 0.02%)</title><rect x="529.4" y="1299.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="532.4" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$RefSortingSink.&lt;init&gt; (1 samples, 0.02%)</title><rect x="529.4" y="1283.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="532.4" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$AbstractRefSortingSink.&lt;init&gt; (1 samples, 0.02%)</title><rect x="529.4" y="1267.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="532.4" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.02%)</title><rect x="529.4" y="1251.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="532.4" y="1262.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.02%)</title><rect x="529.4" y="1235.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="532.4" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.02%)</title><rect x="529.7" y="1331.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="532.7" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$Box.get (1 samples, 0.02%)</title><rect x="529.9" y="1331.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="532.9" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.distinct (3 samples, 0.06%)</title><rect x="530.2" y="1379.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="533.2" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/DistinctOps.makeRef (3 samples, 0.06%)</title><rect x="530.2" y="1363.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.2" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/DistinctOps$1.&lt;init&gt; (2 samples, 0.04%)</title><rect x="530.4" y="1347.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="533.4" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatefulOp.&lt;init&gt; (2 samples, 0.04%)</title><rect x="530.4" y="1331.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="533.4" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (2 samples, 0.04%)</title><rect x="530.4" y="1315.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="533.4" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (2 samples, 0.04%)</title><rect x="530.4" y="1299.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="533.4" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatefulOp.opIsStateful (1 samples, 0.02%)</title><rect x="530.4" y="1283.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="533.4" y="1294.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="530.7" y="1283.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="533.7" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.limit (2 samples, 0.04%)</title><rect x="530.9" y="1379.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="533.9" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps.makeRef (1 samples, 0.02%)</title><rect x="531.2" y="1363.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="534.2" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.02%)</title><rect x="531.4" y="1379.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="534.4" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.02%)</title><rect x="531.4" y="1363.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="534.4" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (1 samples, 0.02%)</title><rect x="531.4" y="1347.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="534.4" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (1 samples, 0.02%)</title><rect x="531.4" y="1331.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="534.4" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (1 samples, 0.02%)</title><rect x="531.4" y="1315.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="534.4" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.combineOpFlags (1 samples, 0.02%)</title><rect x="531.4" y="1299.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="534.4" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.getMask (1 samples, 0.02%)</title><rect x="531.4" y="1283.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="534.4" y="1294.0"></text>
</g>
<g>
<title>ru/mail/polis/service/topology/ConsistentHashTopology.tailMap (32 samples, 0.68%)</title><rect x="531.7" y="1379.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="534.7" y="1390.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (2 samples, 0.04%)</title><rect x="531.7" y="1363.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="534.7" y="1374.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (2 samples, 0.04%)</title><rect x="531.7" y="1347.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="534.7" y="1358.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (2 samples, 0.04%)</title><rect x="531.7" y="1331.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="534.7" y="1342.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (2 samples, 0.04%)</title><rect x="531.7" y="1315.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="534.7" y="1326.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (2 samples, 0.04%)</title><rect x="531.7" y="1299.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="534.7" y="1310.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (1 samples, 0.02%)</title><rect x="532.0" y="1283.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="535.0" y="1294.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (1 samples, 0.02%)</title><rect x="532.0" y="1267.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="535.0" y="1278.0"></text>
</g>
<g>
<title>java/lang/Long.compare (1 samples, 0.02%)</title><rect x="532.0" y="1251.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="535.0" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/service/topology/ConsistentHashTopology$MD5Hash.hash (30 samples, 0.64%)</title><rect x="532.2" y="1363.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="535.2" y="1374.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.02%)</title><rect x="532.2" y="1347.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="535.2" y="1358.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="532.2" y="1331.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="535.2" y="1342.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="532.2" y="1315.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="535.2" y="1326.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="532.2" y="1299.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="535.2" y="1310.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="532.2" y="1283.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="535.2" y="1294.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="532.2" y="1267.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="535.2" y="1278.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (7 samples, 0.15%)</title><rect x="532.5" y="1347.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="535.5" y="1358.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (7 samples, 0.15%)</title><rect x="532.5" y="1331.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="535.5" y="1342.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (7 samples, 0.15%)</title><rect x="532.5" y="1315.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="535.5" y="1326.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (7 samples, 0.15%)</title><rect x="532.5" y="1299.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="535.5" y="1310.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implDigest (6 samples, 0.13%)</title><rect x="532.7" y="1283.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="535.7" y="1294.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (1 samples, 0.02%)</title><rect x="533.0" y="1267.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="536.0" y="1278.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implCompress (4 samples, 0.09%)</title><rect x="533.2" y="1267.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="536.2" y="1278.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iLittle64 (2 samples, 0.04%)</title><rect x="533.7" y="1251.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="536.7" y="1262.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (18 samples, 0.38%)</title><rect x="534.2" y="1347.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="537.2" y="1358.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (16 samples, 0.34%)</title><rect x="534.7" y="1331.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="537.7" y="1342.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (1 samples, 0.02%)</title><rect x="534.7" y="1315.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="537.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.02%)</title><rect x="534.7" y="1299.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="537.7" y="1310.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (15 samples, 0.32%)</title><rect x="535.0" y="1315.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="538.0" y="1326.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (12 samples, 0.26%)</title><rect x="535.0" y="1299.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="538.0" y="1310.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (11 samples, 0.23%)</title><rect x="535.2" y="1283.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="538.2" y="1294.0"></text>
</g>
<g>
<title>java/security/Provider$Service.getImplClass (1 samples, 0.02%)</title><rect x="535.2" y="1267.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="538.2" y="1278.0"></text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (9 samples, 0.19%)</title><rect x="535.5" y="1267.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="538.5" y="1278.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.copy (1 samples, 0.02%)</title><rect x="535.5" y="1251.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="538.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.17%)</title><rect x="535.7" y="1251.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="538.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/Class.getModifiers (2 samples, 0.04%)</title><rect x="536.2" y="1235.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="539.2" y="1246.0"></text>
</g>
<g>
<title>JVM_GetClassModifiers (1 samples, 0.02%)</title><rect x="536.5" y="1219.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="539.5" y="1230.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.02%)</title><rect x="536.5" y="1203.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="539.5" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/reflect/Reflection.getCallerClass (4 samples, 0.09%)</title><rect x="536.7" y="1235.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="539.7" y="1246.0"></text>
</g>
<g>
<title>JVM_GetCallerClass (4 samples, 0.09%)</title><rect x="536.7" y="1219.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="539.7" y="1230.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="536.7" y="1203.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="539.7" y="1214.0"></text>
</g>
<g>
<title>nmethod::scopes_data_end() const (1 samples, 0.02%)</title><rect x="537.0" y="1203.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="540.0" y="1214.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="537.2" y="1203.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="540.2" y="1214.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="537.2" y="1187.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="540.2" y="1198.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (1 samples, 0.02%)</title><rect x="537.5" y="1203.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="540.5" y="1214.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="537.5" y="1187.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="540.5" y="1198.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="537.5" y="1171.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="540.5" y="1182.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="537.5" y="1155.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="540.5" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.02%)</title><rect x="537.7" y="1267.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="540.7" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.02%)</title><rect x="537.7" y="1251.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="540.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.02%)</title><rect x="537.7" y="1235.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="540.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.02%)</title><rect x="537.7" y="1219.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="540.7" y="1230.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (3 samples, 0.06%)</title><rect x="538.0" y="1299.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="541.0" y="1310.0"></text>
</g>
<g>
<title>java/security/Provider.getService (2 samples, 0.04%)</title><rect x="538.0" y="1283.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="541.0" y="1294.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (1 samples, 0.02%)</title><rect x="538.5" y="1283.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="541.5" y="1294.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (1 samples, 0.02%)</title><rect x="538.5" y="1267.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="541.5" y="1278.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (4 samples, 0.09%)</title><rect x="538.8" y="1347.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="541.8" y="1358.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (4 samples, 0.09%)</title><rect x="538.8" y="1331.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="541.8" y="1342.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (4 samples, 0.09%)</title><rect x="538.8" y="1315.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="541.8" y="1326.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/BytesUtils.keyByteBuffer (1 samples, 0.02%)</title><rect x="539.8" y="1395.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="542.8" y="1406.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.sendResponse (156 samples, 3.33%)</title><rect x="540.0" y="1443.0" width="39.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="543.0" y="1454.0">ru/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (156 samples, 3.33%)</title><rect x="540.0" y="1427.0" width="39.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="543.0" y="1438.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (155 samples, 3.31%)</title><rect x="540.3" y="1411.0" width="39.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="543.3" y="1422.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.17%)</title><rect x="540.3" y="1395.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="543.3" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="540.5" y="1379.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="543.5" y="1390.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.02%)</title><rect x="540.8" y="1379.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="543.8" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="540.8" y="1363.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="543.8" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="540.8" y="1347.0" width="0.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="543.8" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="540.8" y="1331.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="543.8" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="540.8" y="1315.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="543.8" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="540.8" y="1299.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="543.8" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="540.8" y="1283.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="543.8" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="540.8" y="1267.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="543.8" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="540.8" y="1251.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="543.8" y="1262.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.11%)</title><rect x="541.0" y="1379.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="544.0" y="1390.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.09%)</title><rect x="541.0" y="1363.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="544.0" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="541.5" y="1347.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="544.5" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="541.5" y="1331.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="544.5" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="541.5" y="1315.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="544.5" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="541.5" y="1299.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="544.5" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="541.5" y="1283.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="544.5" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="541.5" y="1267.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="544.5" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="541.5" y="1251.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="544.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="541.8" y="1347.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="544.8" y="1358.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.02%)</title><rect x="541.8" y="1331.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="544.8" y="1342.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.02%)</title><rect x="542.0" y="1363.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="545.0" y="1374.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.02%)</title><rect x="542.0" y="1347.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="545.0" y="1358.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (147 samples, 3.14%)</title><rect x="542.3" y="1395.0" width="37.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="545.3" y="1406.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (147 samples, 3.14%)</title><rect x="542.3" y="1379.0" width="37.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="545.3" y="1390.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.remaining (1 samples, 0.02%)</title><rect x="542.5" y="1363.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="545.5" y="1374.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (144 samples, 3.08%)</title><rect x="542.8" y="1363.0" width="36.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="545.8" y="1374.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (144 samples, 3.08%)</title><rect x="542.8" y="1347.0" width="36.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="545.8" y="1358.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.02%)</title><rect x="543.0" y="1331.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="546.0" y="1342.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="543.3" y="1331.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="546.3" y="1342.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="543.3" y="1315.0" width="1.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="546.3" y="1326.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (5 samples, 0.11%)</title><rect x="543.3" y="1299.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="546.3" y="1310.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="543.3" y="1283.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="546.3" y="1294.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (1 samples, 0.02%)</title><rect x="543.5" y="1283.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="546.5" y="1294.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="543.8" y="1283.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="546.8" y="1294.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.02%)</title><rect x="544.3" y="1283.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="547.3" y="1294.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.02%)</title><rect x="544.3" y="1267.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="547.3" y="1278.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="544.6" y="1299.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="547.6" y="1310.0"></text>
</g>
<g>
<title>__send (1 samples, 0.02%)</title><rect x="544.8" y="1299.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="547.8" y="1310.0"></text>
</g>
<g>
<title>__send (135 samples, 2.88%)</title><rect x="545.1" y="1331.0" width="34.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="548.1" y="1342.0">__..</text>
</g>
<g>
<title>[unknown] (129 samples, 2.76%)</title><rect x="546.6" y="1315.0" width="32.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="549.6" y="1326.0">[u..</text>
</g>
<g>
<title>[unknown] (129 samples, 2.76%)</title><rect x="546.6" y="1299.0" width="32.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="549.6" y="1310.0">[u..</text>
</g>
<g>
<title>[unknown] (125 samples, 2.67%)</title><rect x="547.6" y="1283.0" width="31.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="550.6" y="1294.0">[u..</text>
</g>
<g>
<title>[unknown] (124 samples, 2.65%)</title><rect x="547.8" y="1267.0" width="31.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="550.8" y="1278.0">[u..</text>
</g>
<g>
<title>[unknown] (124 samples, 2.65%)</title><rect x="547.8" y="1251.0" width="31.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="550.8" y="1262.0">[u..</text>
</g>
<g>
<title>[unknown] (123 samples, 2.63%)</title><rect x="548.1" y="1235.0" width="31.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="551.1" y="1246.0">[u..</text>
</g>
<g>
<title>[unknown] (120 samples, 2.56%)</title><rect x="548.8" y="1219.0" width="30.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="551.8" y="1230.0">[u..</text>
</g>
<g>
<title>[unknown] (120 samples, 2.56%)</title><rect x="548.8" y="1203.0" width="30.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="551.8" y="1214.0">[u..</text>
</g>
<g>
<title>[unknown] (107 samples, 2.29%)</title><rect x="552.1" y="1187.0" width="27.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="555.1" y="1198.0">[..</text>
</g>
<g>
<title>[unknown] (102 samples, 2.18%)</title><rect x="553.4" y="1171.0" width="25.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="556.4" y="1182.0">[..</text>
</g>
<g>
<title>[unknown] (93 samples, 1.99%)</title><rect x="555.6" y="1155.0" width="23.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="558.6" y="1166.0">[..</text>
</g>
<g>
<title>[unknown] (87 samples, 1.86%)</title><rect x="557.2" y="1139.0" width="21.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="560.2" y="1150.0">[..</text>
</g>
<g>
<title>[unknown] (86 samples, 1.84%)</title><rect x="557.4" y="1123.0" width="21.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="560.4" y="1134.0">[..</text>
</g>
<g>
<title>[unknown] (83 samples, 1.77%)</title><rect x="558.2" y="1107.0" width="20.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="561.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (81 samples, 1.73%)</title><rect x="558.7" y="1091.0" width="20.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="561.7" y="1102.0"></text>
</g>
<g>
<title>[unknown] (81 samples, 1.73%)</title><rect x="558.7" y="1075.0" width="20.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="561.7" y="1086.0"></text>
</g>
<g>
<title>[unknown] (78 samples, 1.67%)</title><rect x="559.4" y="1059.0" width="19.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="562.4" y="1070.0"></text>
</g>
<g>
<title>[unknown] (74 samples, 1.58%)</title><rect x="560.4" y="1043.0" width="18.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="563.4" y="1054.0"></text>
</g>
<g>
<title>[unknown] (71 samples, 1.52%)</title><rect x="561.2" y="1027.0" width="17.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="564.2" y="1038.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 1.39%)</title><rect x="562.7" y="1011.0" width="16.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="565.7" y="1022.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.15%)</title><rect x="565.5" y="995.0" width="13.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="568.5" y="1006.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 1.09%)</title><rect x="566.2" y="979.0" width="12.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="569.2" y="990.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.03%)</title><rect x="567.0" y="963.0" width="12.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="570.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 0.96%)</title><rect x="567.7" y="947.0" width="11.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="570.7" y="958.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 0.88%)</title><rect x="568.7" y="931.0" width="10.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="571.7" y="942.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 0.88%)</title><rect x="568.7" y="915.0" width="10.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="571.7" y="926.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 0.81%)</title><rect x="569.5" y="899.0" width="9.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="572.5" y="910.0"></text>
</g>
<g>
<title>[unknown] (37 samples, 0.79%)</title><rect x="569.8" y="883.0" width="9.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="572.8" y="894.0"></text>
</g>
<g>
<title>[unknown] (35 samples, 0.75%)</title><rect x="570.3" y="867.0" width="8.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="573.3" y="878.0"></text>
</g>
<g>
<title>[unknown] (35 samples, 0.75%)</title><rect x="570.3" y="851.0" width="8.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="573.3" y="862.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.73%)</title><rect x="570.5" y="835.0" width="8.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="573.5" y="846.0"></text>
</g>
<g>
<title>[unknown] (33 samples, 0.70%)</title><rect x="570.8" y="819.0" width="8.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="573.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.64%)</title><rect x="571.5" y="803.0" width="7.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="574.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.58%)</title><rect x="572.3" y="787.0" width="6.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="575.3" y="798.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.41%)</title><rect x="574.3" y="771.0" width="4.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="577.3" y="782.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.34%)</title><rect x="575.0" y="755.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="578.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.30%)</title><rect x="575.6" y="739.0" width="3.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="578.6" y="750.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.28%)</title><rect x="575.8" y="723.0" width="3.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="578.8" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="578.6" y="707.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="581.6" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="578.8" y="691.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="581.8" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="579.1" y="1363.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="582.1" y="1374.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="579.1" y="1347.0" width="0.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="582.1" y="1358.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="579.1" y="1331.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="582.1" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (5 samples, 0.11%)</title><rect x="579.3" y="1523.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="582.3" y="1534.0"></text>
</g>
<g>
<title>java/lang/invoke/BoundMethodHandle$Species_LLLLLLLLL.make (1 samples, 0.02%)</title><rect x="579.3" y="1507.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="582.3" y="1518.0"></text>
</g>
<g>
<title>java/lang/invoke/BoundMethodHandle$Species_LLLLLLLLL.&lt;init&gt; (1 samples, 0.02%)</title><rect x="579.3" y="1491.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="582.3" y="1502.0"></text>
</g>
<g>
<title>java/lang/invoke/BoundMethodHandle.&lt;init&gt; (1 samples, 0.02%)</title><rect x="579.3" y="1475.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="582.3" y="1486.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.&lt;init&gt; (1 samples, 0.02%)</title><rect x="579.3" y="1459.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="582.3" y="1470.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm.prepare (1 samples, 0.02%)</title><rect x="579.3" y="1443.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="582.3" y="1454.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm.compileToBytecode (1 samples, 0.02%)</title><rect x="579.3" y="1427.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="582.3" y="1438.0"></text>
</g>
<g>
<title>java/lang/invoke/InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.02%)</title><rect x="579.3" y="1411.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="582.3" y="1422.0"></text>
</g>
<g>
<title>java/lang/invoke/InvokerBytecodeGenerator.loadMethod (1 samples, 0.02%)</title><rect x="579.3" y="1395.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="582.3" y="1406.0"></text>
</g>
<g>
<title>java/lang/invoke/InvokerBytecodeGenerator.loadAndInitializeInvokerClass (1 samples, 0.02%)</title><rect x="579.3" y="1379.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="582.3" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.defineAnonymousClass (1 samples, 0.02%)</title><rect x="579.3" y="1363.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="582.3" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.defineAnonymousClass0 (1 samples, 0.02%)</title><rect x="579.3" y="1347.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="582.3" y="1358.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0 (1 samples, 0.02%)</title><rect x="579.3" y="1331.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="582.3" y="1342.0"></text>
</g>
<g>
<title>Klass::external_name() const (1 samples, 0.02%)</title><rect x="579.3" y="1315.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="582.3" y="1326.0"></text>
</g>
<g>
<title>Symbol::as_klass_external_name() const (1 samples, 0.02%)</title><rect x="579.3" y="1299.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="582.3" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory.makeConcatWithConstants (4 samples, 0.09%)</title><rect x="579.6" y="1507.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="582.6" y="1518.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory.doStringConcat (4 samples, 0.09%)</title><rect x="579.6" y="1491.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="582.6" y="1502.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory.generate (4 samples, 0.09%)</title><rect x="579.6" y="1475.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="582.6" y="1486.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.generate (4 samples, 0.09%)</title><rect x="579.6" y="1459.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="582.6" y="1470.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles.dropArguments (1 samples, 0.02%)</title><rect x="579.6" y="1443.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="582.6" y="1454.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles.dropArguments0 (1 samples, 0.02%)</title><rect x="579.6" y="1427.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="582.6" y="1438.0"></text>
</g>
<g>
<title>java/lang/invoke/BoundMethodHandle.rebind (1 samples, 0.02%)</title><rect x="579.6" y="1411.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="582.6" y="1422.0"></text>
</g>
<g>
<title>java/lang/invoke/BoundMethodHandle.makeReinvoker (1 samples, 0.02%)</title><rect x="579.6" y="1395.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="582.6" y="1406.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle.makeReinvokerForm (1 samples, 0.02%)</title><rect x="579.6" y="1379.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="582.6" y="1390.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle.makeReinvokerForm (1 samples, 0.02%)</title><rect x="579.6" y="1363.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="582.6" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$Name.&lt;init&gt; (1 samples, 0.02%)</title><rect x="579.6" y="1347.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="582.6" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$NamedFunction.&lt;init&gt; (1 samples, 0.02%)</title><rect x="579.6" y="1331.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="582.6" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.basicInvoker (1 samples, 0.02%)</title><rect x="579.6" y="1315.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.6" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.make (1 samples, 0.02%)</title><rect x="579.6" y="1299.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="582.6" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.make (1 samples, 0.02%)</title><rect x="579.6" y="1283.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="582.6" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.make (1 samples, 0.02%)</title><rect x="579.6" y="1267.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="582.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.preparedLambdaForm (1 samples, 0.02%)</title><rect x="579.6" y="1251.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="582.6" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.preparedLambdaForm (1 samples, 0.02%)</title><rect x="579.6" y="1235.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="582.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.preparedLambdaForm (1 samples, 0.02%)</title><rect x="579.6" y="1219.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="582.6" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.02%)</title><rect x="579.6" y="1203.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="582.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm.compileToBytecode (1 samples, 0.02%)</title><rect x="579.6" y="1187.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.02%)</title><rect x="579.6" y="1171.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="582.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/InvokerBytecodeGenerator.lookupPregenerated (1 samples, 0.02%)</title><rect x="579.6" y="1155.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="582.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/InvokerBytecodeGenerator.resolveFrom (1 samples, 0.02%)</title><rect x="579.6" y="1139.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="582.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName.getFactory (1 samples, 0.02%)</title><rect x="579.6" y="1123.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="582.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles.foldArguments (2 samples, 0.04%)</title><rect x="579.8" y="1443.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="582.8" y="1454.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodType.dropParameterTypes (2 samples, 0.04%)</title><rect x="579.8" y="1427.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="582.8" y="1438.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodType.makeImpl (1 samples, 0.02%)</title><rect x="580.1" y="1411.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="583.1" y="1422.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodTypeForm.findForm (1 samples, 0.02%)</title><rect x="580.1" y="1395.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="583.1" y="1406.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodTypeForm.canonicalize (1 samples, 0.02%)</title><rect x="580.1" y="1379.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="583.1" y="1390.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodType.makeImpl (1 samples, 0.02%)</title><rect x="580.1" y="1363.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="583.1" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodTypeForm.findForm (1 samples, 0.02%)</title><rect x="580.1" y="1347.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="583.1" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodTypeForm.&lt;init&gt; (1 samples, 0.02%)</title><rect x="580.1" y="1331.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="583.1" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodType.makeImpl (1 samples, 0.02%)</title><rect x="580.1" y="1315.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="583.1" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodType$ConcurrentWeakInternSet.get (1 samples, 0.02%)</title><rect x="580.1" y="1299.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="583.1" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodType$ConcurrentWeakInternSet$WeakEntry.&lt;init&gt; (1 samples, 0.02%)</title><rect x="580.1" y="1283.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="583.1" y="1294.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.02%)</title><rect x="580.1" y="1267.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="583.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.02%)</title><rect x="580.1" y="1251.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="583.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles.insertArguments (1 samples, 0.02%)</title><rect x="580.3" y="1443.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="583.3" y="1454.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles.insertArgumentPrimitive (1 samples, 0.02%)</title><rect x="580.3" y="1427.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="583.3" y="1438.0"></text>
</g>
<g>
<title>java/lang/invoke/BoundMethodHandle.bindArgumentI (1 samples, 0.02%)</title><rect x="580.3" y="1411.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="583.3" y="1422.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaFormEditor.bindArgumentI (1 samples, 0.02%)</title><rect x="580.3" y="1395.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="583.3" y="1406.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaFormEditor.bindArgumentForm (1 samples, 0.02%)</title><rect x="580.3" y="1379.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="583.3" y="1390.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaFormEditor.newSpeciesData (1 samples, 0.02%)</title><rect x="580.3" y="1363.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="583.3" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/BoundMethodHandle$SpeciesData.extendWith (1 samples, 0.02%)</title><rect x="580.3" y="1347.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="583.3" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/ClassSpecializer.findSpecies (1 samples, 0.02%)</title><rect x="580.3" y="1331.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="583.3" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/ClassSpecializer$Factory.loadSpecies (1 samples, 0.02%)</title><rect x="580.3" y="1315.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="583.3" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/ClassSpecializer$Factory.linkSpeciesDataToCode (1 samples, 0.02%)</title><rect x="580.3" y="1299.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="583.3" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/ClassSpecializer$Factory.findFactories (1 samples, 0.02%)</title><rect x="580.3" y="1283.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="583.3" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/ClassSpecializer$Factory.findFactory (1 samples, 0.02%)</title><rect x="580.3" y="1267.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="583.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.findStatic (1 samples, 0.02%)</title><rect x="580.3" y="1251.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="583.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.resolveOrFail (1 samples, 0.02%)</title><rect x="580.3" y="1235.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="583.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName.&lt;init&gt; (1 samples, 0.02%)</title><rect x="580.3" y="1219.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="583.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName.initResolved (1 samples, 0.02%)</title><rect x="580.3" y="1203.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="583.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinWorkerThread.run (206 samples, 4.40%)</title><rect x="580.6" y="1523.0" width="51.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="583.6" y="1534.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.runWorker (206 samples, 4.40%)</title><rect x="580.6" y="1507.0" width="51.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="583.6" y="1518.0">java/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.09%)</title><rect x="583.4" y="1491.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="586.4" y="1502.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.06%)</title><rect x="583.6" y="1475.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="586.6" y="1486.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (3 samples, 0.06%)</title><rect x="583.6" y="1459.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="586.6" y="1470.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.04%)</title><rect x="583.6" y="1443.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="586.6" y="1454.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="584.1" y="1443.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="587.1" y="1454.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LJJ_Z (6 samples, 0.13%)</title><rect x="584.4" y="1491.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="587.4" y="1502.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.02%)</title><rect x="585.4" y="1475.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="588.4" y="1486.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleLongs$FieldInstanceReadWrite.weakCompareAndSet (1 samples, 0.02%)</title><rect x="585.6" y="1475.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="588.6" y="1486.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.02%)</title><rect x="585.6" y="1459.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="588.6" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.scan (96 samples, 2.05%)</title><rect x="585.9" y="1491.0" width="24.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="588.9" y="1502.0">j..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LILL_Z (2 samples, 0.04%)</title><rect x="587.4" y="1475.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="590.4" y="1486.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$Array.compareAndSet (2 samples, 0.04%)</title><rect x="587.4" y="1459.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="590.4" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.poll (1 samples, 0.02%)</title><rect x="587.7" y="1443.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="590.7" y="1454.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_L (1 samples, 0.02%)</title><rect x="587.9" y="1475.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="590.9" y="1486.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$Array.getAcquire (1 samples, 0.02%)</title><rect x="587.9" y="1459.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="590.9" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.topLevelExec (83 samples, 1.77%)</title><rect x="588.2" y="1475.0" width="20.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="591.2" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.nextLocalTask (3 samples, 0.06%)</title><rect x="588.4" y="1459.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="591.4" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.doExec (79 samples, 1.69%)</title><rect x="589.2" y="1459.0" width="19.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="592.2" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.exec (77 samples, 1.64%)</title><rect x="589.2" y="1443.0" width="19.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="592.2" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (12 samples, 0.26%)</title><rect x="589.2" y="1427.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="592.2" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (9 samples, 0.19%)</title><rect x="589.2" y="1411.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="592.2" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (9 samples, 0.19%)</title><rect x="589.2" y="1395.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="592.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Signaller.tryFire (9 samples, 0.19%)</title><rect x="589.2" y="1379.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="592.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.19%)</title><rect x="589.2" y="1363.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="592.2" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.19%)</title><rect x="589.2" y="1347.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="592.2" y="1358.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.04%)</title><rect x="589.2" y="1331.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="592.2" y="1342.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="589.2" y="1315.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="592.2" y="1326.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.02%)</title><rect x="589.4" y="1315.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="592.4" y="1326.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (7 samples, 0.15%)</title><rect x="589.7" y="1331.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="592.7" y="1342.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="590.2" y="1315.0" width="1.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="593.2" y="1326.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="590.2" y="1299.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="593.2" y="1310.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="590.7" y="1283.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="593.7" y="1294.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="590.7" y="1267.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="593.7" y="1278.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="590.7" y="1251.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="593.7" y="1262.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="590.7" y="1235.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="593.7" y="1246.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="590.7" y="1219.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="593.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="590.9" y="1203.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="593.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (3 samples, 0.06%)</title><rect x="591.4" y="1411.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="594.4" y="1422.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/service/EntityService$$Lambda$175/1215300405.apply (3 samples, 0.06%)</title><rect x="591.4" y="1395.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="594.4" y="1406.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/service/EntityService.lambda$responseFuture$7 (2 samples, 0.04%)</title><rect x="591.7" y="1379.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="594.7" y="1390.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/service/EntityService.createResponse (2 samples, 0.04%)</title><rect x="591.7" y="1363.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="594.7" y="1374.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.04%)</title><rect x="591.7" y="1347.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="594.7" y="1358.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.02%)</title><rect x="591.9" y="1331.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="594.9" y="1342.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.02%)</title><rect x="591.9" y="1315.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="594.9" y="1326.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (1 samples, 0.02%)</title><rect x="591.9" y="1299.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="594.9" y="1310.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="591.9" y="1283.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="594.9" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (65 samples, 1.39%)</title><rect x="592.2" y="1427.0" width="16.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="595.2" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (49 samples, 1.05%)</title><rect x="592.2" y="1411.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="595.2" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (49 samples, 1.05%)</title><rect x="592.2" y="1395.0" width="12.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="595.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (6 samples, 0.13%)</title><rect x="592.4" y="1379.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="595.4" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (5 samples, 0.11%)</title><rect x="592.4" y="1363.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="595.4" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (4 samples, 0.09%)</title><rect x="592.4" y="1347.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="595.4" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalSubmit (4 samples, 0.09%)</title><rect x="592.4" y="1331.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="595.4" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.push (4 samples, 0.09%)</title><rect x="592.4" y="1315.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="595.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LIL_V (4 samples, 0.09%)</title><rect x="592.4" y="1299.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="595.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$Array.setRelease (4 samples, 0.09%)</title><rect x="592.4" y="1283.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="595.4" y="1294.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.04%)</title><rect x="592.4" y="1267.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="595.4" y="1278.0"></text>
</g>
<g>
<title>ru/mail/polis/client/AsyncHttpClientImpl$$Lambda$166/844492107.apply (1 samples, 0.02%)</title><rect x="592.9" y="1267.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="595.9" y="1278.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/FutureUtils$$Lambda$170/1219841867.apply (1 samples, 0.02%)</title><rect x="593.2" y="1267.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="596.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.02%)</title><rect x="593.4" y="1347.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="596.4" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="593.4" y="1331.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="596.4" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.02%)</title><rect x="593.4" y="1315.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="596.4" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.02%)</title><rect x="593.7" y="1363.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="596.7" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="593.7" y="1347.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="596.7" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="593.7" y="1331.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="596.7" y="1342.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.02%)</title><rect x="593.7" y="1315.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="596.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniExceptionally.tryFire (1 samples, 0.02%)</title><rect x="594.0" y="1379.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="597.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (41 samples, 0.88%)</title><rect x="594.2" y="1379.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="597.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (41 samples, 0.88%)</title><rect x="594.2" y="1363.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="597.2" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (41 samples, 0.88%)</title><rect x="594.2" y="1347.0" width="10.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="597.2" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (40 samples, 0.85%)</title><rect x="594.5" y="1331.0" width="10.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="597.5" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalSubmit (40 samples, 0.85%)</title><rect x="594.5" y="1315.0" width="10.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="597.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.push (40 samples, 0.85%)</title><rect x="594.5" y="1299.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="597.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (40 samples, 0.85%)</title><rect x="594.5" y="1283.0" width="10.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="597.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (40 samples, 0.85%)</title><rect x="594.5" y="1267.0" width="10.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="597.5" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (40 samples, 0.85%)</title><rect x="594.5" y="1251.0" width="10.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="597.5" y="1262.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.04%)</title><rect x="594.5" y="1235.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="597.5" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.02%)</title><rect x="594.5" y="1219.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="597.5" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.02%)</title><rect x="594.7" y="1219.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="597.7" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.02%)</title><rect x="595.0" y="1235.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="598.0" y="1246.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (37 samples, 0.79%)</title><rect x="595.2" y="1235.0" width="9.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="598.2" y="1246.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 0.68%)</title><rect x="596.5" y="1219.0" width="8.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="599.5" y="1230.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 0.68%)</title><rect x="596.5" y="1203.0" width="8.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="599.5" y="1214.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 0.66%)</title><rect x="596.7" y="1187.0" width="7.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="599.7" y="1198.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.64%)</title><rect x="597.0" y="1171.0" width="7.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="600.0" y="1182.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.64%)</title><rect x="597.0" y="1155.0" width="7.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="600.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.64%)</title><rect x="597.0" y="1139.0" width="7.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="600.0" y="1150.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 0.60%)</title><rect x="597.5" y="1123.0" width="7.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="600.5" y="1134.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 0.60%)</title><rect x="597.5" y="1107.0" width="7.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="600.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 0.34%)</title><rect x="604.5" y="1411.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="607.5" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (3 samples, 0.06%)</title><rect x="604.5" y="1395.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="607.5" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (1 samples, 0.02%)</title><rect x="604.5" y="1379.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="607.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalSubmit (1 samples, 0.02%)</title><rect x="604.5" y="1363.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="607.5" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (1 samples, 0.02%)</title><rect x="604.5" y="1347.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="607.5" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.02%)</title><rect x="604.8" y="1379.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="607.8" y="1390.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="604.8" y="1363.0" width="0.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="607.8" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1 samples, 0.02%)</title><rect x="605.0" y="1379.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="608.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (1 samples, 0.02%)</title><rect x="605.0" y="1363.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="608.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.02%)</title><rect x="605.0" y="1347.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="608.0" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/FutureUtils$$Lambda$169/27627117.accept (1 samples, 0.02%)</title><rect x="605.0" y="1331.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="608.0" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/FutureUtils$$Lambda$169/27627117.accept (13 samples, 0.28%)</title><rect x="605.3" y="1395.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="608.3" y="1406.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/FutureUtils.lambda$biConsumer$3 (13 samples, 0.28%)</title><rect x="605.3" y="1379.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="608.3" y="1390.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="605.3" y="1363.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="608.3" y="1374.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="605.3" y="1347.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="608.3" y="1358.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="605.3" y="1331.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="608.3" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (11 samples, 0.23%)</title><rect x="605.5" y="1363.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="608.5" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (11 samples, 0.23%)</title><rect x="605.5" y="1347.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="608.5" y="1358.0"></text>
</g>
<g>
<title>InlineCacheBuffer (1 samples, 0.02%)</title><rect x="605.5" y="1331.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="608.5" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (10 samples, 0.21%)</title><rect x="605.8" y="1331.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="608.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (10 samples, 0.21%)</title><rect x="605.8" y="1315.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="608.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (10 samples, 0.21%)</title><rect x="605.8" y="1299.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="608.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (10 samples, 0.21%)</title><rect x="605.8" y="1283.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="608.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalSubmit (10 samples, 0.21%)</title><rect x="605.8" y="1267.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="608.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.push (10 samples, 0.21%)</title><rect x="605.8" y="1251.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="608.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (9 samples, 0.19%)</title><rect x="606.0" y="1235.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="609.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.19%)</title><rect x="606.0" y="1219.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.0" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.19%)</title><rect x="606.0" y="1203.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.0" y="1214.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (9 samples, 0.19%)</title><rect x="606.0" y="1187.0" width="2.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="609.0" y="1198.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="606.3" y="1171.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="609.3" y="1182.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="606.3" y="1155.0" width="2.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="609.3" y="1166.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="606.6" y="1139.0" width="1.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="609.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="606.6" y="1123.0" width="1.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="609.6" y="1134.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="606.6" y="1107.0" width="1.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="609.6" y="1118.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="606.6" y="1091.0" width="1.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="609.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="606.8" y="1075.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="609.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="606.8" y="1059.0" width="1.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="609.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="608.3" y="1363.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="611.3" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="608.3" y="1347.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="611.3" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="608.3" y="1331.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="611.3" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="608.3" y="1315.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="611.3" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.04%)</title><rect x="608.6" y="1443.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="611.6" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (4 samples, 0.09%)</title><rect x="609.1" y="1475.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="612.1" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.09%)</title><rect x="609.1" y="1459.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="612.1" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.09%)</title><rect x="609.1" y="1443.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="612.1" y="1454.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (4 samples, 0.09%)</title><rect x="609.1" y="1427.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="612.1" y="1438.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="609.6" y="1411.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="612.6" y="1422.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="609.6" y="1395.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="612.6" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="609.8" y="1379.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="612.8" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="609.8" y="1363.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="612.8" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="609.8" y="1347.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="612.8" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="609.8" y="1331.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="612.8" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="609.8" y="1315.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="612.8" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="609.8" y="1299.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="612.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (48 samples, 1.03%)</title><rect x="610.1" y="1491.0" width="12.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="613.1" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (48 samples, 1.03%)</title><rect x="610.1" y="1475.0" width="12.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="613.1" y="1486.0"></text>
</g>
<g>
<title>Unsafe_Park (16 samples, 0.34%)</title><rect x="610.3" y="1459.0" width="4.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="613.3" y="1470.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.09%)</title><rect x="610.8" y="1443.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="613.8" y="1454.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="611.6" y="1427.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="614.6" y="1438.0"></text>
</g>
<g>
<title>__lll_unlock_wake (9 samples, 0.19%)</title><rect x="611.8" y="1443.0" width="2.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="614.8" y="1454.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="612.9" y="1427.0" width="1.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="615.9" y="1438.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="612.9" y="1411.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="615.9" y="1422.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="613.6" y="1395.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="616.6" y="1406.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="613.6" y="1379.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="616.6" y="1390.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="613.6" y="1363.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="616.6" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="614.1" y="1443.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="617.1" y="1454.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 0.66%)</title><rect x="614.4" y="1459.0" width="7.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="617.4" y="1470.0"></text>
</g>
<g>
<title>__pthread_cond_wait (29 samples, 0.62%)</title><rect x="614.4" y="1443.0" width="7.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="617.4" y="1454.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.21%)</title><rect x="619.2" y="1427.0" width="2.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="622.2" y="1438.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.21%)</title><rect x="619.2" y="1411.0" width="2.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="622.2" y="1422.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="620.7" y="1395.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="623.7" y="1406.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="620.7" y="1379.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="623.7" y="1390.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="620.9" y="1363.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="623.9" y="1374.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="620.9" y="1347.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="623.9" y="1358.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="621.2" y="1331.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="624.2" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="621.4" y="1315.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="624.4" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="621.4" y="1299.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="624.4" y="1310.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.04%)</title><rect x="621.7" y="1443.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="624.7" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.parkUntil (41 samples, 0.88%)</title><rect x="622.2" y="1491.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="625.2" y="1502.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="622.4" y="1475.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="625.4" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (39 samples, 0.83%)</title><rect x="622.7" y="1475.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="625.7" y="1486.0"></text>
</g>
<g>
<title>Unsafe_Park (11 samples, 0.23%)</title><rect x="622.7" y="1459.0" width="2.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="625.7" y="1470.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="622.9" y="1443.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="625.9" y="1454.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.09%)</title><rect x="623.2" y="1443.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="626.2" y="1454.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="623.2" y="1427.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="626.2" y="1438.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.04%)</title><rect x="623.4" y="1427.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="626.4" y="1438.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.02%)</title><rect x="623.9" y="1427.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="626.9" y="1438.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.02%)</title><rect x="624.2" y="1443.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="627.2" y="1454.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.02%)</title><rect x="624.4" y="1443.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="627.4" y="1454.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.04%)</title><rect x="624.7" y="1443.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="627.7" y="1454.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="625.2" y="1443.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="628.2" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="625.5" y="1459.0" width="0.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="628.5" y="1470.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="625.5" y="1443.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="628.5" y="1454.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (25 samples, 0.53%)</title><rect x="625.7" y="1459.0" width="6.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="628.7" y="1470.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.26%)</title><rect x="629.0" y="1443.0" width="3.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="632.0" y="1454.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.26%)</title><rect x="629.0" y="1427.0" width="3.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="632.0" y="1438.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.26%)</title><rect x="629.0" y="1411.0" width="3.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="632.0" y="1422.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.23%)</title><rect x="629.2" y="1395.0" width="2.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="632.2" y="1406.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.21%)</title><rect x="629.5" y="1379.0" width="2.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="632.5" y="1390.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.21%)</title><rect x="629.5" y="1363.0" width="2.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="632.5" y="1374.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="629.7" y="1347.0" width="2.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="632.7" y="1358.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="630.2" y="1331.0" width="1.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="633.2" y="1342.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="632.0" y="1459.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="635.0" y="1470.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="632.3" y="1459.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="635.3" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.run (343 samples, 7.33%)</title><rect x="632.5" y="1523.0" width="86.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="635.5" y="1534.0">jdk/intern..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="634.8" y="1507.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="637.8" y="1518.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="635.0" y="1507.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="638.0" y="1518.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="635.0" y="1491.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="638.0" y="1502.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)</title><rect x="635.0" y="1475.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="638.0" y="1486.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_back_branch_event(methodHandle const&amp;, methodHandle const&amp;, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)</title><rect x="635.0" y="1459.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="638.0" y="1470.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.02%)</title><rect x="635.3" y="1507.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="638.3" y="1518.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="635.3" y="1491.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="638.3" y="1502.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.02%)</title><rect x="635.3" y="1475.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="638.3" y="1486.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="635.3" y="1459.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="638.3" y="1470.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.02%)</title><rect x="635.5" y="1507.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="638.5" y="1518.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.02%)</title><rect x="635.5" y="1491.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.5" y="1502.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.02%)</title><rect x="635.5" y="1475.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="638.5" y="1486.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="635.5" y="1459.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="638.5" y="1470.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.09%)</title><rect x="635.8" y="1507.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.8" y="1518.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.06%)</title><rect x="636.0" y="1491.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="639.0" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$290/876058235.get$Lambda (2 samples, 0.04%)</title><rect x="636.3" y="1475.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.3" y="1486.0"></text>
</g>
<g>
<title>java/util/ArrayList.clear (1 samples, 0.02%)</title><rect x="636.8" y="1507.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="639.8" y="1518.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (67 samples, 1.43%)</title><rect x="637.0" y="1507.0" width="16.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="640.0" y="1518.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="637.0" y="1491.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="640.0" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$292/2116813995.accept (62 samples, 1.32%)</title><rect x="637.3" y="1491.0" width="15.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="640.3" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$3 (62 samples, 1.32%)</title><rect x="637.3" y="1475.0" width="15.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="640.3" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.handleEvent (62 samples, 1.32%)</title><rect x="637.3" y="1459.0" width="15.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="640.3" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection$ConnectEvent.handle (1 samples, 0.02%)</title><rect x="637.3" y="1443.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="640.3" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (1 samples, 0.02%)</title><rect x="637.3" y="1427.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.3" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1 samples, 0.02%)</title><rect x="637.3" y="1411.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="640.3" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.02%)</title><rect x="637.3" y="1395.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="640.3" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.offer (1 samples, 0.02%)</title><rect x="637.3" y="1379.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="640.3" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (1 samples, 0.02%)</title><rect x="637.3" y="1363.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="640.3" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack$SNode.tryMatch (1 samples, 0.02%)</title><rect x="637.3" y="1347.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="640.3" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.02%)</title><rect x="637.3" y="1331.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="640.3" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title><rect x="637.3" y="1315.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="640.3" y="1326.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.02%)</title><rect x="637.3" y="1299.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="640.3" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="637.3" y="1283.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="640.3" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="637.3" y="1267.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="640.3" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="637.3" y="1251.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="640.3" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowEvent.handle (61 samples, 1.30%)</title><rect x="637.6" y="1443.0" width="15.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.6" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadEvent.signalEvent (61 samples, 1.30%)</title><rect x="637.6" y="1427.0" width="15.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="640.6" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalReadable (60 samples, 1.28%)</title><rect x="637.8" y="1411.0" width="15.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="640.8" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (60 samples, 1.28%)</title><rect x="637.8" y="1395.0" width="15.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="640.8" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (60 samples, 1.28%)</title><rect x="637.8" y="1379.0" width="15.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="640.8" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (60 samples, 1.28%)</title><rect x="637.8" y="1363.0" width="15.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="640.8" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (60 samples, 1.28%)</title><rect x="637.8" y="1347.0" width="15.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="640.8" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$201/766671662.run (59 samples, 1.26%)</title><rect x="637.8" y="1331.0" width="14.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="640.8" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (59 samples, 1.26%)</title><rect x="637.8" y="1315.0" width="14.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="640.8" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onNext (23 samples, 0.49%)</title><rect x="637.8" y="1299.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="640.8" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onNext (23 samples, 0.49%)</title><rect x="637.8" y="1283.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="640.8" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.asyncReceive (22 samples, 0.47%)</title><rect x="638.1" y="1267.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="641.1" y="1278.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="638.1" y="1251.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="641.1" y="1262.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="638.1" y="1235.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="641.1" y="1246.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)</title><rect x="638.1" y="1219.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="641.1" y="1230.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)</title><rect x="638.1" y="1203.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="641.1" y="1214.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (1 samples, 0.02%)</title><rect x="638.1" y="1187.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="641.1" y="1198.0"></text>
</g>
<g>
<title>Method::is_constant_getter() const (1 samples, 0.02%)</title><rect x="638.1" y="1171.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="641.1" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (21 samples, 0.45%)</title><rect x="638.3" y="1251.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="641.3" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (20 samples, 0.43%)</title><rect x="638.6" y="1235.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="641.6" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (20 samples, 0.43%)</title><rect x="638.6" y="1219.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="641.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (19 samples, 0.41%)</title><rect x="638.8" y="1203.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="641.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.offer (19 samples, 0.41%)</title><rect x="638.8" y="1187.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="641.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (19 samples, 0.41%)</title><rect x="638.8" y="1171.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="641.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack$SNode.tryMatch (18 samples, 0.38%)</title><rect x="639.1" y="1155.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="642.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 0.38%)</title><rect x="639.1" y="1139.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="642.1" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (18 samples, 0.38%)</title><rect x="639.1" y="1123.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="642.1" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.02%)</title><rect x="639.1" y="1107.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="642.1" y="1118.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.02%)</title><rect x="639.3" y="1107.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="642.3" y="1118.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="639.6" y="1107.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="642.6" y="1118.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (15 samples, 0.32%)</title><rect x="639.8" y="1107.0" width="3.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="642.8" y="1118.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.26%)</title><rect x="640.6" y="1091.0" width="3.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="643.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.26%)</title><rect x="640.6" y="1075.0" width="3.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="643.6" y="1086.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.23%)</title><rect x="640.8" y="1059.0" width="2.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="643.8" y="1070.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.23%)</title><rect x="640.8" y="1043.0" width="2.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="643.8" y="1054.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.23%)</title><rect x="640.8" y="1027.0" width="2.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="643.8" y="1038.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="641.3" y="1011.0" width="2.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="644.3" y="1022.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="641.3" y="995.0" width="2.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="644.3" y="1006.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="641.3" y="979.0" width="2.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="644.3" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.readAvailable (36 samples, 0.77%)</title><rect x="643.6" y="1299.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="646.6" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SliceBufferSource.append (1 samples, 0.02%)</title><rect x="643.9" y="1283.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="646.9" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.listOf (1 samples, 0.02%)</title><rect x="643.9" y="1267.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="646.9" y="1278.0"></text>
</g>
<g>
<title>java/util/List.of (1 samples, 0.02%)</title><rect x="643.9" y="1251.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="646.9" y="1262.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$List12.&lt;init&gt; (1 samples, 0.02%)</title><rect x="643.9" y="1235.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="646.9" y="1246.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.02%)</title><rect x="643.9" y="1219.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="646.9" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (34 samples, 0.73%)</title><rect x="644.1" y="1283.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="647.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.06%)</title><rect x="644.6" y="1267.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="647.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.06%)</title><rect x="644.6" y="1251.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="647.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.04%)</title><rect x="644.6" y="1235.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.02%)</title><rect x="644.6" y="1219.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="647.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="644.9" y="1219.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="647.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="644.9" y="1203.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.02%)</title><rect x="644.9" y="1187.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="647.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="644.9" y="1171.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="647.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="644.9" y="1155.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="647.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="645.1" y="1235.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="648.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="645.1" y="1219.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="648.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.02%)</title><rect x="645.1" y="1203.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="648.1" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (29 samples, 0.62%)</title><rect x="645.4" y="1267.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="648.4" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (29 samples, 0.62%)</title><rect x="645.4" y="1251.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="648.4" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (29 samples, 0.62%)</title><rect x="645.4" y="1235.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="648.4" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (28 samples, 0.60%)</title><rect x="645.6" y="1219.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="648.6" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (28 samples, 0.60%)</title><rect x="645.6" y="1203.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="648.6" y="1214.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 0.60%)</title><rect x="645.6" y="1187.0" width="7.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="648.6" y="1198.0"></text>
</g>
<g>
<title>__libc_read (28 samples, 0.60%)</title><rect x="645.6" y="1171.0" width="7.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="648.6" y="1182.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.51%)</title><rect x="646.6" y="1155.0" width="6.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="649.6" y="1166.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.51%)</title><rect x="646.6" y="1139.0" width="6.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="649.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.45%)</title><rect x="647.4" y="1123.0" width="5.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="650.4" y="1134.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.45%)</title><rect x="647.4" y="1107.0" width="5.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="650.4" y="1118.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.45%)</title><rect x="647.4" y="1091.0" width="5.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="650.4" y="1102.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.45%)</title><rect x="647.4" y="1075.0" width="5.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="650.4" y="1086.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.43%)</title><rect x="647.6" y="1059.0" width="5.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="650.6" y="1070.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.38%)</title><rect x="648.1" y="1043.0" width="4.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="651.1" y="1054.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.34%)</title><rect x="648.6" y="1027.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="651.6" y="1038.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.32%)</title><rect x="648.9" y="1011.0" width="3.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="651.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.23%)</title><rect x="649.9" y="995.0" width="2.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="652.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="650.9" y="979.0" width="1.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="653.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="650.9" y="963.0" width="1.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="653.9" y="974.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="650.9" y="947.0" width="1.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="653.9" y="958.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="651.7" y="931.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="654.7" y="942.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="652.2" y="915.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="655.2" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (1 samples, 0.02%)</title><rect x="652.7" y="1331.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="655.7" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$300/869685903.accept (4 samples, 0.09%)</title><rect x="652.9" y="1491.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="655.9" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$5 (4 samples, 0.09%)</title><rect x="652.9" y="1475.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="655.9" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$291/948959463.run (4 samples, 0.09%)</title><rect x="652.9" y="1459.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="655.9" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$2 (4 samples, 0.09%)</title><rect x="652.9" y="1443.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="655.9" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.resetInterestOps (4 samples, 0.09%)</title><rect x="652.9" y="1427.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="655.9" y="1438.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (1 samples, 0.02%)</title><rect x="653.2" y="1411.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="656.2" y="1422.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.04%)</title><rect x="653.4" y="1411.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="656.4" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.04%)</title><rect x="653.4" y="1395.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="656.4" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="653.4" y="1379.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="656.4" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="653.4" y="1363.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="656.4" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.evaluateSequential (1 samples, 0.02%)</title><rect x="653.9" y="1507.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="656.9" y="1518.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEach (8 samples, 0.17%)</title><rect x="654.2" y="1507.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="657.2" y="1518.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (8 samples, 0.17%)</title><rect x="654.2" y="1491.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="657.2" y="1502.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.sourceSpliterator (2 samples, 0.04%)</title><rect x="654.2" y="1475.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="657.2" y="1486.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.evaluateSequential (6 samples, 0.13%)</title><rect x="654.7" y="1475.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="657.7" y="1486.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp.evaluateSequential (6 samples, 0.13%)</title><rect x="654.7" y="1459.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="657.7" y="1470.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (6 samples, 0.13%)</title><rect x="654.7" y="1443.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="657.7" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (6 samples, 0.13%)</title><rect x="654.7" y="1427.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="657.7" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (5 samples, 0.11%)</title><rect x="654.7" y="1411.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="657.7" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.02%)</title><rect x="655.4" y="1395.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="658.4" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment$$Lambda$289/2052560467.test (1 samples, 0.02%)</title><rect x="655.4" y="1379.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="658.4" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.02%)</title><rect x="655.7" y="1395.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="658.7" y="1406.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.02%)</title><rect x="656.0" y="1411.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="659.0" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.02%)</title><rect x="656.0" y="1395.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="659.0" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.getFence (1 samples, 0.02%)</title><rect x="656.0" y="1379.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="659.0" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AsyncTriggerEvent.handle (126 samples, 2.69%)</title><rect x="656.2" y="1507.0" width="31.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="659.2" y="1518.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$207/2005313997.run (59 samples, 1.26%)</title><rect x="656.2" y="1491.0" width="14.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="659.2" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handleSubscribeEvent (59 samples, 1.26%)</title><rect x="656.2" y="1475.0" width="14.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="659.2" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (58 samples, 1.24%)</title><rect x="656.5" y="1459.0" width="14.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="659.5" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (58 samples, 1.24%)</title><rect x="656.5" y="1443.0" width="14.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="659.5" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (58 samples, 1.24%)</title><rect x="656.5" y="1427.0" width="14.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="659.5" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (58 samples, 1.24%)</title><rect x="656.5" y="1411.0" width="14.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="659.5" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$201/766671662.run (57 samples, 1.22%)</title><rect x="656.7" y="1395.0" width="14.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="659.7" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (55 samples, 1.17%)</title><rect x="656.7" y="1379.0" width="13.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="659.7" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onNext (1 samples, 0.02%)</title><rect x="657.0" y="1363.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="660.0" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onNext (1 samples, 0.02%)</title><rect x="657.0" y="1347.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.0" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.asyncReceive (1 samples, 0.02%)</title><rect x="657.0" y="1331.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="660.0" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="657.0" y="1315.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="660.0" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="657.0" y="1299.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="660.0" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1 samples, 0.02%)</title><rect x="657.0" y="1283.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="660.0" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.02%)</title><rect x="657.0" y="1267.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="660.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.offer (1 samples, 0.02%)</title><rect x="657.0" y="1251.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="660.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (1 samples, 0.02%)</title><rect x="657.0" y="1235.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="660.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack$SNode.tryMatch (1 samples, 0.02%)</title><rect x="657.0" y="1219.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="660.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.02%)</title><rect x="657.0" y="1203.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.0" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (50 samples, 1.07%)</title><rect x="657.2" y="1363.0" width="12.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="660.2" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.getAndSet (1 samples, 0.02%)</title><rect x="659.0" y="1347.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="662.0" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_L (1 samples, 0.02%)</title><rect x="659.0" y="1331.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="662.0" y="1342.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="659.0" y="1315.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="662.0" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.signalOnSubscribe (42 samples, 0.90%)</title><rect x="659.2" y="1347.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="662.2" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.onSubscribe (3 samples, 0.06%)</title><rect x="659.2" y="1331.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="662.2" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (3 samples, 0.06%)</title><rect x="659.2" y="1315.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="662.2" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (3 samples, 0.06%)</title><rect x="659.2" y="1299.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="662.2" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.increase (3 samples, 0.06%)</title><rect x="659.2" y="1283.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="662.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.getAndAccumulate (2 samples, 0.04%)</title><rect x="659.5" y="1267.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="662.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.weakCompareAndSetVolatile (1 samples, 0.02%)</title><rect x="659.5" y="1251.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="662.5" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand$$Lambda$271/1739649341.applyAsLong (1 samples, 0.02%)</title><rect x="659.7" y="1251.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="662.7" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.lambda$increase$0 (1 samples, 0.02%)</title><rect x="659.7" y="1235.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="662.7" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onSubscribe (39 samples, 0.83%)</title><rect x="660.0" y="1331.0" width="9.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="663.0" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (39 samples, 0.83%)</title><rect x="660.0" y="1315.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="663.0" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (37 samples, 0.79%)</title><rect x="660.5" y="1299.0" width="9.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="663.5" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (36 samples, 0.77%)</title><rect x="660.7" y="1283.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="663.7" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (36 samples, 0.77%)</title><rect x="660.7" y="1267.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="663.7" y="1278.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="660.7" y="1251.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="663.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.offer (35 samples, 0.75%)</title><rect x="661.0" y="1251.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="664.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (35 samples, 0.75%)</title><rect x="661.0" y="1235.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="664.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack$SNode.tryMatch (34 samples, 0.73%)</title><rect x="661.2" y="1219.0" width="8.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="664.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (34 samples, 0.73%)</title><rect x="661.2" y="1203.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="664.2" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="661.2" y="1187.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="664.2" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="661.2" y="1171.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="664.2" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="661.2" y="1155.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="664.2" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (33 samples, 0.70%)</title><rect x="661.5" y="1187.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="664.5" y="1198.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.09%)</title><rect x="661.5" y="1171.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="664.5" y="1182.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.06%)</title><rect x="661.7" y="1155.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="664.7" y="1166.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="662.5" y="1171.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="665.5" y="1182.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (28 samples, 0.60%)</title><rect x="662.8" y="1171.0" width="7.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="665.8" y="1182.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.58%)</title><rect x="663.0" y="1155.0" width="6.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="666.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.58%)</title><rect x="663.0" y="1139.0" width="6.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="666.0" y="1150.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.53%)</title><rect x="663.5" y="1123.0" width="6.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="666.5" y="1134.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.53%)</title><rect x="663.5" y="1107.0" width="6.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="666.5" y="1118.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.53%)</title><rect x="663.5" y="1091.0" width="6.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="666.5" y="1102.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.53%)</title><rect x="663.5" y="1075.0" width="6.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="666.5" y="1086.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.51%)</title><rect x="663.8" y="1059.0" width="6.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="666.8" y="1070.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.49%)</title><rect x="664.0" y="1043.0" width="5.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="667.0" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (1 samples, 0.02%)</title><rect x="669.8" y="1363.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="672.8" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (1 samples, 0.02%)</title><rect x="669.8" y="1347.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="672.8" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (1 samples, 0.02%)</title><rect x="669.8" y="1331.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="672.8" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (1 samples, 0.02%)</title><rect x="669.8" y="1315.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="672.8" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.readAvailable (2 samples, 0.04%)</title><rect x="670.1" y="1363.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="673.1" y="1374.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.04%)</title><rect x="670.1" y="1347.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="673.1" y="1358.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.04%)</title><rect x="670.1" y="1331.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="673.1" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.04%)</title><rect x="670.1" y="1315.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="673.1" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.04%)</title><rect x="670.1" y="1299.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.1" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2 samples, 0.04%)</title><rect x="670.1" y="1283.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="673.1" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2 samples, 0.04%)</title><rect x="670.1" y="1267.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="673.1" y="1278.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="670.1" y="1251.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="673.1" y="1262.0"></text>
</g>
<g>
<title>__libc_read (2 samples, 0.04%)</title><rect x="670.1" y="1235.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="673.1" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (2 samples, 0.04%)</title><rect x="670.6" y="1379.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="673.6" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$213/1166291669.run (67 samples, 1.43%)</title><rect x="671.1" y="1491.0" width="16.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="674.1" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.startSubscription (67 samples, 1.43%)</title><rect x="671.1" y="1475.0" width="16.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="674.1" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (66 samples, 1.41%)</title><rect x="671.3" y="1459.0" width="16.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="674.3" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (63 samples, 1.35%)</title><rect x="671.8" y="1443.0" width="15.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="674.8" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.offer (63 samples, 1.35%)</title><rect x="671.8" y="1427.0" width="15.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.8" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (63 samples, 1.35%)</title><rect x="671.8" y="1411.0" width="15.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="674.8" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack$SNode.tryMatch (56 samples, 1.20%)</title><rect x="673.1" y="1395.0" width="14.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="676.1" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (56 samples, 1.20%)</title><rect x="673.1" y="1379.0" width="14.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="676.1" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (56 samples, 1.20%)</title><rect x="673.1" y="1363.0" width="14.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="676.1" y="1374.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="673.1" y="1347.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="676.1" y="1358.0"></text>
</g>
<g>
<title>Unsafe_Unpark (11 samples, 0.23%)</title><rect x="673.3" y="1347.0" width="2.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="676.3" y="1358.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.02%)</title><rect x="673.8" y="1331.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="676.8" y="1342.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.04%)</title><rect x="674.1" y="1331.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="677.1" y="1342.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.04%)</title><rect x="674.6" y="1331.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="677.6" y="1342.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="675.1" y="1331.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="678.1" y="1342.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.02%)</title><rect x="675.4" y="1331.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="678.4" y="1342.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.02%)</title><rect x="675.6" y="1331.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="678.6" y="1342.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="675.9" y="1331.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="678.9" y="1342.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (44 samples, 0.94%)</title><rect x="676.1" y="1347.0" width="11.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="679.1" y="1358.0"></text>
</g>
<g>
<title>[unknown] (36 samples, 0.77%)</title><rect x="678.1" y="1331.0" width="9.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="681.1" y="1342.0"></text>
</g>
<g>
<title>[unknown] (36 samples, 0.77%)</title><rect x="678.1" y="1315.0" width="9.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="681.1" y="1326.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.64%)</title><rect x="679.6" y="1299.0" width="7.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="682.6" y="1310.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.64%)</title><rect x="679.6" y="1283.0" width="7.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="682.6" y="1294.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.64%)</title><rect x="679.6" y="1267.0" width="7.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="682.6" y="1278.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.64%)</title><rect x="679.6" y="1251.0" width="7.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="682.6" y="1262.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.64%)</title><rect x="679.6" y="1235.0" width="7.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="682.6" y="1246.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.62%)</title><rect x="679.9" y="1219.0" width="7.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="682.9" y="1230.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="686.7" y="1203.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="689.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="686.7" y="1187.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="689.7" y="1198.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="686.7" y="1171.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="689.7" y="1182.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="686.7" y="1155.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="689.7" y="1166.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="686.7" y="1139.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="689.7" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="687.0" y="1123.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="690.0" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="687.0" y="1107.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="690.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.snode (2 samples, 0.04%)</title><rect x="687.2" y="1395.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="690.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack$SNode.&lt;init&gt; (2 samples, 0.04%)</title><rect x="687.2" y="1379.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="690.2" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$303/1457596202.run (1 samples, 0.02%)</title><rect x="687.7" y="1443.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="690.7" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (1 samples, 0.02%)</title><rect x="687.7" y="1427.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="690.7" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (1 samples, 0.02%)</title><rect x="687.7" y="1411.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="690.7" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$Http1WriteSubscription.request (1 samples, 0.02%)</title><rect x="687.7" y="1395.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="690.7" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (1 samples, 0.02%)</title><rect x="687.7" y="1379.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="690.7" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.purgeExpiredConnectionsAndReturnNextDeadline (13 samples, 0.28%)</title><rect x="688.0" y="1507.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="691.0" y="1518.0"></text>
</g>
<g>
<title>java/time/Instant.now (7 samples, 0.15%)</title><rect x="688.0" y="1491.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="691.0" y="1502.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (7 samples, 0.15%)</title><rect x="688.0" y="1475.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="691.0" y="1486.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (4 samples, 0.09%)</title><rect x="688.0" y="1459.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="691.0" y="1470.0"></text>
</g>
<g>
<title>java/time/Instant.create (3 samples, 0.06%)</title><rect x="688.2" y="1443.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="691.2" y="1454.0"></text>
</g>
<g>
<title>java/time/Instant.&lt;init&gt; (1 samples, 0.02%)</title><rect x="688.5" y="1427.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="691.5" y="1438.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.02%)</title><rect x="688.7" y="1427.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="691.7" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (3 samples, 0.06%)</title><rect x="689.0" y="1459.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="692.0" y="1470.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (3 samples, 0.06%)</title><rect x="689.0" y="1443.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="692.0" y="1454.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="689.2" y="1427.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="692.2" y="1438.0"></text>
</g>
<g>
<title>os::javaTimeSystemUTC(long&amp;, long&amp;) (1 samples, 0.02%)</title><rect x="689.5" y="1427.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="692.5" y="1438.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="689.5" y="1411.0" width="0.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="692.5" y="1422.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="689.5" y="1395.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="692.5" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.purgeExpiredConnectionsAndReturnNextDeadline (6 samples, 0.13%)</title><rect x="689.7" y="1491.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="692.7" y="1502.0"></text>
</g>
<g>
<title>java/time/Instant.until (1 samples, 0.02%)</title><rect x="690.5" y="1475.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="693.5" y="1486.0"></text>
</g>
<g>
<title>java/lang/Math.subtractExact (1 samples, 0.02%)</title><rect x="690.5" y="1459.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="693.5" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.purgeUntil (2 samples, 0.04%)</title><rect x="690.7" y="1475.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="693.7" y="1486.0"></text>
</g>
<g>
<title>java/time/Instant.isAfter (1 samples, 0.02%)</title><rect x="691.0" y="1459.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.0" y="1470.0"></text>
</g>
<g>
<title>java/time/Instant.compareTo (1 samples, 0.02%)</title><rect x="691.0" y="1443.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="694.0" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.events (9 samples, 0.19%)</title><rect x="691.2" y="1507.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="694.2" y="1518.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="691.5" y="1491.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="694.5" y="1502.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="691.5" y="1475.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="694.5" y="1486.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.04%)</title><rect x="691.7" y="1491.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="694.7" y="1502.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.04%)</title><rect x="691.7" y="1475.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="694.7" y="1486.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (1 samples, 0.02%)</title><rect x="691.7" y="1459.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="694.7" y="1470.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (1 samples, 0.02%)</title><rect x="691.7" y="1443.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="694.7" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.02%)</title><rect x="692.0" y="1459.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="695.0" y="1470.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.02%)</title><rect x="692.0" y="1443.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="695.0" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (5 samples, 0.11%)</title><rect x="692.2" y="1491.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="695.2" y="1502.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.02%)</title><rect x="692.5" y="1475.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="695.5" y="1486.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (3 samples, 0.06%)</title><rect x="692.7" y="1475.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="695.7" y="1486.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (3 samples, 0.06%)</title><rect x="692.7" y="1459.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="695.7" y="1470.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (3 samples, 0.06%)</title><rect x="692.7" y="1443.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="695.7" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (3 samples, 0.06%)</title><rect x="692.7" y="1427.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="695.7" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (2 samples, 0.04%)</title><rect x="693.5" y="1507.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="696.5" y="1518.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.register (2 samples, 0.04%)</title><rect x="693.5" y="1491.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="696.5" y="1502.0"></text>
</g>
<g>
<title>java/nio/channels/SelectionKey.attach (2 samples, 0.04%)</title><rect x="693.5" y="1475.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="696.5" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.getAndSet (2 samples, 0.04%)</title><rect x="693.5" y="1459.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="696.5" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.accessCheck (1 samples, 0.02%)</title><rect x="693.5" y="1443.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="696.5" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.valueCheck (1 samples, 0.02%)</title><rect x="693.8" y="1443.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="696.8" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.isReferenced (2 samples, 0.04%)</title><rect x="694.0" y="1507.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="697.0" y="1518.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.facade (2 samples, 0.04%)</title><rect x="694.0" y="1491.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="697.0" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.purgeTimeoutsAndReturnNextDeadline (1 samples, 0.02%)</title><rect x="694.5" y="1507.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="697.5" y="1518.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.readyOps (1 samples, 0.02%)</title><rect x="694.8" y="1507.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="697.8" y="1518.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.ensureValid (1 samples, 0.02%)</title><rect x="694.8" y="1491.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="697.8" y="1502.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (84 samples, 1.79%)</title><rect x="695.0" y="1507.0" width="21.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="698.0" y="1518.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (82 samples, 1.75%)</title><rect x="695.5" y="1491.0" width="20.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="698.5" y="1502.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (81 samples, 1.73%)</title><rect x="695.8" y="1475.0" width="20.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="698.8" y="1486.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.02%)</title><rect x="696.0" y="1459.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="699.0" y="1470.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.02%)</title><rect x="696.0" y="1443.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="699.0" y="1454.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.02%)</title><rect x="696.0" y="1427.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="699.0" y="1438.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.02%)</title><rect x="696.0" y="1411.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="699.0" y="1422.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="696.0" y="1395.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="699.0" y="1406.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.02%)</title><rect x="696.0" y="1379.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="699.0" y="1390.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.02%)</title><rect x="696.0" y="1363.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="699.0" y="1374.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="696.3" y="1459.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="699.3" y="1470.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (49 samples, 1.05%)</title><rect x="696.8" y="1459.0" width="12.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="699.8" y="1470.0"></text>
</g>
<g>
<title>[unknown] (46 samples, 0.98%)</title><rect x="697.3" y="1443.0" width="11.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="700.3" y="1454.0"></text>
</g>
<g>
<title>epoll_wait (46 samples, 0.98%)</title><rect x="697.3" y="1427.0" width="11.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="700.3" y="1438.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 0.81%)</title><rect x="699.3" y="1411.0" width="9.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="702.3" y="1422.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 0.81%)</title><rect x="699.3" y="1395.0" width="9.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="702.3" y="1406.0"></text>
</g>
<g>
<title>[unknown] (36 samples, 0.77%)</title><rect x="699.8" y="1379.0" width="9.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="702.8" y="1390.0"></text>
</g>
<g>
<title>[unknown] (35 samples, 0.75%)</title><rect x="700.1" y="1363.0" width="8.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="703.1" y="1374.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.73%)</title><rect x="700.3" y="1347.0" width="8.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="703.3" y="1358.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.62%)</title><rect x="701.6" y="1331.0" width="7.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="704.6" y="1342.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.53%)</title><rect x="702.6" y="1315.0" width="6.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="705.6" y="1326.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.30%)</title><rect x="705.3" y="1299.0" width="3.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="708.3" y="1310.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.21%)</title><rect x="706.4" y="1283.0" width="2.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="709.4" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="708.6" y="1267.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="711.6" y="1278.0"></text>
</g>
<g>
<title>epoll_wait (1 samples, 0.02%)</title><rect x="708.9" y="1443.0" width="0.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="711.9" y="1454.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (23 samples, 0.49%)</title><rect x="709.1" y="1459.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="712.1" y="1470.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.clearInterrupt (20 samples, 0.43%)</title><rect x="709.1" y="1443.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="712.1" y="1454.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (20 samples, 0.43%)</title><rect x="709.1" y="1427.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.1" y="1438.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.30%)</title><rect x="709.1" y="1411.0" width="3.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="712.1" y="1422.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.02%)</title><rect x="709.1" y="1395.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="712.1" y="1406.0"></text>
</g>
<g>
<title>__libc_read (1 samples, 0.02%)</title><rect x="709.1" y="1379.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="712.1" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.1" y="1363.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="712.1" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.1" y="1347.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="712.1" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.1" y="1331.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="712.1" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.1" y="1315.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="712.1" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.1" y="1299.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="712.1" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.1" y="1283.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="712.1" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.1" y="1267.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="712.1" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.1" y="1251.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="712.1" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.1" y="1235.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="712.1" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.1" y="1219.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="712.1" y="1230.0"></text>
</g>
<g>
<title>JavaThread::~JavaThread() (1 samples, 0.02%)</title><rect x="709.4" y="1395.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="712.4" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.4" y="1379.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="712.4" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.4" y="1363.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="712.4" y="1374.0"></text>
</g>
<g>
<title>__libc_read (1 samples, 0.02%)</title><rect x="709.4" y="1347.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="712.4" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.4" y="1331.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="712.4" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.4" y="1315.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="712.4" y="1326.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="709.6" y="1395.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="712.6" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.6" y="1379.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="712.6" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.6" y="1363.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="712.6" y="1374.0"></text>
</g>
<g>
<title>__libc_read (1 samples, 0.02%)</title><rect x="709.6" y="1347.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="712.6" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.6" y="1331.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="712.6" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="709.6" y="1315.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="712.6" y="1326.0"></text>
</g>
<g>
<title>__libc_read (2 samples, 0.04%)</title><rect x="709.9" y="1379.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="712.9" y="1390.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="709.9" y="1363.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="712.9" y="1374.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="709.9" y="1347.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="712.9" y="1358.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="709.9" y="1331.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="712.9" y="1342.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="709.9" y="1315.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="712.9" y="1326.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="709.9" y="1299.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="712.9" y="1310.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="709.9" y="1283.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="712.9" y="1294.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="709.9" y="1267.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="712.9" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="710.1" y="1251.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="713.1" y="1262.0"></text>
</g>
<g>
<title>__libc_read (9 samples, 0.19%)</title><rect x="710.4" y="1395.0" width="2.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="713.4" y="1406.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="710.6" y="1379.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="713.6" y="1390.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="710.6" y="1363.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="713.6" y="1374.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="710.6" y="1347.0" width="2.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="713.6" y="1358.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="710.6" y="1331.0" width="2.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="713.6" y="1342.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="710.6" y="1315.0" width="2.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="713.6" y="1326.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="710.6" y="1299.0" width="2.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="713.6" y="1310.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="710.6" y="1283.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="713.6" y="1294.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="710.9" y="1267.0" width="1.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="713.9" y="1278.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="711.6" y="1251.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="714.6" y="1262.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="711.9" y="1235.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="714.9" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="712.4" y="1219.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="715.4" y="1230.0"></text>
</g>
<g>
<title>__libc_read (6 samples, 0.13%)</title><rect x="712.7" y="1411.0" width="1.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="715.7" y="1422.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="713.4" y="1395.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="716.4" y="1406.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="713.4" y="1379.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="716.4" y="1390.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="713.4" y="1363.0" width="0.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="716.4" y="1374.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="713.4" y="1347.0" width="0.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="716.4" y="1358.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="713.4" y="1331.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="716.4" y="1342.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="713.4" y="1315.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="716.4" y="1326.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="713.4" y="1299.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="716.4" y="1310.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="713.7" y="1283.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="716.7" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="713.9" y="1267.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="716.9" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.06%)</title><rect x="714.2" y="1443.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="717.2" y="1454.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.02%)</title><rect x="714.2" y="1427.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="717.2" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.02%)</title><rect x="714.2" y="1411.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="717.2" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.02%)</title><rect x="714.2" y="1395.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="717.2" y="1406.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (2 samples, 0.04%)</title><rect x="714.4" y="1427.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="717.4" y="1438.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (2 samples, 0.04%)</title><rect x="714.4" y="1411.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="717.4" y="1422.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.02%)</title><rect x="714.4" y="1395.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="717.4" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="714.4" y="1379.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="717.4" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="714.4" y="1363.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="717.4" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="714.4" y="1347.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="717.4" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="714.4" y="1331.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="717.4" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="714.4" y="1315.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="717.4" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="714.4" y="1299.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="717.4" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="714.4" y="1283.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="717.4" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="714.4" y="1267.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="717.4" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateReadyOps (1 samples, 0.02%)</title><rect x="714.7" y="1395.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="717.7" y="1406.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (1 samples, 0.02%)</title><rect x="714.7" y="1379.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="717.7" y="1390.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processUpdateQueue (4 samples, 0.09%)</title><rect x="714.9" y="1459.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="717.9" y="1470.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.04%)</title><rect x="714.9" y="1443.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="717.9" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap.putIfAbsent (1 samples, 0.02%)</title><rect x="715.4" y="1443.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="718.4" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.02%)</title><rect x="715.4" y="1427.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="718.4" y="1438.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="715.4" y="1411.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="718.4" y="1422.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateInterestOps (1 samples, 0.02%)</title><rect x="715.7" y="1443.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="718.7" y="1454.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateInterestOps (1 samples, 0.02%)</title><rect x="715.7" y="1427.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="718.7" y="1438.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.02%)</title><rect x="715.9" y="1459.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="718.9" y="1470.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.02%)</title><rect x="715.9" y="1443.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="718.9" y="1454.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="715.9" y="1427.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="718.9" y="1438.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title><rect x="715.9" y="1411.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="718.9" y="1422.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title><rect x="715.9" y="1395.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="718.9" y="1406.0"></text>
</g>
<g>
<title>java/lang/Thread.currentThread (1 samples, 0.02%)</title><rect x="715.9" y="1379.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="718.9" y="1390.0"></text>
</g>
<g>
<title>JVM_CurrentThread (1 samples, 0.02%)</title><rect x="715.9" y="1363.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="718.9" y="1374.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (9 samples, 0.19%)</title><rect x="716.2" y="1507.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="719.2" y="1518.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (9 samples, 0.19%)</title><rect x="716.2" y="1491.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="719.2" y="1502.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (8 samples, 0.17%)</title><rect x="716.2" y="1475.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="719.2" y="1486.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (6 samples, 0.13%)</title><rect x="716.2" y="1459.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="719.2" y="1470.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="716.2" y="1443.0" width="1.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="719.2" y="1454.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.02%)</title><rect x="716.2" y="1427.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="719.2" y="1438.0"></text>
</g>
<g>
<title>epoll_wait (5 samples, 0.11%)</title><rect x="716.4" y="1427.0" width="1.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="719.4" y="1438.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="717.2" y="1411.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="720.2" y="1422.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="717.2" y="1395.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="720.2" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="717.4" y="1379.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="720.4" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="717.4" y="1363.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="720.4" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="717.4" y="1347.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="720.4" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="717.4" y="1331.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="720.4" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="717.4" y="1315.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="720.4" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (1 samples, 0.02%)</title><rect x="717.7" y="1459.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="720.7" y="1470.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.02%)</title><rect x="717.7" y="1443.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="720.7" y="1454.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndUpdateReadyOps (1 samples, 0.02%)</title><rect x="717.7" y="1427.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="720.7" y="1438.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processUpdateQueue (1 samples, 0.02%)</title><rect x="717.9" y="1459.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="720.9" y="1470.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.02%)</title><rect x="717.9" y="1443.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="720.9" y="1454.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (1 samples, 0.02%)</title><rect x="718.2" y="1475.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="721.2" y="1486.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.02%)</title><rect x="718.5" y="1507.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="721.5" y="1518.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.02%)</title><rect x="718.5" y="1491.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="721.5" y="1502.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.02%)</title><rect x="718.5" y="1475.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="721.5" y="1486.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.02%)</title><rect x="718.7" y="1507.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="721.7" y="1518.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.02%)</title><rect x="718.7" y="1491.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="721.7" y="1502.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.02%)</title><rect x="718.7" y="1475.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="721.7" y="1486.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="718.7" y="1459.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="721.7" y="1470.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="718.7" y="1443.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="721.7" y="1454.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (310 samples, 6.62%)</title><rect x="719.0" y="1523.0" width="78.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="722.0" y="1534.0">one/nio/s..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.02%)</title><rect x="722.0" y="1507.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="725.0" y="1518.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (56 samples, 1.20%)</title><rect x="722.2" y="1507.0" width="14.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="725.2" y="1518.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (54 samples, 1.15%)</title><rect x="722.7" y="1491.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="725.7" y="1502.0"></text>
</g>
<g>
<title>[unknown] (46 samples, 0.98%)</title><rect x="724.0" y="1475.0" width="11.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="727.0" y="1486.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.02%)</title><rect x="724.0" y="1459.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="727.0" y="1470.0"></text>
</g>
<g>
<title>epoll_wait (45 samples, 0.96%)</title><rect x="724.3" y="1459.0" width="11.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="727.3" y="1470.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 0.88%)</title><rect x="725.3" y="1443.0" width="10.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="728.3" y="1454.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 0.88%)</title><rect x="725.3" y="1427.0" width="10.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="728.3" y="1438.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 0.81%)</title><rect x="726.0" y="1411.0" width="9.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="729.0" y="1422.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 0.81%)</title><rect x="726.0" y="1395.0" width="9.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="729.0" y="1406.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 0.81%)</title><rect x="726.0" y="1379.0" width="9.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="729.0" y="1390.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.64%)</title><rect x="728.0" y="1363.0" width="7.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="731.0" y="1374.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.51%)</title><rect x="729.5" y="1347.0" width="6.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="732.5" y="1358.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.34%)</title><rect x="731.6" y="1331.0" width="4.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="734.6" y="1342.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.21%)</title><rect x="733.1" y="1315.0" width="2.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="736.1" y="1326.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="734.1" y="1299.0" width="1.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="737.1" y="1310.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="734.8" y="1283.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="737.8" y="1294.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="734.8" y="1267.0" width="0.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="737.8" y="1278.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="735.1" y="1251.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="738.1" y="1262.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="735.1" y="1235.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="738.1" y="1246.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="735.1" y="1219.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="738.1" y="1230.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="735.1" y="1203.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="738.1" y="1214.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="735.1" y="1187.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="738.1" y="1198.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="735.6" y="1475.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="738.6" y="1486.0"></text>
</g>
<g>
<title>epoll_wait (2 samples, 0.04%)</title><rect x="735.8" y="1475.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="738.8" y="1486.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (241 samples, 5.15%)</title><rect x="736.3" y="1507.0" width="60.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="739.3" y="1518.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (240 samples, 5.13%)</title><rect x="736.3" y="1491.0" width="60.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="739.3" y="1502.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (124 samples, 2.65%)</title><rect x="736.6" y="1475.0" width="31.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="739.6" y="1486.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (87 samples, 1.86%)</title><rect x="739.6" y="1459.0" width="22.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="742.6" y="1470.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (86 samples, 1.84%)</title><rect x="739.9" y="1443.0" width="21.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="742.9" y="1454.0">o..</text>
</g>
<g>
<title>RequestHandler2_entity.handleRequest (66 samples, 1.41%)</title><rect x="739.9" y="1427.0" width="16.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="742.9" y="1438.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.09%)</title><rect x="739.9" y="1411.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="742.9" y="1422.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="740.1" y="1395.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="743.1" y="1406.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.02%)</title><rect x="740.1" y="1379.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="743.1" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.02%)</title><rect x="740.4" y="1395.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="743.4" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="740.6" y="1395.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="743.6" y="1406.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController.entity (62 samples, 1.32%)</title><rect x="740.9" y="1411.0" width="15.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="743.9" y="1422.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.02%)</title><rect x="741.1" y="1395.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="744.1" y="1406.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.02%)</title><rect x="741.1" y="1379.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="744.1" y="1390.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.02%)</title><rect x="741.1" y="1363.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="744.1" y="1374.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.02%)</title><rect x="741.1" y="1347.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="744.1" y="1358.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.02%)</title><rect x="741.1" y="1331.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="744.1" y="1342.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(Bytecodes::Code, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.02%)</title><rect x="741.1" y="1315.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="744.1" y="1326.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.02%)</title><rect x="741.1" y="1299.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="744.1" y="1310.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.02%)</title><rect x="741.1" y="1283.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="744.1" y="1294.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.02%)</title><rect x="741.1" y="1267.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="744.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1933348758.linkToTargetMethod (1 samples, 0.02%)</title><rect x="741.4" y="1395.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="744.4" y="1406.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/575276969.invokeStatic (1 samples, 0.02%)</title><rect x="741.4" y="1379.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="744.4" y="1390.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.09%)</title><rect x="741.6" y="1395.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="744.6" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="741.9" y="1379.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="744.9" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="741.9" y="1363.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="744.9" y="1374.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.02%)</title><rect x="742.1" y="1363.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="745.1" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="742.1" y="1347.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="745.1" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="742.1" y="1331.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="745.1" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="742.1" y="1315.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="745.1" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="742.1" y="1299.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="745.1" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="742.1" y="1283.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="745.1" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="742.1" y="1267.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="745.1" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="742.1" y="1251.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="745.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="742.4" y="1379.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="745.4" y="1390.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="742.4" y="1363.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="745.4" y="1374.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="742.4" y="1347.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="745.4" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController$RF.of (9 samples, 0.19%)</title><rect x="742.6" y="1395.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="745.6" y="1406.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (4 samples, 0.09%)</title><rect x="742.6" y="1379.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="745.6" y="1390.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (1 samples, 0.02%)</title><rect x="742.9" y="1363.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="745.9" y="1374.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.&lt;init&gt; (1 samples, 0.02%)</title><rect x="742.9" y="1347.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="745.9" y="1358.0"></text>
</g>
<g>
<title>com/google/common/base/CharMatcher.none (1 samples, 0.02%)</title><rect x="742.9" y="1331.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="745.9" y="1342.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (2 samples, 0.04%)</title><rect x="743.2" y="1363.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="746.2" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (2 samples, 0.04%)</title><rect x="743.2" y="1347.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="746.2" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (2 samples, 0.04%)</title><rect x="743.2" y="1331.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="746.2" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (2 samples, 0.04%)</title><rect x="743.2" y="1315.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="746.2" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (2 samples, 0.04%)</title><rect x="743.2" y="1299.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="746.2" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (2 samples, 0.04%)</title><rect x="743.2" y="1283.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="746.2" y="1294.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (2 samples, 0.04%)</title><rect x="743.2" y="1267.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="746.2" y="1278.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (2 samples, 0.04%)</title><rect x="743.2" y="1251.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="746.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (2 samples, 0.04%)</title><rect x="743.2" y="1235.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="746.2" y="1246.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.04%)</title><rect x="743.2" y="1219.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="746.2" y="1230.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (2 samples, 0.04%)</title><rect x="743.2" y="1203.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="746.2" y="1214.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (2 samples, 0.04%)</title><rect x="743.2" y="1187.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="746.2" y="1198.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (2 samples, 0.04%)</title><rect x="743.2" y="1171.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="746.2" y="1182.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.04%)</title><rect x="743.2" y="1155.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="746.2" y="1166.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.02%)</title><rect x="743.2" y="1139.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="746.2" y="1150.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.02%)</title><rect x="743.2" y="1123.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="746.2" y="1134.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.02%)</title><rect x="743.2" y="1107.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="746.2" y="1118.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.02%)</title><rect x="743.2" y="1091.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="746.2" y="1102.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.02%)</title><rect x="743.2" y="1075.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="746.2" y="1086.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.02%)</title><rect x="743.4" y="1139.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="746.4" y="1150.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.02%)</title><rect x="743.4" y="1123.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="746.4" y="1134.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.02%)</title><rect x="743.4" y="1107.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="746.4" y="1118.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (5 samples, 0.11%)</title><rect x="743.7" y="1379.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="746.7" y="1390.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (2 samples, 0.04%)</title><rect x="743.7" y="1363.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="746.7" y="1374.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (2 samples, 0.04%)</title><rect x="743.7" y="1347.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="746.7" y="1358.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (1 samples, 0.02%)</title><rect x="743.9" y="1331.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="746.9" y="1342.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (1 samples, 0.02%)</title><rect x="743.9" y="1315.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="746.9" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="743.9" y="1299.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="746.9" y="1310.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.02%)</title><rect x="743.9" y="1283.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="746.9" y="1294.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.next (2 samples, 0.04%)</title><rect x="744.2" y="1363.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="747.2" y="1374.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (1 samples, 0.02%)</title><rect x="744.4" y="1347.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="747.4" y="1358.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (1 samples, 0.02%)</title><rect x="744.7" y="1363.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="747.7" y="1374.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (1 samples, 0.02%)</title><rect x="744.7" y="1347.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="747.7" y="1358.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (1 samples, 0.02%)</title><rect x="744.7" y="1331.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="747.7" y="1342.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1$1.&lt;init&gt; (1 samples, 0.02%)</title><rect x="744.7" y="1315.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="747.7" y="1326.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="744.7" y="1299.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="747.7" y="1310.0"></text>
</g>
<g>
<title>ru/mail/polis/service/rest/RestController.asyncExecute (46 samples, 0.98%)</title><rect x="744.9" y="1395.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="747.9" y="1406.0"></text>
</g>
<g>
<title>one/nio/server/Server.asyncExecute (46 samples, 0.98%)</title><rect x="744.9" y="1379.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="747.9" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (46 samples, 0.98%)</title><rect x="744.9" y="1363.0" width="11.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="747.9" y="1374.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="744.9" y="1347.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="747.9" y="1358.0"></text>
</g>
<g>
<title>one/nio/server/WorkerPool$WaitingSynchronousQueue.offer (45 samples, 0.96%)</title><rect x="745.2" y="1347.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="748.2" y="1358.0"></text>
</g>
<g>
<title>one/nio/server/WorkerPool$WaitingSynchronousQueue.offer (44 samples, 0.94%)</title><rect x="745.4" y="1331.0" width="11.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="748.4" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.offer (44 samples, 0.94%)</title><rect x="745.4" y="1315.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="748.4" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (44 samples, 0.94%)</title><rect x="745.4" y="1299.0" width="11.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="748.4" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack$SNode.tryMatch (42 samples, 0.90%)</title><rect x="745.9" y="1283.0" width="10.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="748.9" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (42 samples, 0.90%)</title><rect x="745.9" y="1267.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="748.9" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (42 samples, 0.90%)</title><rect x="745.9" y="1251.0" width="10.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="748.9" y="1262.0"></text>
</g>
<g>
<title>Unsafe_Unpark (8 samples, 0.17%)</title><rect x="745.9" y="1235.0" width="2.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="748.9" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.02%)</title><rect x="746.4" y="1219.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="749.4" y="1230.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (2 samples, 0.04%)</title><rect x="746.7" y="1219.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="749.7" y="1230.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.04%)</title><rect x="747.2" y="1219.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="750.2" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.02%)</title><rect x="747.7" y="1219.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="750.7" y="1230.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="747.9" y="1235.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="750.9" y="1246.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (33 samples, 0.70%)</title><rect x="748.2" y="1235.0" width="8.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="751.2" y="1246.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 0.66%)</title><rect x="748.7" y="1219.0" width="7.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="751.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 0.66%)</title><rect x="748.7" y="1203.0" width="7.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="751.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.62%)</title><rect x="749.2" y="1187.0" width="7.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="752.2" y="1198.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.62%)</title><rect x="749.2" y="1171.0" width="7.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="752.2" y="1182.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.62%)</title><rect x="749.2" y="1155.0" width="7.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="752.2" y="1166.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.58%)</title><rect x="749.7" y="1139.0" width="6.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="752.7" y="1150.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 0.56%)</title><rect x="750.0" y="1123.0" width="6.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="753.0" y="1134.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 0.56%)</title><rect x="750.0" y="1107.0" width="6.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="753.0" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.02%)</title><rect x="756.5" y="1427.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="759.5" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.02%)</title><rect x="756.5" y="1411.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="759.5" y="1422.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (13 samples, 0.28%)</title><rect x="756.8" y="1427.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="759.8" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap.get (13 samples, 0.28%)</title><rect x="756.8" y="1411.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="759.8" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.23%)</title><rect x="756.8" y="1395.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="759.8" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.equals (9 samples, 0.19%)</title><rect x="757.3" y="1379.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="760.3" y="1390.0"></text>
</g>
<g>
<title>RequestHandler2_entity.handleRequest (1 samples, 0.02%)</title><rect x="757.5" y="1363.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="760.5" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="757.8" y="1363.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="760.8" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="757.8" y="1347.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="760.8" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="757.8" y="1331.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="760.8" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="757.8" y="1315.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="760.8" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="757.8" y="1299.0" width="0.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="760.8" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="757.8" y="1283.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="760.8" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="757.8" y="1267.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="760.8" y="1278.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="758.0" y="1363.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="761.0" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="758.3" y="1363.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="761.3" y="1374.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.09%)</title><rect x="758.5" y="1363.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="761.5" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.04%)</title><rect x="759.5" y="1395.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="762.5" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.04%)</title><rect x="759.5" y="1379.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="762.5" y="1390.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.02%)</title><rect x="759.8" y="1363.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="762.8" y="1374.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (6 samples, 0.13%)</title><rect x="760.0" y="1427.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="763.0" y="1438.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.11%)</title><rect x="760.3" y="1411.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="763.3" y="1422.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.09%)</title><rect x="760.5" y="1395.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="763.5" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="760.8" y="1379.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="763.8" y="1390.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="761.3" y="1379.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="764.3" y="1390.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.13%)</title><rect x="761.6" y="1459.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="764.6" y="1470.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.06%)</title><rect x="761.8" y="1443.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="764.8" y="1454.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="761.8" y="1427.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="764.8" y="1438.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.02%)</title><rect x="761.8" y="1411.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="764.8" y="1422.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="762.1" y="1427.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="765.1" y="1438.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="762.3" y="1427.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="765.3" y="1438.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="762.6" y="1443.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="765.6" y="1454.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="762.6" y="1427.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="765.6" y="1438.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.02%)</title><rect x="762.8" y="1411.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="765.8" y="1422.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.04%)</title><rect x="763.1" y="1459.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="766.1" y="1470.0"></text>
</g>
<g>
<title>java/lang/System.arraycopy (2 samples, 0.04%)</title><rect x="763.1" y="1443.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="766.1" y="1454.0"></text>
</g>
<g>
<title>JVM_ArrayCopy (1 samples, 0.02%)</title><rect x="763.1" y="1427.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="766.1" y="1438.0"></text>
</g>
<g>
<title>Copy::conjoint_memory_atomic(void const*, void*, unsigned long) (1 samples, 0.02%)</title><rect x="763.1" y="1411.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="766.1" y="1422.0"></text>
</g>
<g>
<title>TypeArrayKlass::copy_array(arrayOopDesc*, int, arrayOopDesc*, int, int, Thread*) (1 samples, 0.02%)</title><rect x="763.3" y="1427.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="766.3" y="1438.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.17%)</title><rect x="763.6" y="1459.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="766.6" y="1470.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="763.6" y="1443.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="766.6" y="1454.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.11%)</title><rect x="763.8" y="1443.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="766.8" y="1454.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.11%)</title><rect x="763.8" y="1427.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="766.8" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="763.8" y="1411.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="766.8" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="763.8" y="1395.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="766.8" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="763.8" y="1379.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="766.8" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="763.8" y="1363.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="766.8" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="763.8" y="1347.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="766.8" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="763.8" y="1331.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="766.8" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="763.8" y="1315.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="766.8" y="1326.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="764.1" y="1411.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="767.1" y="1422.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.02%)</title><rect x="764.3" y="1395.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="767.3" y="1406.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.02%)</title><rect x="764.3" y="1379.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="767.3" y="1390.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.02%)</title><rect x="764.3" y="1363.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="767.3" y="1374.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="764.6" y="1411.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="767.6" y="1422.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="764.8" y="1411.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="767.8" y="1422.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="765.1" y="1443.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="768.1" y="1454.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="765.1" y="1427.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="768.1" y="1438.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.04%)</title><rect x="765.1" y="1411.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="768.1" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="765.3" y="1395.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="768.3" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="765.3" y="1379.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="768.3" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="765.3" y="1363.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="768.3" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="765.3" y="1347.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="768.3" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="765.3" y="1331.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="768.3" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="765.3" y="1315.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="768.3" y="1326.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.19%)</title><rect x="765.6" y="1459.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="768.6" y="1470.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.19%)</title><rect x="765.6" y="1443.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="768.6" y="1454.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="767.6" y="1427.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="770.6" y="1438.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="767.6" y="1411.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="770.6" y="1422.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.02%)</title><rect x="767.6" y="1395.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="770.6" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="767.6" y="1379.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="770.6" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="767.6" y="1363.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="770.6" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="767.6" y="1347.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="770.6" y="1358.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (115 samples, 2.46%)</title><rect x="767.9" y="1475.0" width="28.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="770.9" y="1486.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (114 samples, 2.43%)</title><rect x="767.9" y="1459.0" width="28.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="770.9" y="1470.0">on..</text>
</g>
<g>
<title>[unknown] (13 samples, 0.28%)</title><rect x="768.1" y="1443.0" width="3.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="771.1" y="1454.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.28%)</title><rect x="768.1" y="1427.0" width="3.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="771.1" y="1438.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (11 samples, 0.23%)</title><rect x="768.1" y="1411.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="771.1" y="1422.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="768.1" y="1395.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="771.1" y="1406.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="768.6" y="1395.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="771.6" y="1406.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 0.17%)</title><rect x="768.9" y="1395.0" width="2.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="771.9" y="1406.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.06%)</title><rect x="768.9" y="1379.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="771.9" y="1390.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.02%)</title><rect x="769.6" y="1379.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="772.6" y="1390.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.09%)</title><rect x="769.9" y="1379.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="772.9" y="1390.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="770.9" y="1411.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="773.9" y="1422.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="771.1" y="1411.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="774.1" y="1422.0"></text>
</g>
<g>
<title>recv (100 samples, 2.14%)</title><rect x="771.4" y="1443.0" width="25.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="774.4" y="1454.0">r..</text>
</g>
<g>
<title>[unknown] (93 samples, 1.99%)</title><rect x="773.1" y="1427.0" width="23.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="776.1" y="1438.0">[..</text>
</g>
<g>
<title>[unknown] (93 samples, 1.99%)</title><rect x="773.1" y="1411.0" width="23.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="776.1" y="1422.0">[..</text>
</g>
<g>
<title>[unknown] (91 samples, 1.94%)</title><rect x="773.6" y="1395.0" width="23.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="776.6" y="1406.0">[..</text>
</g>
<g>
<title>[unknown] (90 samples, 1.92%)</title><rect x="773.9" y="1379.0" width="22.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="776.9" y="1390.0">[..</text>
</g>
<g>
<title>[unknown] (89 samples, 1.90%)</title><rect x="774.2" y="1363.0" width="22.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="777.2" y="1374.0">[..</text>
</g>
<g>
<title>[unknown] (88 samples, 1.88%)</title><rect x="774.4" y="1347.0" width="22.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="777.4" y="1358.0">[..</text>
</g>
<g>
<title>[unknown] (88 samples, 1.88%)</title><rect x="774.4" y="1331.0" width="22.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="777.4" y="1342.0">[..</text>
</g>
<g>
<title>[unknown] (83 samples, 1.77%)</title><rect x="775.7" y="1315.0" width="20.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="778.7" y="1326.0"></text>
</g>
<g>
<title>[unknown] (80 samples, 1.71%)</title><rect x="776.4" y="1299.0" width="20.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="779.4" y="1310.0"></text>
</g>
<g>
<title>[unknown] (74 samples, 1.58%)</title><rect x="777.9" y="1283.0" width="18.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="780.9" y="1294.0"></text>
</g>
<g>
<title>[unknown] (69 samples, 1.47%)</title><rect x="779.2" y="1267.0" width="17.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="782.2" y="1278.0"></text>
</g>
<g>
<title>[unknown] (59 samples, 1.26%)</title><rect x="781.7" y="1251.0" width="14.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="784.7" y="1262.0"></text>
</g>
<g>
<title>[unknown] (57 samples, 1.22%)</title><rect x="782.2" y="1235.0" width="14.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="785.2" y="1246.0"></text>
</g>
<g>
<title>[unknown] (52 samples, 1.11%)</title><rect x="783.5" y="1219.0" width="13.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="786.5" y="1230.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 1.05%)</title><rect x="784.2" y="1203.0" width="12.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="787.2" y="1214.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.03%)</title><rect x="784.5" y="1187.0" width="12.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="787.5" y="1198.0"></text>
</g>
<g>
<title>[unknown] (43 samples, 0.92%)</title><rect x="785.7" y="1171.0" width="10.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="788.7" y="1182.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 0.83%)</title><rect x="786.8" y="1155.0" width="9.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="789.8" y="1166.0"></text>
</g>
<g>
<title>[unknown] (35 samples, 0.75%)</title><rect x="787.8" y="1139.0" width="8.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="790.8" y="1150.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.62%)</title><rect x="789.3" y="1123.0" width="7.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="792.3" y="1134.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.53%)</title><rect x="790.3" y="1107.0" width="6.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="793.3" y="1118.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.51%)</title><rect x="790.5" y="1091.0" width="6.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="793.5" y="1102.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.51%)</title><rect x="790.5" y="1075.0" width="6.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="793.5" y="1086.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.51%)</title><rect x="790.5" y="1059.0" width="6.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="793.5" y="1070.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.45%)</title><rect x="791.3" y="1043.0" width="5.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="794.3" y="1054.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.45%)</title><rect x="791.3" y="1027.0" width="5.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="794.3" y="1038.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.41%)</title><rect x="791.8" y="1011.0" width="4.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="794.8" y="1022.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.38%)</title><rect x="792.0" y="995.0" width="4.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="795.0" y="1006.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.34%)</title><rect x="792.6" y="979.0" width="4.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="795.6" y="990.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.32%)</title><rect x="792.8" y="963.0" width="3.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="795.8" y="974.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.32%)</title><rect x="792.8" y="947.0" width="3.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="795.8" y="958.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.26%)</title><rect x="793.6" y="931.0" width="3.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="796.6" y="942.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="794.3" y="915.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="797.3" y="926.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="794.3" y="899.0" width="2.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="797.3" y="910.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="794.3" y="883.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="797.3" y="894.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="795.1" y="867.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="798.1" y="878.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="795.8" y="851.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="798.8" y="862.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="795.8" y="835.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="798.8" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="796.3" y="819.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="799.3" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="796.3" y="803.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="799.3" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.02%)</title><rect x="796.6" y="1459.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="799.6" y="1470.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="796.8" y="1491.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="799.8" y="1502.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (4 samples, 0.09%)</title><rect x="797.1" y="1523.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="800.1" y="1534.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="797.3" y="1507.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="800.3" y="1518.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="797.3" y="1491.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="800.3" y="1502.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="797.6" y="1475.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="800.6" y="1486.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="797.6" y="1459.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="800.6" y="1470.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="797.6" y="1443.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="800.6" y="1454.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="797.6" y="1427.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="800.6" y="1438.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="797.6" y="1411.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="800.6" y="1422.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="797.6" y="1395.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="800.6" y="1406.0"></text>
</g>
<g>
<title>start_thread (1,554 samples, 33.19%)</title><rect x="798.1" y="1523.0" width="391.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="801.1" y="1534.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (1,554 samples, 33.19%)</title><rect x="798.1" y="1507.0" width="391.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="801.1" y="1518.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (1,554 samples, 33.19%)</title><rect x="798.1" y="1491.0" width="391.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="801.1" y="1502.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.02%)</title><rect x="798.1" y="1475.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="801.1" y="1486.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.02%)</title><rect x="798.1" y="1459.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="801.1" y="1470.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.02%)</title><rect x="798.1" y="1443.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="801.1" y="1454.0"></text>
</g>
<g>
<title>GangWorker::loop() (44 samples, 0.94%)</title><rect x="798.3" y="1475.0" width="11.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="801.3" y="1486.0"></text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (1 samples, 0.02%)</title><rect x="798.3" y="1459.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="801.3" y="1470.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.02%)</title><rect x="798.3" y="1443.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="801.3" y="1454.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (1 samples, 0.02%)</title><rect x="798.3" y="1427.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="801.3" y="1438.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="798.3" y="1411.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="801.3" y="1422.0"></text>
</g>
<g>
<title>bool G1CMTask::deal_with_reference&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.02%)</title><rect x="798.3" y="1395.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="801.3" y="1406.0"></text>
</g>
<g>
<title>G1CMRefProcTaskProxy::work(unsigned int) (3 samples, 0.06%)</title><rect x="798.6" y="1459.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="801.6" y="1470.0"></text>
</g>
<g>
<title>RefProcPhase3Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (3 samples, 0.06%)</title><rect x="798.6" y="1443.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="801.6" y="1454.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_final_keep_alive_work(DiscoveredList&amp;, OopClosure*, VoidClosure*) (3 samples, 0.06%)</title><rect x="798.6" y="1427.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="801.6" y="1438.0"></text>
</g>
<g>
<title>G1CMDrainMarkingStackClosure::do_void() (3 samples, 0.06%)</title><rect x="798.6" y="1411.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="801.6" y="1422.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (3 samples, 0.06%)</title><rect x="798.6" y="1395.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="801.6" y="1406.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.06%)</title><rect x="798.6" y="1379.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="801.6" y="1390.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (2 samples, 0.04%)</title><rect x="799.4" y="1459.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="802.4" y="1470.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (2 samples, 0.04%)</title><rect x="799.4" y="1443.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="802.4" y="1454.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.04%)</title><rect x="799.4" y="1427.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="802.4" y="1438.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (36 samples, 0.77%)</title><rect x="799.9" y="1459.0" width="9.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="802.9" y="1470.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (23 samples, 0.49%)</title><rect x="799.9" y="1443.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="802.9" y="1454.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 0.17%)</title><rect x="799.9" y="1427.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="802.9" y="1438.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.04%)</title><rect x="800.1" y="1411.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="803.1" y="1422.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (5 samples, 0.11%)</title><rect x="800.6" y="1411.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="803.6" y="1422.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.09%)</title><rect x="800.9" y="1395.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="803.9" y="1406.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="801.1" y="1379.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="804.1" y="1390.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="801.1" y="1363.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="804.1" y="1374.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="801.1" y="1347.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="804.1" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="801.4" y="1331.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="804.4" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="801.4" y="1315.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="804.4" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="801.4" y="1299.0" width="0.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="804.4" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="801.4" y="1283.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="804.4" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="801.4" y="1267.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="804.4" y="1278.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="801.6" y="1379.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="804.6" y="1390.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.02%)</title><rect x="801.6" y="1363.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="804.6" y="1374.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.04%)</title><rect x="801.9" y="1427.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="804.9" y="1438.0"></text>
</g>
<g>
<title>SpinPause (13 samples, 0.28%)</title><rect x="802.4" y="1427.0" width="3.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="805.4" y="1438.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (3 samples, 0.06%)</title><rect x="805.7" y="1443.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="808.7" y="1454.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 0.06%)</title><rect x="805.7" y="1427.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="808.7" y="1438.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (3 samples, 0.06%)</title><rect x="805.7" y="1411.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="808.7" y="1422.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (3 samples, 0.06%)</title><rect x="805.7" y="1395.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="808.7" y="1406.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.06%)</title><rect x="805.7" y="1379.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="808.7" y="1390.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (3 samples, 0.06%)</title><rect x="805.7" y="1363.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="808.7" y="1374.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.06%)</title><rect x="805.7" y="1347.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="808.7" y="1358.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.04%)</title><rect x="805.9" y="1331.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="808.9" y="1342.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (5 samples, 0.11%)</title><rect x="806.4" y="1443.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="809.4" y="1454.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (5 samples, 0.11%)</title><rect x="806.4" y="1427.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="809.4" y="1438.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (5 samples, 0.11%)</title><rect x="806.4" y="1411.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="809.4" y="1422.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (5 samples, 0.11%)</title><rect x="806.4" y="1395.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="809.4" y="1406.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 0.04%)</title><rect x="806.4" y="1379.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="809.4" y="1390.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 0.04%)</title><rect x="806.4" y="1363.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="809.4" y="1374.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (1 samples, 0.02%)</title><rect x="806.7" y="1347.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="809.7" y="1358.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.02%)</title><rect x="806.7" y="1331.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="809.7" y="1342.0"></text>
</g>
<g>
<title>metadata_Relocation::fix_metadata_relocation() (1 samples, 0.02%)</title><rect x="806.9" y="1379.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="809.9" y="1390.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (2 samples, 0.04%)</title><rect x="807.2" y="1379.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="810.2" y="1390.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (5 samples, 0.11%)</title><rect x="807.7" y="1443.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="810.7" y="1454.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.11%)</title><rect x="807.7" y="1427.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="810.7" y="1438.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.02%)</title><rect x="807.7" y="1411.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="810.7" y="1422.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (1 samples, 0.02%)</title><rect x="807.7" y="1395.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="810.7" y="1406.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (1 samples, 0.02%)</title><rect x="807.7" y="1379.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="810.7" y="1390.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.02%)</title><rect x="807.7" y="1363.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="810.7" y="1374.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.02%)</title><rect x="807.7" y="1347.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="810.7" y="1358.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.02%)</title><rect x="807.7" y="1331.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="810.7" y="1342.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (4 samples, 0.09%)</title><rect x="807.9" y="1411.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="810.9" y="1422.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (4 samples, 0.09%)</title><rect x="807.9" y="1395.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="810.9" y="1406.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (4 samples, 0.09%)</title><rect x="807.9" y="1379.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="810.9" y="1390.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (3 samples, 0.06%)</title><rect x="807.9" y="1363.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="810.9" y="1374.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (3 samples, 0.06%)</title><rect x="807.9" y="1347.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="810.9" y="1358.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (3 samples, 0.06%)</title><rect x="807.9" y="1331.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="810.9" y="1342.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.06%)</title><rect x="807.9" y="1315.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="810.9" y="1326.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="808.4" y="1299.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="811.4" y="1310.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="808.7" y="1363.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="811.7" y="1374.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="808.7" y="1347.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="811.7" y="1358.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="808.7" y="1331.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="811.7" y="1342.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.04%)</title><rect x="808.9" y="1459.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="811.9" y="1470.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.04%)</title><rect x="808.9" y="1443.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="811.9" y="1454.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (2 samples, 0.04%)</title><rect x="808.9" y="1427.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="811.9" y="1438.0"></text>
</g>
<g>
<title>frame::nmethods_do(CodeBlobClosure*) (1 samples, 0.02%)</title><rect x="808.9" y="1411.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="811.9" y="1422.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="809.2" y="1411.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="812.2" y="1422.0"></text>
</g>
<g>
<title>JavaThread::run() (1,499 samples, 32.02%)</title><rect x="809.4" y="1475.0" width="377.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="812.4" y="1486.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1,499 samples, 32.02%)</title><rect x="809.4" y="1459.0" width="377.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="812.4" y="1470.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1,469 samples, 31.38%)</title><rect x="809.4" y="1443.0" width="370.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="812.4" y="1454.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (1,466 samples, 31.31%)</title><rect x="809.4" y="1427.0" width="369.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="812.4" y="1438.0">CompileBroker::invoke_compiler_on_method(CompileTa..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1,300 samples, 27.77%)</title><rect x="809.7" y="1411.0" width="327.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="812.7" y="1422.0">C2Compiler::compile_method(ciEnv*, ciMethod*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (1,300 samples, 27.77%)</title><rect x="809.7" y="1395.0" width="327.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="812.7" y="1406.0">Compile::Compile(ciEnv*, C2Compiler*, ciMeth..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (3 samples, 0.06%)</title><rect x="809.7" y="1379.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="812.7" y="1390.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (3 samples, 0.06%)</title><rect x="809.7" y="1363.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="812.7" y="1374.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (3 samples, 0.06%)</title><rect x="809.7" y="1347.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="812.7" y="1358.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (3 samples, 0.06%)</title><rect x="809.7" y="1331.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="812.7" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (3 samples, 0.06%)</title><rect x="809.7" y="1315.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="812.7" y="1326.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.06%)</title><rect x="809.7" y="1299.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="812.7" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.06%)</title><rect x="809.7" y="1283.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="812.7" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (3 samples, 0.06%)</title><rect x="809.7" y="1267.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="812.7" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (2 samples, 0.04%)</title><rect x="809.9" y="1251.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="812.9" y="1262.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.04%)</title><rect x="809.9" y="1235.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="812.9" y="1246.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.04%)</title><rect x="809.9" y="1219.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="812.9" y="1230.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.02%)</title><rect x="809.9" y="1203.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="812.9" y="1214.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(LinkInfo const&amp;) (1 samples, 0.02%)</title><rect x="809.9" y="1187.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="812.9" y="1198.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_special_method(CallInfo&amp;, LinkInfo const&amp;, methodHandle const&amp;, Handle, Thread*) (1 samples, 0.02%)</title><rect x="809.9" y="1171.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="812.9" y="1182.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="810.2" y="1203.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="813.2" y="1214.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="810.2" y="1187.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="813.2" y="1198.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="810.2" y="1171.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="813.2" y="1182.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.02%)</title><rect x="810.2" y="1155.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="813.2" y="1166.0"></text>
</g>
<g>
<title>CallGenerator::for_osr(ciMethod*, int) (1 samples, 0.02%)</title><rect x="810.4" y="1379.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="813.4" y="1390.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.02%)</title><rect x="810.4" y="1363.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="813.4" y="1374.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="810.4" y="1347.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="813.4" y="1358.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="810.4" y="1331.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="813.4" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="810.4" y="1315.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="813.4" y="1326.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="810.4" y="1299.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="813.4" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="810.4" y="1283.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="813.4" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="810.4" y="1267.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="813.4" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.02%)</title><rect x="810.4" y="1251.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="813.4" y="1262.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="810.4" y="1235.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="813.4" y="1246.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="810.4" y="1219.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="813.4" y="1230.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.02%)</title><rect x="810.4" y="1203.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="813.4" y="1214.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.02%)</title><rect x="810.4" y="1187.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="813.4" y="1198.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (719 samples, 15.36%)</title><rect x="810.7" y="1379.0" width="181.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="813.7" y="1390.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Block::code_alignment() const (1 samples, 0.02%)</title><rect x="810.7" y="1363.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="813.7" y="1374.0"></text>
</g>
<g>
<title>Compile::Output() (19 samples, 0.41%)</title><rect x="810.9" y="1363.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="813.9" y="1374.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (9 samples, 0.19%)</title><rect x="810.9" y="1347.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="813.9" y="1358.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="812.2" y="1331.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="815.2" y="1342.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (3 samples, 0.06%)</title><rect x="812.5" y="1331.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="815.5" y="1342.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (3 samples, 0.06%)</title><rect x="812.5" y="1315.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="815.5" y="1326.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (10 samples, 0.21%)</title><rect x="813.2" y="1347.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="816.2" y="1358.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (10 samples, 0.21%)</title><rect x="813.2" y="1331.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="816.2" y="1342.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (5 samples, 0.11%)</title><rect x="814.2" y="1315.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="817.2" y="1326.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.02%)</title><rect x="814.2" y="1299.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="817.2" y="1310.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.02%)</title><rect x="814.2" y="1283.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="817.2" y="1294.0"></text>
</g>
<g>
<title>MachSpillCopyNode::bottom_type() const (1 samples, 0.02%)</title><rect x="814.5" y="1299.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="817.5" y="1310.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (2 samples, 0.04%)</title><rect x="814.7" y="1299.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="817.7" y="1310.0"></text>
</g>
<g>
<title>Assembler::movq(Address, RegisterImpl*) (1 samples, 0.02%)</title><rect x="815.0" y="1283.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="818.0" y="1294.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.02%)</title><rect x="815.0" y="1267.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="818.0" y="1278.0"></text>
</g>
<g>
<title>loadConPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.02%)</title><rect x="815.2" y="1299.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="818.2" y="1310.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.02%)</title><rect x="815.5" y="1315.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="818.5" y="1326.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (14 samples, 0.30%)</title><rect x="815.7" y="1363.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="818.7" y="1374.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.02%)</title><rect x="816.5" y="1347.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="819.5" y="1358.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.09%)</title><rect x="816.7" y="1347.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="819.7" y="1358.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.02%)</title><rect x="816.7" y="1331.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="819.7" y="1342.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="816.7" y="1315.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="819.7" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.04%)</title><rect x="817.0" y="1331.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="820.0" y="1342.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.04%)</title><rect x="817.0" y="1315.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="820.0" y="1326.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="817.5" y="1331.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="820.5" y="1342.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (6 samples, 0.13%)</title><rect x="817.8" y="1347.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="820.8" y="1358.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (6 samples, 0.13%)</title><rect x="817.8" y="1331.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="820.8" y="1342.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.04%)</title><rect x="818.8" y="1315.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="821.8" y="1326.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.02%)</title><rect x="819.3" y="1363.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="822.3" y="1374.0"></text>
</g>
<g>
<title>MachNode::peephole(Block*, int, PhaseRegAlloc*, int&amp;) (1 samples, 0.02%)</title><rect x="819.5" y="1363.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="822.5" y="1374.0"></text>
</g>
<g>
<title>Matcher::match() (73 samples, 1.56%)</title><rect x="819.8" y="1363.0" width="18.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="822.8" y="1374.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.02%)</title><rect x="820.0" y="1347.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="823.0" y="1358.0"></text>
</g>
<g>
<title>CallNode::match(ProjNode const*, Matcher const*) (1 samples, 0.02%)</title><rect x="820.3" y="1347.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="823.3" y="1358.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.02%)</title><rect x="820.5" y="1347.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="823.5" y="1358.0"></text>
</g>
<g>
<title>Matcher::Fixup_Save_On_Entry() (1 samples, 0.02%)</title><rect x="820.8" y="1347.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="823.8" y="1358.0"></text>
</g>
<g>
<title>Matcher::init_first_stack_mask() (1 samples, 0.02%)</title><rect x="820.8" y="1331.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="823.8" y="1342.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (4 samples, 0.09%)</title><rect x="821.0" y="1347.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="824.0" y="1358.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (2 samples, 0.04%)</title><rect x="821.3" y="1331.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="824.3" y="1342.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.02%)</title><rect x="821.5" y="1315.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="824.5" y="1326.0"></text>
</g>
<g>
<title>ParmNode::Opcode() const (1 samples, 0.02%)</title><rect x="821.8" y="1331.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="824.8" y="1342.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (63 samples, 1.35%)</title><rect x="822.0" y="1347.0" width="15.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="825.0" y="1358.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (19 samples, 0.41%)</title><rect x="824.1" y="1331.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="827.1" y="1342.0"></text>
</g>
<g>
<title>CallNode::match(ProjNode const*, Matcher const*) (1 samples, 0.02%)</title><rect x="828.8" y="1331.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="831.8" y="1342.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.02%)</title><rect x="828.8" y="1315.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="831.8" y="1326.0"></text>
</g>
<g>
<title>CmpINode::Opcode() const (1 samples, 0.02%)</title><rect x="829.1" y="1331.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="832.1" y="1342.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.02%)</title><rect x="829.3" y="1331.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="832.3" y="1342.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (4 samples, 0.09%)</title><rect x="829.6" y="1331.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="832.6" y="1342.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.09%)</title><rect x="829.6" y="1315.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="832.6" y="1326.0"></text>
</g>
<g>
<title>CallNode::match_edge(unsigned int) const (1 samples, 0.02%)</title><rect x="829.6" y="1299.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="832.6" y="1310.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.02%)</title><rect x="829.9" y="1299.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="832.9" y="1310.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.02%)</title><rect x="830.1" y="1299.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="833.1" y="1310.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.02%)</title><rect x="830.4" y="1299.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="833.4" y="1310.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.02%)</title><rect x="830.4" y="1283.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.4" y="1294.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="830.4" y="1267.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.4" y="1278.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (22 samples, 0.47%)</title><rect x="830.6" y="1331.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="833.6" y="1342.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.02%)</title><rect x="832.4" y="1315.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="835.4" y="1326.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (8 samples, 0.17%)</title><rect x="832.6" y="1315.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="835.6" y="1326.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (5 samples, 0.11%)</title><rect x="832.6" y="1299.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="835.6" y="1310.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="832.6" y="1283.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="835.6" y="1294.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="832.6" y="1267.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="835.6" y="1278.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.04%)</title><rect x="832.9" y="1283.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="835.9" y="1294.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.02%)</title><rect x="832.9" y="1267.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="835.9" y="1278.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.02%)</title><rect x="833.1" y="1267.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="836.1" y="1278.0"></text>
</g>
<g>
<title>State::_sub_Op_ConI(Node const*) (1 samples, 0.02%)</title><rect x="833.1" y="1251.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="836.1" y="1262.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.02%)</title><rect x="833.4" y="1283.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="836.4" y="1294.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.02%)</title><rect x="833.6" y="1283.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="836.6" y="1294.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.02%)</title><rect x="833.6" y="1267.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="836.6" y="1278.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="833.9" y="1299.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="836.9" y="1310.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="833.9" y="1283.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="836.9" y="1294.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (2 samples, 0.04%)</title><rect x="834.1" y="1299.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="837.1" y="1310.0"></text>
</g>
<g>
<title>Type::hashcons() (2 samples, 0.04%)</title><rect x="834.1" y="1283.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="837.1" y="1294.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (2 samples, 0.04%)</title><rect x="834.1" y="1267.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="837.1" y="1278.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (5 samples, 0.11%)</title><rect x="834.6" y="1315.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="837.6" y="1326.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (4 samples, 0.09%)</title><rect x="834.6" y="1299.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="837.6" y="1310.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.04%)</title><rect x="834.6" y="1283.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="837.6" y="1294.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Chain_Rule(State*, int, Node*&amp;, MachNode*) (1 samples, 0.02%)</title><rect x="834.6" y="1267.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="837.6" y="1278.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int) (1 samples, 0.02%)</title><rect x="834.6" y="1251.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="837.6" y="1262.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.02%)</title><rect x="834.9" y="1267.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="837.9" y="1278.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.02%)</title><rect x="835.1" y="1283.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="838.1" y="1294.0"></text>
</g>
<g>
<title>partialSubtypeCheck_vs_ZeroNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.02%)</title><rect x="835.4" y="1283.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="838.4" y="1294.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="835.6" y="1299.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="838.6" y="1310.0"></text>
</g>
<g>
<title>__memset_avx2_erms (1 samples, 0.02%)</title><rect x="835.9" y="1315.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="838.9" y="1326.0"></text>
</g>
<g>
<title>MemBarVolatileNode::Opcode() const (1 samples, 0.02%)</title><rect x="836.2" y="1331.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="839.2" y="1342.0"></text>
</g>
<g>
<title>Node::add_prec(Node*) (1 samples, 0.02%)</title><rect x="836.4" y="1331.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="839.4" y="1342.0"></text>
</g>
<g>
<title>Node::clone() const (3 samples, 0.06%)</title><rect x="836.7" y="1331.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="839.7" y="1342.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.02%)</title><rect x="837.2" y="1315.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="840.2" y="1326.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.02%)</title><rect x="837.4" y="1331.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="840.4" y="1342.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.02%)</title><rect x="837.7" y="1331.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="840.7" y="1342.0"></text>
</g>
<g>
<title>ResourceObj::operator new(unsigned long, Arena*) (1 samples, 0.02%)</title><rect x="837.9" y="1347.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="840.9" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.02%)</title><rect x="838.2" y="1363.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="841.2" y="1374.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.02%)</title><rect x="838.2" y="1347.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="841.2" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (61 samples, 1.30%)</title><rect x="838.4" y="1363.0" width="15.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="841.4" y="1374.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.02%)</title><rect x="838.4" y="1347.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="841.4" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.02%)</title><rect x="838.7" y="1347.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="841.7" y="1358.0"></text>
</g>
<g>
<title>Block::succ_prob(unsigned int) (1 samples, 0.02%)</title><rect x="838.7" y="1331.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="841.7" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (59 samples, 1.26%)</title><rect x="838.9" y="1347.0" width="14.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="841.9" y="1358.0"></text>
</g>
<g>
<title>MachCallNode::pinned() const (1 samples, 0.02%)</title><rect x="840.9" y="1331.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="843.9" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (3 samples, 0.06%)</title><rect x="841.2" y="1331.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="844.2" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::latency_from_uses(Node*) (1 samples, 0.02%)</title><rect x="841.7" y="1315.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="844.7" y="1326.0"></text>
</g>
<g>
<title>Node::latency(unsigned int) (1 samples, 0.02%)</title><rect x="841.7" y="1299.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="844.7" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (9 samples, 0.19%)</title><rect x="841.9" y="1331.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="844.9" y="1342.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.04%)</title><rect x="842.2" y="1315.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="845.2" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.02%)</title><rect x="842.7" y="1315.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="845.7" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (5 samples, 0.11%)</title><rect x="843.0" y="1315.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="846.0" y="1326.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (2 samples, 0.04%)</title><rect x="843.5" y="1299.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="846.5" y="1310.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="843.7" y="1283.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="846.7" y="1294.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="843.7" y="1267.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="846.7" y="1278.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.02%)</title><rect x="844.0" y="1299.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="847.0" y="1310.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="844.0" y="1283.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="847.0" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (9 samples, 0.19%)</title><rect x="844.2" y="1331.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="847.2" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="845.0" y="1315.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="848.0" y="1326.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.02%)</title><rect x="845.2" y="1315.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="848.2" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::needed_for_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.02%)</title><rect x="845.5" y="1315.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="848.5" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::set_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.02%)</title><rect x="845.5" y="1299.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="848.5" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (3 samples, 0.06%)</title><rect x="845.7" y="1315.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="848.7" y="1326.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.02%)</title><rect x="846.2" y="1299.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="849.2" y="1310.0"></text>
</g>
<g>
<title>MachCallNode::bottom_type() const (1 samples, 0.02%)</title><rect x="846.2" y="1283.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="849.2" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.02%)</title><rect x="846.5" y="1331.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="849.5" y="1342.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.02%)</title><rect x="846.5" y="1315.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="849.5" y="1326.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="846.5" y="1299.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="849.5" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&amp;, Matcher&amp;, bool) (1 samples, 0.02%)</title><rect x="846.7" y="1331.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="849.7" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.15%)</title><rect x="847.0" y="1331.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="850.0" y="1342.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.06%)</title><rect x="847.7" y="1315.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="850.7" y="1326.0"></text>
</g>
<g>
<title>cmpOpUOper::num_edges() const (1 samples, 0.02%)</title><rect x="848.5" y="1315.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="851.5" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (4 samples, 0.09%)</title><rect x="848.8" y="1331.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="851.8" y="1342.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.04%)</title><rect x="849.0" y="1315.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="852.0" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="849.3" y="1299.0" width="0.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="852.3" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="849.3" y="1283.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="852.3" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="849.3" y="1267.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="852.3" y="1278.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="849.5" y="1315.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="852.5" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (16 samples, 0.34%)</title><rect x="849.8" y="1331.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="852.8" y="1342.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.02%)</title><rect x="850.0" y="1315.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="853.0" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (3 samples, 0.06%)</title><rect x="850.3" y="1315.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="853.3" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.06%)</title><rect x="850.3" y="1299.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="853.3" y="1310.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (11 samples, 0.23%)</title><rect x="851.0" y="1315.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="854.0" y="1326.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (2 samples, 0.04%)</title><rect x="852.3" y="1299.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="855.3" y="1310.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="852.5" y="1283.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="855.5" y="1294.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="852.5" y="1267.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="855.5" y="1278.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.02%)</title><rect x="852.5" y="1251.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="855.5" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.09%)</title><rect x="852.8" y="1299.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="855.8" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (3 samples, 0.06%)</title><rect x="853.8" y="1363.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="856.8" y="1374.0"></text>
</g>
<g>
<title>Block::is_Empty() const (1 samples, 0.02%)</title><rect x="854.3" y="1347.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="857.3" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&amp;, Matcher&amp;, bool) (2 samples, 0.04%)</title><rect x="854.5" y="1363.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="857.5" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (541 samples, 11.55%)</title><rect x="855.1" y="1363.0" width="136.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="858.1" y="1374.0">PhaseChaitin::Reg..</text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.02%)</title><rect x="855.3" y="1347.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="858.3" y="1358.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="855.3" y="1331.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="858.3" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.06%)</title><rect x="855.6" y="1347.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="858.6" y="1358.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.02%)</title><rect x="856.3" y="1347.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="859.3" y="1358.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.04%)</title><rect x="856.6" y="1347.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="859.6" y="1358.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (25 samples, 0.53%)</title><rect x="857.1" y="1347.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="860.1" y="1358.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.02%)</title><rect x="863.1" y="1331.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="866.1" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (36 samples, 0.77%)</title><rect x="863.4" y="1347.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="866.4" y="1358.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.06%)</title><rect x="866.6" y="1331.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="869.6" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (7 samples, 0.15%)</title><rect x="867.4" y="1331.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="870.4" y="1342.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (3 samples, 0.06%)</title><rect x="868.4" y="1315.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="871.4" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (10 samples, 0.21%)</title><rect x="869.2" y="1331.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="872.2" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 0.13%)</title><rect x="869.9" y="1315.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="872.9" y="1326.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="871.4" y="1315.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="874.4" y="1326.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (2 samples, 0.04%)</title><rect x="871.7" y="1331.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="874.7" y="1342.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.02%)</title><rect x="872.2" y="1331.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="875.2" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (27 samples, 0.58%)</title><rect x="872.4" y="1347.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="875.4" y="1358.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.11%)</title><rect x="872.9" y="1331.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="875.9" y="1342.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (20 samples, 0.43%)</title><rect x="874.2" y="1331.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="877.2" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (7 samples, 0.15%)</title><rect x="877.5" y="1315.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="880.5" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (72 samples, 1.54%)</title><rect x="879.2" y="1347.0" width="18.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="882.2" y="1358.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.02%)</title><rect x="892.9" y="1331.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="895.9" y="1342.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.02%)</title><rect x="893.1" y="1331.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="896.1" y="1342.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (3 samples, 0.06%)</title><rect x="893.4" y="1331.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="896.4" y="1342.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.02%)</title><rect x="894.1" y="1331.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="897.1" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (2 samples, 0.04%)</title><rect x="894.4" y="1331.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="897.4" y="1342.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.02%)</title><rect x="894.4" y="1315.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="897.4" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.02%)</title><rect x="894.6" y="1315.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="897.6" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (3 samples, 0.06%)</title><rect x="894.9" y="1331.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="897.9" y="1342.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.02%)</title><rect x="895.6" y="1331.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="898.6" y="1342.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="895.9" y="1331.0" width="0.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="898.9" y="1342.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.02%)</title><rect x="896.1" y="1331.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="899.1" y="1342.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.02%)</title><rect x="896.4" y="1331.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="899.4" y="1342.0"></text>
</g>
<g>
<title>leaP8NarrowNode::rule() const (1 samples, 0.02%)</title><rect x="896.6" y="1331.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="899.6" y="1342.0"></text>
</g>
<g>
<title>loadNKlassNode::rule() const (1 samples, 0.02%)</title><rect x="896.9" y="1331.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="899.9" y="1342.0"></text>
</g>
<g>
<title>tlsLoadPNode::rule() const (1 samples, 0.02%)</title><rect x="897.1" y="1331.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="900.1" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (123 samples, 2.63%)</title><rect x="897.4" y="1347.0" width="31.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="900.4" y="1358.0">Ph..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (4 samples, 0.09%)</title><rect x="899.9" y="1331.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="902.9" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="900.9" y="1331.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="903.9" y="1342.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.02%)</title><rect x="901.4" y="1331.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="904.4" y="1342.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.04%)</title><rect x="901.7" y="1331.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="904.7" y="1342.0"></text>
</g>
<g>
<title>rFlagsRegOper::type() const (1 samples, 0.02%)</title><rect x="901.7" y="1315.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="904.7" y="1326.0"></text>
</g>
<g>
<title>rRegIOper::type() const (1 samples, 0.02%)</title><rect x="901.9" y="1315.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="904.9" y="1326.0"></text>
</g>
<g>
<title>Node::jvms() const (2 samples, 0.04%)</title><rect x="902.2" y="1331.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="905.2" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (20 samples, 0.43%)</title><rect x="902.7" y="1331.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="905.7" y="1342.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.02%)</title><rect x="905.7" y="1315.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="908.7" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.04%)</title><rect x="906.0" y="1315.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="909.0" y="1326.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.02%)</title><rect x="906.2" y="1299.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="909.2" y="1310.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.04%)</title><rect x="906.5" y="1315.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="909.5" y="1326.0"></text>
</g>
<g>
<title>addI_rReg_immNode::rule() const (1 samples, 0.02%)</title><rect x="907.0" y="1315.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="910.0" y="1326.0"></text>
</g>
<g>
<title>shrL_rReg_immNode::rule() const (1 samples, 0.02%)</title><rect x="907.2" y="1315.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="910.2" y="1326.0"></text>
</g>
<g>
<title>tlsLoadPNode::rule() const (1 samples, 0.02%)</title><rect x="907.5" y="1315.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="910.5" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::check_for_high_pressure_transition_at_fatproj(unsigned int&amp;, unsigned int, LRG&amp;, PhaseChaitin::Pressure&amp;, int) (2 samples, 0.04%)</title><rect x="907.7" y="1331.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="910.7" y="1342.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.02%)</title><rect x="908.0" y="1315.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="911.0" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (5 samples, 0.11%)</title><rect x="908.2" y="1331.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="911.2" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="909.2" y="1315.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="912.2" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (42 samples, 0.90%)</title><rect x="909.5" y="1331.0" width="10.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="912.5" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (9 samples, 0.19%)</title><rect x="917.8" y="1315.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="920.8" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.04%)</title><rect x="920.1" y="1331.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="923.1" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (25 samples, 0.53%)</title><rect x="920.6" y="1331.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="923.6" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.06%)</title><rect x="922.6" y="1315.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="925.6" y="1326.0"></text>
</g>
<g>
<title>RegMask::Size() const (5 samples, 0.11%)</title><rect x="923.4" y="1315.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="926.4" y="1326.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (9 samples, 0.19%)</title><rect x="924.6" y="1315.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="927.6" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_node_if_not_used(Block*, unsigned int, Node*, unsigned int, IndexSet*) (1 samples, 0.02%)</title><rect x="926.9" y="1331.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="929.9" y="1342.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.02%)</title><rect x="927.1" y="1331.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="930.1" y="1342.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (4 samples, 0.09%)</title><rect x="927.4" y="1331.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="930.4" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (6 samples, 0.13%)</title><rect x="928.4" y="1347.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="931.4" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.04%)</title><rect x="929.1" y="1331.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="932.1" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="929.4" y="1315.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="932.4" y="1326.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="929.7" y="1331.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="932.7" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.02%)</title><rect x="929.9" y="1347.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="932.9" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::choose_color(LRG&amp;, int) (1 samples, 0.02%)</title><rect x="930.2" y="1347.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="933.2" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::compact() (1 samples, 0.02%)</title><rect x="930.4" y="1347.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="933.4" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.02%)</title><rect x="930.7" y="1347.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="933.7" y="1358.0"></text>
</g>
<g>
<title>subI_rRegNode::cisc_version(int) (1 samples, 0.02%)</title><rect x="930.7" y="1331.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="933.7" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.178] (11 samples, 0.23%)</title><rect x="930.9" y="1347.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="933.9" y="1358.0"></text>
</g>
<g>
<title>RegMask::Size() const (6 samples, 0.13%)</title><rect x="932.2" y="1331.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="935.2" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (51 samples, 1.09%)</title><rect x="933.7" y="1347.0" width="12.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="936.7" y="1358.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.02%)</title><rect x="938.0" y="1331.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="941.0" y="1342.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.02%)</title><rect x="938.2" y="1331.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="941.2" y="1342.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.02%)</title><rect x="938.5" y="1331.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="941.5" y="1342.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.02%)</title><rect x="938.7" y="1331.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="941.7" y="1342.0"></text>
</g>
<g>
<title>RegMask::Size() const (19 samples, 0.41%)</title><rect x="939.0" y="1331.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.0" y="1342.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (3 samples, 0.06%)</title><rect x="943.8" y="1331.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="946.8" y="1342.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.02%)</title><rect x="944.5" y="1331.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="947.5" y="1342.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (3 samples, 0.06%)</title><rect x="944.8" y="1331.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="947.8" y="1342.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (2 samples, 0.04%)</title><rect x="945.5" y="1331.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="948.5" y="1342.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.02%)</title><rect x="946.0" y="1331.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="949.0" y="1342.0"></text>
</g>
<g>
<title>r15_RegPOper::type() const (1 samples, 0.02%)</title><rect x="946.3" y="1331.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="949.3" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (10 samples, 0.21%)</title><rect x="946.5" y="1347.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="949.5" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (60 samples, 1.28%)</title><rect x="949.1" y="1347.0" width="15.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="952.1" y="1358.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.02%)</title><rect x="952.6" y="1331.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="955.6" y="1342.0"></text>
</g>
<g>
<title>MachProjNode::ideal_reg() const (1 samples, 0.02%)</title><rect x="952.8" y="1331.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="955.8" y="1342.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.02%)</title><rect x="953.1" y="1331.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="956.1" y="1342.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="953.1" y="1315.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="956.1" y="1326.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="953.1" y="1299.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="956.1" y="1310.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="953.1" y="1283.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="956.1" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (36 samples, 0.77%)</title><rect x="953.3" y="1331.0" width="9.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="956.3" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (2 samples, 0.04%)</title><rect x="961.7" y="1315.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="964.7" y="1326.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.02%)</title><rect x="961.9" y="1299.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="964.9" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.02%)</title><rect x="962.2" y="1315.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="965.2" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.02%)</title><rect x="962.2" y="1299.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="965.2" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::yank(Node*, Block*, Node_List*, Node_List*) (1 samples, 0.02%)</title><rect x="962.2" y="1283.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="965.2" y="1294.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.02%)</title><rect x="962.2" y="1267.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="965.2" y="1278.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.02%)</title><rect x="962.2" y="1251.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="965.2" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::eliminate_copy_of_constant(Node*, Node*, Block*, Node_List&amp;, Node_List&amp;, int, int) (1 samples, 0.02%)</title><rect x="962.4" y="1331.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="965.4" y="1342.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="962.7" y="1331.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="965.7" y="1342.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (5 samples, 0.11%)</title><rect x="962.9" y="1331.0" width="1.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="965.9" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (4 samples, 0.09%)</title><rect x="964.2" y="1347.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="967.2" y="1358.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.02%)</title><rect x="964.7" y="1331.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="967.7" y="1342.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="964.9" y="1331.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="967.9" y="1342.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (20 samples, 0.43%)</title><rect x="965.2" y="1347.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="968.2" y="1358.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (5 samples, 0.11%)</title><rect x="965.2" y="1331.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="968.2" y="1342.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (3 samples, 0.06%)</title><rect x="965.7" y="1315.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="968.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (2 samples, 0.04%)</title><rect x="965.9" y="1299.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="968.9" y="1310.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (15 samples, 0.32%)</title><rect x="966.5" y="1331.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="969.5" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 0.04%)</title><rect x="966.5" y="1315.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="969.5" y="1326.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (13 samples, 0.28%)</title><rect x="967.0" y="1315.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="970.0" y="1326.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.02%)</title><rect x="967.0" y="1299.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="970.0" y="1310.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (8 samples, 0.17%)</title><rect x="967.2" y="1299.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="970.2" y="1310.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 0.09%)</title><rect x="969.2" y="1299.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="972.2" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="970.0" y="1283.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="973.0" y="1294.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (16 samples, 0.34%)</title><rect x="970.2" y="1347.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="973.2" y="1358.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.02%)</title><rect x="971.7" y="1331.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="974.7" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (9 samples, 0.19%)</title><rect x="972.0" y="1331.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="975.0" y="1342.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (11 samples, 0.23%)</title><rect x="974.3" y="1347.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="977.3" y="1358.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.02%)</title><rect x="975.3" y="1331.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="978.3" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 0.13%)</title><rect x="975.5" y="1331.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="978.5" y="1342.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (4 samples, 0.09%)</title><rect x="977.0" y="1347.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="980.0" y="1358.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (4 samples, 0.09%)</title><rect x="977.0" y="1331.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="980.0" y="1342.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (39 samples, 0.83%)</title><rect x="978.0" y="1347.0" width="9.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.0" y="1358.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.04%)</title><rect x="982.8" y="1331.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.8" y="1342.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.04%)</title><rect x="983.3" y="1331.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="986.3" y="1342.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (15 samples, 0.32%)</title><rect x="983.8" y="1331.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="986.8" y="1342.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.02%)</title><rect x="986.6" y="1315.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="989.6" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.06%)</title><rect x="986.9" y="1315.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="989.9" y="1326.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="987.6" y="1331.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="990.6" y="1342.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.02%)</title><rect x="987.9" y="1347.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="990.9" y="1358.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.06%)</title><rect x="988.1" y="1347.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="991.1" y="1358.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (2 samples, 0.04%)</title><rect x="988.9" y="1347.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="991.9" y="1358.0"></text>
</g>
<g>
<title>RethrowExceptionNode::is_block_proj() const (1 samples, 0.02%)</title><rect x="989.4" y="1347.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.4" y="1358.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.02%)</title><rect x="989.6" y="1347.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.6" y="1358.0"></text>
</g>
<g>
<title>__memset_avx2_erms (1 samples, 0.02%)</title><rect x="989.9" y="1347.0" width="0.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="992.9" y="1358.0"></text>
</g>
<g>
<title>addP_rRegNode::out_RegMask() const (1 samples, 0.02%)</title><rect x="990.1" y="1347.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="993.1" y="1358.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (3 samples, 0.06%)</title><rect x="990.4" y="1347.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="993.4" y="1358.0"></text>
</g>
<g>
<title>indirectOper::in_RegMask(int) const (1 samples, 0.02%)</title><rect x="991.1" y="1347.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="994.1" y="1358.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.02%)</title><rect x="991.4" y="1363.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.4" y="1374.0"></text>
</g>
<g>
<title>convI2L_reg_regNode::ideal_Opcode() const (1 samples, 0.02%)</title><rect x="991.7" y="1363.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="994.7" y="1374.0"></text>
</g>
<g>
<title>Compile::Optimize() (462 samples, 9.87%)</title><rect x="991.9" y="1379.0" width="116.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="994.9" y="1390.0">Compile::Optim..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (4 samples, 0.09%)</title><rect x="991.9" y="1363.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="994.9" y="1374.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (4 samples, 0.09%)</title><rect x="991.9" y="1347.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="994.9" y="1358.0"></text>
</g>
<g>
<title>LoadLNode::Opcode() const (1 samples, 0.02%)</title><rect x="992.7" y="1331.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="995.7" y="1342.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (3 samples, 0.06%)</title><rect x="992.9" y="1363.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="995.9" y="1374.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.02%)</title><rect x="992.9" y="1347.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="995.9" y="1358.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.02%)</title><rect x="992.9" y="1331.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="995.9" y="1342.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.02%)</title><rect x="992.9" y="1315.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.9" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.04%)</title><rect x="993.2" y="1347.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="996.2" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.04%)</title><rect x="993.2" y="1331.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.2" y="1342.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="993.2" y="1315.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="996.2" y="1326.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.04%)</title><rect x="993.2" y="1299.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.2" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="993.2" y="1283.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="996.2" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="993.2" y="1267.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="996.2" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="993.2" y="1251.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="996.2" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="993.2" y="1235.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="996.2" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="993.2" y="1219.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="996.2" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="993.2" y="1203.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="996.2" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="993.2" y="1187.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="996.2" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="993.2" y="1171.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.2" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="993.2" y="1155.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.2" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="993.2" y="1139.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="996.2" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="993.2" y="1123.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="996.2" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="993.2" y="1107.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="996.2" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="993.2" y="1091.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="996.2" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="993.2" y="1075.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.2" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="993.2" y="1059.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.2" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="993.2" y="1043.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.2" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="993.2" y="1027.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="996.2" y="1038.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="993.2" y="1011.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.2" y="1022.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="993.2" y="995.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.2" y="1006.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="993.4" y="1075.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.4" y="1086.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="993.4" y="1059.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="996.4" y="1070.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (7 samples, 0.15%)</title><rect x="993.7" y="1363.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="996.7" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.02%)</title><rect x="994.9" y="1347.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="997.9" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title><rect x="994.9" y="1331.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="997.9" y="1342.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="994.9" y="1315.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="997.9" y="1326.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.02%)</title><rect x="994.9" y="1299.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="997.9" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="994.9" y="1283.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="997.9" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="994.9" y="1267.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="997.9" y="1278.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="994.9" y="1251.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="997.9" y="1262.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="994.9" y="1235.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="997.9" y="1246.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.02%)</title><rect x="995.2" y="1347.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="998.2" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (13 samples, 0.28%)</title><rect x="995.4" y="1363.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="998.4" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (13 samples, 0.28%)</title><rect x="995.4" y="1347.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="998.4" y="1358.0"></text>
</g>
<g>
<title>ConLNode::Opcode() const (1 samples, 0.02%)</title><rect x="995.4" y="1331.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="998.4" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.02%)</title><rect x="995.7" y="1331.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="998.7" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.02%)</title><rect x="995.9" y="1331.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="998.9" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.02%)</title><rect x="995.9" y="1315.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="998.9" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.02%)</title><rect x="995.9" y="1299.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="998.9" y="1310.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="995.9" y="1283.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="998.9" y="1294.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="995.9" y="1267.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="998.9" y="1278.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="995.9" y="1251.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="998.9" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (5 samples, 0.11%)</title><rect x="996.2" y="1331.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="999.2" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (2 samples, 0.04%)</title><rect x="996.4" y="1315.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="999.4" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.02%)</title><rect x="996.7" y="1299.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="999.7" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (2 samples, 0.04%)</title><rect x="996.9" y="1315.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="999.9" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::add_edge(PointsToNode*, PointsToNode*) [clone .isra.264] (1 samples, 0.02%)</title><rect x="996.9" y="1299.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="999.9" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::add_uses_to_worklist(PointsToNode*) (1 samples, 0.02%)</title><rect x="997.2" y="1299.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1000.2" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (5 samples, 0.11%)</title><rect x="997.4" y="1331.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1000.4" y="1342.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.02%)</title><rect x="997.4" y="1315.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1000.4" y="1326.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.02%)</title><rect x="997.4" y="1299.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1000.4" y="1310.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="997.4" y="1283.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1000.4" y="1294.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="997.4" y="1267.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1000.4" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.06%)</title><rect x="997.7" y="1315.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1000.7" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.06%)</title><rect x="997.7" y="1299.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1000.7" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.02%)</title><rect x="997.7" y="1283.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1000.7" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.04%)</title><rect x="998.0" y="1283.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.04%)</title><rect x="998.0" y="1267.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1001.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.04%)</title><rect x="998.0" y="1251.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.04%)</title><rect x="998.0" y="1235.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="1219.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1001.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="1203.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="1187.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="1171.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1001.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="1155.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1001.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="1139.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="1123.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="1107.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1001.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="1091.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1001.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="1075.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="1059.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1001.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="1043.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="1027.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1001.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="1011.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="995.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="979.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1001.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="963.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="947.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="931.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="915.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1001.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="899.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="883.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="867.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="851.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1001.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="835.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1001.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="819.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1001.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="803.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="787.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="771.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="755.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1001.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="739.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="723.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1001.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="707.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="691.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1001.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="675.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1001.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="659.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1001.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="643.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1001.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="627.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="611.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="595.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1001.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="579.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="563.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="547.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1001.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="531.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="515.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="499.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1001.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="483.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="467.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="451.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="435.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="419.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1001.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="403.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="387.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="371.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="355.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="339.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1001.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="323.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1001.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="307.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1001.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="291.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="275.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="259.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="243.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1001.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="227.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1001.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="211.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1001.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="195.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1001.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="179.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1001.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="163.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1001.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="147.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="131.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1001.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.0" y="115.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.0" y="126.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.02%)</title><rect x="998.0" y="99.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.0" y="110.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.02%)</title><rect x="998.0" y="83.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1001.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="1219.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1001.2" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="1203.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1001.2" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="1187.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.2" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="1171.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.2" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="1155.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1001.2" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="1139.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1001.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="1123.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1001.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="1107.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1001.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="1091.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="1075.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1001.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="1059.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1001.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="1043.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1001.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="1027.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="1011.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1001.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="995.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="979.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="963.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="947.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1001.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="931.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1001.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="915.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1001.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="899.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="883.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="867.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1001.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="851.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1001.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="835.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="819.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="803.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1001.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="771.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1001.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1001.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="739.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1001.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="723.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="707.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1001.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="691.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1001.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="675.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1001.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="659.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1001.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="643.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1001.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="627.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="611.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="595.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1001.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="579.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="563.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1001.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="547.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="531.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1001.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.02%)</title><rect x="998.2" y="515.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1001.2" y="526.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="998.2" y="499.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1001.2" y="510.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.02%)</title><rect x="998.5" y="1315.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.5" y="1326.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (9 samples, 0.19%)</title><rect x="998.7" y="1363.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1001.7" y="1374.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (2 samples, 0.04%)</title><rect x="1000.0" y="1347.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1003.0" y="1358.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (2 samples, 0.04%)</title><rect x="1000.0" y="1331.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1003.0" y="1342.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (2 samples, 0.04%)</title><rect x="1000.0" y="1315.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1003.0" y="1326.0"></text>
</g>
<g>
<title>PhaseCCP::saturate(Type const*, Type const*, Type const*) const (1 samples, 0.02%)</title><rect x="1000.5" y="1347.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1003.5" y="1358.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1000.5" y="1331.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1003.5" y="1342.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1000.7" y="1347.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1003.7" y="1358.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1000.7" y="1331.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1003.7" y="1342.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.02%)</title><rect x="1001.0" y="1363.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1004.0" y="1374.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.02%)</title><rect x="1001.0" y="1347.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1004.0" y="1358.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.02%)</title><rect x="1001.0" y="1331.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1004.0" y="1342.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.02%)</title><rect x="1001.0" y="1315.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1004.0" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (341 samples, 7.28%)</title><rect x="1001.2" y="1363.0" width="86.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1004.2" y="1374.0">PhaseIdeal..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1001.2" y="1347.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1004.2" y="1358.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1001.2" y="1331.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1004.2" y="1342.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1001.2" y="1315.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1004.2" y="1326.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1001.2" y="1299.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1004.2" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*&amp;) (1 samples, 0.02%)</title><rect x="1001.2" y="1283.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1004.2" y="1294.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.02%)</title><rect x="1001.2" y="1267.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1004.2" y="1278.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.06%)</title><rect x="1001.5" y="1347.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1004.5" y="1358.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.06%)</title><rect x="1001.5" y="1331.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1004.5" y="1342.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.06%)</title><rect x="1001.5" y="1315.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1004.5" y="1326.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1001.5" y="1299.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1004.5" y="1310.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1001.5" y="1283.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1004.5" y="1294.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1001.5" y="1267.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1004.5" y="1278.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1001.5" y="1251.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1004.5" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1001.5" y="1235.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1004.5" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.02%)</title><rect x="1001.5" y="1219.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1004.5" y="1230.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1001.7" y="1283.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1004.7" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1001.7" y="1267.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1004.7" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.02%)</title><rect x="1001.7" y="1251.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1004.7" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&amp;, IdealLoopTree*, IdealLoopTree*, Node_List*&amp;, Node_List*&amp;, Node_List*&amp;, Node_List&amp;, unsigned int, PhaseIdealLoop::CloneLoopMode) (1 samples, 0.02%)</title><rect x="1001.7" y="1235.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1004.7" y="1246.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1002.0" y="1299.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1005.0" y="1310.0"></text>
</g>
<g>
<title>IdealLoopTree::policy_unswitching(PhaseIdealLoop*) const (1 samples, 0.02%)</title><rect x="1002.0" y="1283.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1005.0" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_unswitching_candidate(IdealLoopTree const*) const (1 samples, 0.02%)</title><rect x="1002.0" y="1267.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1005.0" y="1278.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (6 samples, 0.13%)</title><rect x="1002.2" y="1347.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1005.2" y="1358.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.04%)</title><rect x="1002.2" y="1331.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1005.2" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (2 samples, 0.04%)</title><rect x="1002.2" y="1315.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1005.2" y="1326.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.02%)</title><rect x="1002.5" y="1299.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1005.5" y="1310.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.02%)</title><rect x="1002.5" y="1283.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1005.5" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (4 samples, 0.09%)</title><rect x="1002.7" y="1331.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.7" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (4 samples, 0.09%)</title><rect x="1002.7" y="1315.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1005.7" y="1326.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1003.2" y="1299.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1006.2" y="1310.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.02%)</title><rect x="1003.5" y="1299.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1006.5" y="1310.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.02%)</title><rect x="1003.8" y="1347.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1006.8" y="1358.0"></text>
</g>
<g>
<title>Node::is_CFG() const (2 samples, 0.04%)</title><rect x="1004.0" y="1347.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1007.0" y="1358.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.02%)</title><rect x="1004.5" y="1347.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1007.5" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (17 samples, 0.36%)</title><rect x="1004.8" y="1347.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1007.8" y="1358.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.02%)</title><rect x="1008.0" y="1331.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1011.0" y="1342.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.06%)</title><rect x="1008.3" y="1331.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1011.3" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 0.28%)</title><rect x="1009.0" y="1347.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1012.0" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (7 samples, 0.15%)</title><rect x="1010.6" y="1331.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.6" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (7 samples, 0.15%)</title><rect x="1010.6" y="1315.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1013.6" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.182] (1 samples, 0.02%)</title><rect x="1011.1" y="1299.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1014.1" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (4 samples, 0.09%)</title><rect x="1011.3" y="1299.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1014.3" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (234 samples, 5.00%)</title><rect x="1012.3" y="1347.0" width="59.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1015.3" y="1358.0">PhaseI..</text>
</g>
<g>
<title>Node::is_CFG() const (3 samples, 0.06%)</title><rect x="1016.4" y="1331.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1019.4" y="1342.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.02%)</title><rect x="1017.1" y="1331.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1020.1" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (212 samples, 4.53%)</title><rect x="1017.4" y="1331.0" width="53.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1020.4" y="1342.0">Phase..</text>
</g>
<g>
<title>InitializeNode::Opcode() const (1 samples, 0.02%)</title><rect x="1019.4" y="1315.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1022.4" y="1326.0"></text>
</g>
<g>
<title>MemBarReleaseNode::Opcode() const (1 samples, 0.02%)</title><rect x="1019.6" y="1315.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1022.6" y="1326.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.02%)</title><rect x="1019.9" y="1315.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1022.9" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1020.1" y="1315.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1023.1" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (197 samples, 4.21%)</title><rect x="1020.4" y="1315.0" width="49.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1023.4" y="1326.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (7 samples, 0.15%)</title><rect x="1023.4" y="1299.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1026.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (6 samples, 0.13%)</title><rect x="1023.7" y="1283.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1026.7" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.182] (1 samples, 0.02%)</title><rect x="1024.4" y="1267.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1027.4" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.04%)</title><rect x="1024.7" y="1267.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1027.7" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.182] (2 samples, 0.04%)</title><rect x="1025.2" y="1299.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1028.2" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.04%)</title><rect x="1025.7" y="1299.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1028.7" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (174 samples, 3.72%)</title><rect x="1026.2" y="1299.0" width="43.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1029.2" y="1310.0">Phas..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1069.8" y="1283.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1072.8" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1069.8" y="1267.0" width="0.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1072.8" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1069.8" y="1251.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1072.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1069.8" y="1235.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1072.8" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1069.8" y="1219.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1072.8" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1069.8" y="1203.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1072.8" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1069.8" y="1187.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1072.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.02%)</title><rect x="1070.0" y="1315.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.0" y="1326.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.02%)</title><rect x="1070.3" y="1315.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1073.3" y="1326.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1070.5" y="1315.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1073.5" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.02%)</title><rect x="1070.8" y="1331.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.8" y="1342.0"></text>
</g>
<g>
<title>StorePNode::Opcode() const (1 samples, 0.02%)</title><rect x="1071.0" y="1331.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1074.0" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (9 samples, 0.19%)</title><rect x="1071.3" y="1347.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.3" y="1358.0"></text>
</g>
<g>
<title>CatchNode::Opcode() const (1 samples, 0.02%)</title><rect x="1072.6" y="1331.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1075.6" y="1342.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.02%)</title><rect x="1072.8" y="1331.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1075.8" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.04%)</title><rect x="1073.1" y="1331.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1076.1" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (36 samples, 0.77%)</title><rect x="1073.6" y="1347.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1076.6" y="1358.0"></text>
</g>
<g>
<title>CreateExNode::Opcode() const (1 samples, 0.02%)</title><rect x="1075.8" y="1331.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.8" y="1342.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.02%)</title><rect x="1076.1" y="1331.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.1" y="1342.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.02%)</title><rect x="1076.3" y="1331.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.3" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (2 samples, 0.04%)</title><rect x="1076.6" y="1331.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.6" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::handle_use(Node*, Node*, small_cache*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1076.6" y="1315.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.6" y="1326.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.02%)</title><rect x="1076.6" y="1299.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.6" y="1310.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.02%)</title><rect x="1076.6" y="1283.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.6" y="1294.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.02%)</title><rect x="1076.6" y="1267.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.6" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1076.8" y="1315.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.8" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.02%)</title><rect x="1076.8" y="1299.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.8" y="1310.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.02%)</title><rect x="1076.8" y="1283.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.8" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (5 samples, 0.11%)</title><rect x="1077.1" y="1331.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.1" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1077.8" y="1315.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.8" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.02%)</title><rect x="1078.1" y="1315.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1081.1" y="1326.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1078.1" y="1299.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.1" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (17 samples, 0.36%)</title><rect x="1078.4" y="1331.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.4" y="1342.0"></text>
</g>
<g>
<title>LoadLNode::Opcode() const (1 samples, 0.02%)</title><rect x="1078.6" y="1315.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.6" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (3 samples, 0.06%)</title><rect x="1078.9" y="1315.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.9" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.04%)</title><rect x="1079.1" y="1299.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1082.1" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (4 samples, 0.09%)</title><rect x="1079.6" y="1315.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1082.6" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1080.4" y="1299.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1083.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (5 samples, 0.11%)</title><rect x="1080.6" y="1315.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1083.6" y="1326.0"></text>
</g>
<g>
<title>BarrierSetC2::enqueue_useful_gc_barrier(Unique_Node_List&amp;, Node*) const (1 samples, 0.02%)</title><rect x="1080.6" y="1299.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1083.6" y="1310.0"></text>
</g>
<g>
<title>LoadBNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1080.9" y="1299.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1083.9" y="1310.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.02%)</title><rect x="1080.9" y="1283.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1083.9" y="1294.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1081.1" y="1299.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.1" y="1310.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.02%)</title><rect x="1081.1" y="1283.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.1" y="1294.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1081.1" y="1267.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.1" y="1278.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1081.1" y="1251.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.1" y="1262.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1081.1" y="1235.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1084.1" y="1246.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.02%)</title><rect x="1081.1" y="1219.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1084.1" y="1230.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.02%)</title><rect x="1081.4" y="1299.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const (1 samples, 0.02%)</title><rect x="1081.6" y="1299.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1084.6" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.02%)</title><rect x="1081.6" y="1283.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1084.6" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::try_move_store_before_loop(Node*, Node*) (2 samples, 0.04%)</title><rect x="1081.9" y="1315.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1084.9" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1082.4" y="1315.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.4" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 0.23%)</title><rect x="1082.6" y="1347.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.6" y="1358.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.02%)</title><rect x="1082.6" y="1331.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.6" y="1342.0"></text>
</g>
<g>
<title>Node::raise_bottom_type(Type const*) (1 samples, 0.02%)</title><rect x="1082.9" y="1331.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.9" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.19%)</title><rect x="1083.1" y="1331.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.1" y="1342.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1083.1" y="1315.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1086.1" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title><rect x="1083.1" y="1299.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1086.1" y="1310.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1083.1" y="1283.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1086.1" y="1294.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.02%)</title><rect x="1083.1" y="1267.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1086.1" y="1278.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1083.4" y="1315.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.4" y="1326.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.02%)</title><rect x="1083.4" y="1299.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1086.4" y="1310.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1083.6" y="1315.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1086.6" y="1326.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1083.6" y="1299.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1086.6" y="1310.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1083.9" y="1315.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.9" y="1326.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1083.9" y="1299.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1086.9" y="1310.0"></text>
</g>
<g>
<title>TypeAryPtr::remove_speculative() const (1 samples, 0.02%)</title><rect x="1083.9" y="1283.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1086.9" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1084.1" y="1315.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1087.1" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.02%)</title><rect x="1084.1" y="1299.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.1" y="1310.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.02%)</title><rect x="1084.1" y="1283.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1087.1" y="1294.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.02%)</title><rect x="1084.4" y="1315.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.4" y="1326.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.02%)</title><rect x="1084.4" y="1299.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1087.4" y="1310.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1084.7" y="1315.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1087.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.02%)</title><rect x="1084.7" y="1299.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.7" y="1310.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.02%)</title><rect x="1084.9" y="1315.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1087.9" y="1326.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1085.2" y="1315.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1088.2" y="1326.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.02%)</title><rect x="1085.2" y="1299.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.2" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1283.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1088.2" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1267.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1088.2" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1251.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1088.2" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1235.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1088.2" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1219.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1088.2" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1203.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.2" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1187.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1088.2" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1171.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1088.2" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1155.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1088.2" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1139.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1088.2" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1123.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1088.2" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1107.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1088.2" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1091.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1088.2" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1075.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1088.2" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1059.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1088.2" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1043.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1088.2" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1027.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1088.2" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="1011.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1088.2" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="995.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.2" y="1006.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1085.2" y="979.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1088.2" y="990.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1085.2" y="963.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1088.2" y="974.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.02%)</title><rect x="1085.4" y="1347.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1088.4" y="1358.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (3 samples, 0.06%)</title><rect x="1085.7" y="1347.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1088.7" y="1358.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (2 samples, 0.04%)</title><rect x="1086.4" y="1347.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.4" y="1358.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1086.9" y="1347.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1089.9" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (4 samples, 0.09%)</title><rect x="1087.2" y="1363.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.2" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) [clone .constprop.199] (2 samples, 0.04%)</title><rect x="1087.7" y="1347.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1090.7" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) [clone .constprop.200] (2 samples, 0.04%)</title><rect x="1087.7" y="1331.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.7" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (65 samples, 1.39%)</title><rect x="1088.2" y="1363.0" width="16.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1091.2" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (62 samples, 1.32%)</title><rect x="1088.4" y="1347.0" width="15.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1091.4" y="1358.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1089.2" y="1331.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.2" y="1342.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1089.4" y="1331.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.4" y="1342.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1089.7" y="1331.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.7" y="1342.0"></text>
</g>
<g>
<title>ConstraintCastNode::dominating_cast(PhaseGVN*, PhaseTransform*) const (1 samples, 0.02%)</title><rect x="1089.7" y="1315.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1092.7" y="1326.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (5 samples, 0.11%)</title><rect x="1089.9" y="1331.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.9" y="1342.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.02%)</title><rect x="1089.9" y="1315.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1092.9" y="1326.0"></text>
</g>
<g>
<title>IfNode::search_identical(int) (1 samples, 0.02%)</title><rect x="1090.2" y="1315.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.2" y="1326.0"></text>
</g>
<g>
<title>RangeCheckNode::Opcode() const (1 samples, 0.02%)</title><rect x="1090.4" y="1315.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.4" y="1326.0"></text>
</g>
<g>
<title>split_if(IfNode*, PhaseIterGVN*) (2 samples, 0.04%)</title><rect x="1090.7" y="1315.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1093.7" y="1326.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.02%)</title><rect x="1091.0" y="1299.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.0" y="1310.0"></text>
</g>
<g>
<title>LoadBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1091.2" y="1331.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1094.2" y="1342.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.02%)</title><rect x="1091.2" y="1315.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.2" y="1326.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.02%)</title><rect x="1091.2" y="1299.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.2" y="1310.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.02%)</title><rect x="1091.2" y="1283.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1094.2" y="1294.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.02%)</title><rect x="1091.2" y="1267.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1094.2" y="1278.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="1091.5" y="1331.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.5" y="1342.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1091.5" y="1315.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.5" y="1326.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.02%)</title><rect x="1091.7" y="1315.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.7" y="1326.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1091.7" y="1299.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.7" y="1310.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1091.7" y="1283.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1094.7" y="1294.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1092.0" y="1331.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.0" y="1342.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.02%)</title><rect x="1092.0" y="1315.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.0" y="1326.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.02%)</title><rect x="1092.0" y="1299.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.0" y="1310.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.02%)</title><rect x="1092.0" y="1283.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.0" y="1294.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.02%)</title><rect x="1092.0" y="1267.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.0" y="1278.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1092.2" y="1331.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.2" y="1342.0"></text>
</g>
<g>
<title>MulNode::Identity(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1092.5" y="1331.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.5" y="1342.0"></text>
</g>
<g>
<title>TypeInt::make(int, int, int) (1 samples, 0.02%)</title><rect x="1092.5" y="1315.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.5" y="1326.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.04%)</title><rect x="1092.7" y="1331.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.7" y="1342.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.02%)</title><rect x="1093.0" y="1315.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.0" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.02%)</title><rect x="1093.2" y="1331.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.2" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (7 samples, 0.15%)</title><rect x="1093.5" y="1331.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.5" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.04%)</title><rect x="1094.7" y="1315.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.7" y="1326.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.02%)</title><rect x="1095.0" y="1299.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.0" y="1310.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (4 samples, 0.09%)</title><rect x="1095.2" y="1331.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.2" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title><rect x="1095.2" y="1315.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.2" y="1326.0"></text>
</g>
<g>
<title>CheckCastPPNode::Identity(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1095.2" y="1299.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.2" y="1310.0"></text>
</g>
<g>
<title>CallStaticJavaNode::Opcode() const (1 samples, 0.02%)</title><rect x="1095.2" y="1283.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.2" y="1294.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.02%)</title><rect x="1095.5" y="1315.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1098.5" y="1326.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (2 samples, 0.04%)</title><rect x="1095.7" y="1315.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1098.7" y="1326.0"></text>
</g>
<g>
<title>PhiNode::is_diamond_phi(bool) const (1 samples, 0.02%)</title><rect x="1096.2" y="1331.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.2" y="1342.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (8 samples, 0.17%)</title><rect x="1096.5" y="1331.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.5" y="1342.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.02%)</title><rect x="1096.7" y="1315.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.06%)</title><rect x="1097.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1100.0" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.04%)</title><rect x="1097.3" y="1299.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.3" y="1310.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 0.04%)</title><rect x="1097.3" y="1283.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.3" y="1294.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.02%)</title><rect x="1097.8" y="1315.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.8" y="1326.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.04%)</title><rect x="1098.0" y="1315.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.0" y="1326.0"></text>
</g>
<g>
<title>StoreCMNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1098.5" y="1331.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.5" y="1342.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1098.5" y="1315.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1101.5" y="1326.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1098.5" y="1299.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.5" y="1310.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (21 samples, 0.45%)</title><rect x="1098.8" y="1331.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1101.8" y="1342.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (21 samples, 0.45%)</title><rect x="1098.8" y="1315.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1101.8" y="1326.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (21 samples, 0.45%)</title><rect x="1098.8" y="1299.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1101.8" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (21 samples, 0.45%)</title><rect x="1098.8" y="1283.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1101.8" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (18 samples, 0.38%)</title><rect x="1098.8" y="1267.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.8" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (17 samples, 0.36%)</title><rect x="1098.8" y="1251.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.8" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (15 samples, 0.32%)</title><rect x="1098.8" y="1235.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.8" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (15 samples, 0.32%)</title><rect x="1098.8" y="1219.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.8" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (14 samples, 0.30%)</title><rect x="1098.8" y="1203.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.8" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (13 samples, 0.28%)</title><rect x="1098.8" y="1187.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1101.8" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (12 samples, 0.26%)</title><rect x="1098.8" y="1171.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1101.8" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (10 samples, 0.21%)</title><rect x="1098.8" y="1155.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1101.8" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (9 samples, 0.19%)</title><rect x="1098.8" y="1139.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.8" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (8 samples, 0.17%)</title><rect x="1098.8" y="1123.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.8" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (7 samples, 0.15%)</title><rect x="1098.8" y="1107.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.8" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (6 samples, 0.13%)</title><rect x="1098.8" y="1091.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.8" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (6 samples, 0.13%)</title><rect x="1098.8" y="1075.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.8" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.09%)</title><rect x="1098.8" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.8" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.09%)</title><rect x="1098.8" y="1043.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1101.8" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1098.8" y="1027.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1101.8" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1098.8" y="1011.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.8" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.04%)</title><rect x="1098.8" y="995.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1101.8" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1098.8" y="979.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1101.8" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.04%)</title><rect x="1099.3" y="1027.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.3" y="1038.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1099.3" y="1011.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.3" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.04%)</title><rect x="1099.8" y="1059.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1102.8" y="1070.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1099.8" y="1043.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.8" y="1054.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1100.3" y="1091.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1103.3" y="1102.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1100.3" y="1075.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1103.3" y="1086.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1100.5" y="1107.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.5" y="1118.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1100.5" y="1091.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.5" y="1102.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1100.8" y="1123.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.8" y="1134.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1100.8" y="1107.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.8" y="1118.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1101.0" y="1139.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1104.0" y="1150.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1101.0" y="1123.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1104.0" y="1134.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.04%)</title><rect x="1101.3" y="1155.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1104.3" y="1166.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1101.3" y="1139.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1104.3" y="1150.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1101.8" y="1171.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.8" y="1182.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1101.8" y="1155.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1104.8" y="1166.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1102.0" y="1187.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1105.0" y="1198.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1102.0" y="1171.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1105.0" y="1182.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1102.3" y="1203.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.3" y="1214.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1102.3" y="1187.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.3" y="1198.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.04%)</title><rect x="1102.5" y="1235.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1105.5" y="1246.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1102.5" y="1219.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.5" y="1230.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1103.0" y="1251.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.0" y="1262.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1103.0" y="1235.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.0" y="1246.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (3 samples, 0.06%)</title><rect x="1103.3" y="1267.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.3" y="1278.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (3 samples, 0.06%)</title><rect x="1103.3" y="1251.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.3" y="1262.0"></text>
</g>
<g>
<title>TypeInt::singleton() const (1 samples, 0.02%)</title><rect x="1104.1" y="1347.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.1" y="1358.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.02%)</title><rect x="1104.3" y="1347.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1107.3" y="1358.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.04%)</title><rect x="1104.6" y="1363.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.6" y="1374.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.04%)</title><rect x="1104.6" y="1347.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.6" y="1358.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (2 samples, 0.04%)</title><rect x="1104.6" y="1331.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.6" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1104.6" y="1315.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1107.6" y="1326.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1104.8" y="1315.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1107.8" y="1326.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (10 samples, 0.21%)</title><rect x="1105.1" y="1363.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1108.1" y="1374.0"></text>
</g>
<g>
<title>OuterStripMinedLoopNode::adjust_strip_mined_loop(PhaseIterGVN*) (1 samples, 0.02%)</title><rect x="1105.1" y="1347.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.1" y="1358.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.02%)</title><rect x="1105.1" y="1331.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.1" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.15%)</title><rect x="1105.3" y="1347.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.3" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.13%)</title><rect x="1105.3" y="1331.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.3" y="1342.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseGVN*) const (2 samples, 0.04%)</title><rect x="1105.3" y="1315.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.3" y="1326.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1105.6" y="1299.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.6" y="1310.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.02%)</title><rect x="1105.6" y="1283.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.6" y="1294.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1105.8" y="1315.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.8" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1105.8" y="1299.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.8" y="1310.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1106.1" y="1315.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1109.1" y="1326.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1106.1" y="1299.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.1" y="1310.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1106.1" y="1283.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.1" y="1294.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.02%)</title><rect x="1106.1" y="1267.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.1" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.02%)</title><rect x="1106.3" y="1315.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.3" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1106.6" y="1315.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.6" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.02%)</title><rect x="1106.6" y="1299.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1109.6" y="1310.0"></text>
</g>
<g>
<title>TypeLong::singleton() const (1 samples, 0.02%)</title><rect x="1106.8" y="1331.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.8" y="1342.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (2 samples, 0.04%)</title><rect x="1107.1" y="1347.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.1" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.02%)</title><rect x="1107.1" y="1331.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.1" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.02%)</title><rect x="1107.1" y="1315.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.1" y="1326.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1107.3" y="1331.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.3" y="1342.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_load(Node*, Node*, Node*, int, Type const*, BasicType) (1 samples, 0.02%)</title><rect x="1107.3" y="1315.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.3" y="1326.0"></text>
</g>
<g>
<title>LoadNode::bottom_type() const (1 samples, 0.02%)</title><rect x="1107.3" y="1299.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.3" y="1310.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.04%)</title><rect x="1107.6" y="1363.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.6" y="1374.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.02%)</title><rect x="1107.8" y="1347.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.8" y="1358.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.02%)</title><rect x="1107.8" y="1331.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.8" y="1342.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.02%)</title><rect x="1108.1" y="1363.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.1" y="1374.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (6 samples, 0.13%)</title><rect x="1108.3" y="1379.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.3" y="1390.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (4 samples, 0.09%)</title><rect x="1108.3" y="1363.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.3" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.09%)</title><rect x="1108.3" y="1347.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.3" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.09%)</title><rect x="1108.3" y="1331.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.3" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.09%)</title><rect x="1108.3" y="1315.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1111.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.09%)</title><rect x="1108.3" y="1299.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.09%)</title><rect x="1108.3" y="1283.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.09%)</title><rect x="1108.3" y="1267.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.3" y="1278.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1108.3" y="1251.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1111.3" y="1262.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1108.3" y="1235.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.3" y="1246.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1108.3" y="1219.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.3" y="1230.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.02%)</title><rect x="1108.3" y="1203.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.3" y="1214.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.02%)</title><rect x="1108.3" y="1187.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.3" y="1198.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="1108.3" y="1171.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.3" y="1182.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.02%)</title><rect x="1108.3" y="1155.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.3" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1108.6" y="1251.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.6" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1108.6" y="1235.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.6" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1108.6" y="1219.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.6" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1108.6" y="1203.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.06%)</title><rect x="1108.6" y="1187.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.6" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1108.6" y="1171.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.6" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1108.6" y="1155.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.6" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1108.6" y="1139.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1108.6" y="1123.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1108.6" y="1107.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1108.6" y="1091.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.6" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1108.6" y="1075.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.6" y="1086.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1108.6" y="1059.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.6" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1108.8" y="1059.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.8" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1108.8" y="1043.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1108.8" y="1027.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1108.8" y="1011.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1108.8" y="995.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.8" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1108.8" y="979.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.8" y="990.0"></text>
</g>
<g>
<title>SubINode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1108.8" y="963.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.8" y="974.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1108.8" y="947.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1111.8" y="958.0"></text>
</g>
<g>
<title>SubINode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1108.8" y="931.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.8" y="942.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.02%)</title><rect x="1108.8" y="915.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.8" y="926.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.02%)</title><rect x="1108.8" y="899.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.8" y="910.0"></text>
</g>
<g>
<title>ConNode::make(Type const*) (1 samples, 0.02%)</title><rect x="1108.8" y="883.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1109.1" y="1171.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.1" y="1182.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.02%)</title><rect x="1109.1" y="1155.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.1" y="1166.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1109.1" y="1139.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.1" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1109.1" y="1123.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.1" y="1134.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1109.1" y="1107.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.1" y="1118.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.02%)</title><rect x="1109.1" y="1091.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.1" y="1102.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.02%)</title><rect x="1109.1" y="1075.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.1" y="1086.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.02%)</title><rect x="1109.4" y="1363.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.4" y="1374.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.02%)</title><rect x="1109.4" y="1347.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1112.4" y="1358.0"></text>
</g>
<g>
<title>PhaseStringOpts::PhaseStringOpts(PhaseGVN*, Unique_Node_List*) (1 samples, 0.02%)</title><rect x="1109.6" y="1363.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1112.6" y="1374.0"></text>
</g>
<g>
<title>PhaseStringOpts::replace_string_concat(StringConcat*) (1 samples, 0.02%)</title><rect x="1109.6" y="1347.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.6" y="1358.0"></text>
</g>
<g>
<title>GraphKit::load_String_length(Node*, Node*) (1 samples, 0.02%)</title><rect x="1109.6" y="1331.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.6" y="1342.0"></text>
</g>
<g>
<title>GraphKit::load_String_coder(Node*, Node*) (1 samples, 0.02%)</title><rect x="1109.6" y="1315.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.6" y="1326.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.02%)</title><rect x="1109.6" y="1299.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.6" y="1310.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.02%)</title><rect x="1109.6" y="1283.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1112.6" y="1294.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1109.6" y="1267.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.6" y="1278.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (1 samples, 0.02%)</title><rect x="1109.9" y="1379.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.9" y="1390.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.02%)</title><rect x="1109.9" y="1363.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.9" y="1374.0"></text>
</g>
<g>
<title>DictI::operator++() (1 samples, 0.02%)</title><rect x="1109.9" y="1347.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1112.9" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (97 samples, 2.07%)</title><rect x="1110.1" y="1379.0" width="24.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.1" y="1390.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (97 samples, 2.07%)</title><rect x="1110.1" y="1363.0" width="24.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1113.1" y="1374.0">P..</text>
</g>
<g>
<title>Dependencies::assert_evol_method(ciMethod*) (1 samples, 0.02%)</title><rect x="1110.1" y="1347.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.1" y="1358.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::grow(int) (1 samples, 0.02%)</title><rect x="1110.1" y="1331.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1113.1" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (96 samples, 2.05%)</title><rect x="1110.4" y="1347.0" width="24.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.4" y="1358.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (96 samples, 2.05%)</title><rect x="1110.4" y="1331.0" width="24.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.4" y="1342.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (96 samples, 2.05%)</title><rect x="1110.4" y="1315.0" width="24.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.4" y="1326.0">P..</text>
</g>
<g>
<title>Parse::array_load(BasicType) (2 samples, 0.04%)</title><rect x="1110.4" y="1299.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.4" y="1310.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (2 samples, 0.04%)</title><rect x="1110.4" y="1283.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1113.4" y="1294.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (2 samples, 0.04%)</title><rect x="1110.4" y="1267.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.4" y="1278.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.02%)</title><rect x="1110.4" y="1251.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.4" y="1262.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.02%)</title><rect x="1110.4" y="1235.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.4" y="1246.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.02%)</title><rect x="1110.4" y="1219.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.4" y="1230.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.02%)</title><rect x="1110.4" y="1203.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.4" y="1214.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.02%)</title><rect x="1110.6" y="1251.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.6" y="1262.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1110.6" y="1235.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.6" y="1246.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1110.6" y="1219.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.6" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (92 samples, 1.96%)</title><rect x="1110.9" y="1299.0" width="23.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.9" y="1310.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (6 samples, 0.13%)</title><rect x="1110.9" y="1283.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.9" y="1294.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (4 samples, 0.09%)</title><rect x="1111.1" y="1267.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.1" y="1278.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (4 samples, 0.09%)</title><rect x="1111.1" y="1251.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.1" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (4 samples, 0.09%)</title><rect x="1111.1" y="1235.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.1" y="1246.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (4 samples, 0.09%)</title><rect x="1111.1" y="1219.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.1" y="1230.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (4 samples, 0.09%)</title><rect x="1111.1" y="1203.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.1" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (4 samples, 0.09%)</title><rect x="1111.1" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.1" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1111.4" y="1171.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.4" y="1182.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::append(ciTypeFlow::Block* const&amp;) (1 samples, 0.02%)</title><rect x="1111.4" y="1155.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1114.4" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.04%)</title><rect x="1111.6" y="1171.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.6" y="1182.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (2 samples, 0.04%)</title><rect x="1111.6" y="1155.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.6" y="1166.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.04%)</title><rect x="1111.6" y="1139.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.6" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.04%)</title><rect x="1111.6" y="1123.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.6" y="1134.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.02%)</title><rect x="1111.6" y="1107.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.6" y="1118.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.02%)</title><rect x="1111.6" y="1091.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.6" y="1102.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="1111.6" y="1075.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.6" y="1086.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.02%)</title><rect x="1111.6" y="1059.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1114.6" y="1070.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.02%)</title><rect x="1111.6" y="1043.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.6" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.02%)</title><rect x="1111.6" y="1027.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.6" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.02%)</title><rect x="1111.6" y="1011.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.6" y="1022.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1111.9" y="1107.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.9" y="1118.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1111.9" y="1091.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.9" y="1102.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1111.9" y="1075.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.9" y="1086.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.02%)</title><rect x="1111.9" y="1059.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.9" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.02%)</title><rect x="1111.9" y="1043.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.9" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.02%)</title><rect x="1111.9" y="1027.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.9" y="1038.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.02%)</title><rect x="1111.9" y="1011.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.9" y="1022.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.02%)</title><rect x="1112.1" y="1267.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1115.1" y="1278.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.02%)</title><rect x="1112.4" y="1283.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1115.4" y="1294.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.02%)</title><rect x="1112.4" y="1267.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.4" y="1278.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.02%)</title><rect x="1112.4" y="1251.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.4" y="1262.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.02%)</title><rect x="1112.6" y="1283.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.6" y="1294.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.02%)</title><rect x="1112.6" y="1267.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.6" y="1278.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.02%)</title><rect x="1112.6" y="1251.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.6" y="1262.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.02%)</title><rect x="1112.6" y="1235.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.6" y="1246.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_return_for_speculation() (1 samples, 0.02%)</title><rect x="1112.9" y="1283.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.9" y="1294.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*, ProfilePtrKind) (1 samples, 0.02%)</title><rect x="1112.9" y="1267.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.9" y="1278.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.02%)</title><rect x="1112.9" y="1251.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.9" y="1262.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.02%)</title><rect x="1112.9" y="1235.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.9" y="1246.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1113.1" y="1283.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.1" y="1294.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.02%)</title><rect x="1113.1" y="1267.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.1" y="1278.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_arraycopy() (1 samples, 0.02%)</title><rect x="1113.1" y="1251.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.1" y="1262.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.02%)</title><rect x="1113.1" y="1235.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.1" y="1246.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1113.1" y="1219.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.1" y="1230.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1113.1" y="1203.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.1" y="1214.0"></text>
</g>
<g>
<title>TypeAryPtr::xdual() const (1 samples, 0.02%)</title><rect x="1113.1" y="1187.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.1" y="1198.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1113.1" y="1171.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.1" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (68 samples, 1.45%)</title><rect x="1113.4" y="1283.0" width="17.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.4" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (68 samples, 1.45%)</title><rect x="1113.4" y="1267.0" width="17.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.4" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (67 samples, 1.43%)</title><rect x="1113.4" y="1251.0" width="16.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.4" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (65 samples, 1.39%)</title><rect x="1113.4" y="1235.0" width="16.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.4" y="1246.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.02%)</title><rect x="1113.4" y="1219.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.4" y="1230.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.02%)</title><rect x="1113.4" y="1203.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.4" y="1214.0"></text>
</g>
<g>
<title>Phase::gen_subtype_check(Node*, Node*, Node**, MergeMemNode*, PhaseGVN*) (1 samples, 0.02%)</title><rect x="1113.4" y="1187.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.4" y="1198.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1113.4" y="1171.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.4" y="1182.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1113.4" y="1155.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (64 samples, 1.37%)</title><rect x="1113.6" y="1219.0" width="16.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.6" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (61 samples, 1.30%)</title><rect x="1113.6" y="1203.0" width="15.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.6" y="1214.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.04%)</title><rect x="1113.6" y="1187.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.6" y="1198.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.04%)</title><rect x="1113.6" y="1171.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.6" y="1182.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.04%)</title><rect x="1113.6" y="1155.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.6" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.04%)</title><rect x="1113.6" y="1139.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.6" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.04%)</title><rect x="1113.6" y="1123.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.6" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_heads(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1113.6" y="1107.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.6" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1113.6" y="1091.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.6" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1113.6" y="1075.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.6" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::JsrSet::copy_into(ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1113.6" y="1059.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.6" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1113.9" y="1107.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.9" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1113.9" y="1091.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.9" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1113.9" y="1075.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.9" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1113.9" y="1059.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.9" y="1070.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.02%)</title><rect x="1113.9" y="1043.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.9" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1113.9" y="1027.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.9" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1113.9" y="1011.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.9" y="1022.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1113.9" y="995.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.9" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1113.9" y="979.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.9" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.02%)</title><rect x="1113.9" y="963.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.9" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.02%)</title><rect x="1113.9" y="947.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.9" y="958.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.02%)</title><rect x="1113.9" y="931.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.9" y="942.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.02%)</title><rect x="1113.9" y="915.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1116.9" y="926.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.02%)</title><rect x="1114.1" y="1187.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.1" y="1198.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.02%)</title><rect x="1114.1" y="1171.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.1" y="1182.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.02%)</title><rect x="1114.1" y="1155.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.1" y="1166.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1114.1" y="1139.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.1" y="1150.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1114.1" y="1123.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.1" y="1134.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1114.1" y="1107.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.1" y="1118.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.02%)</title><rect x="1114.1" y="1091.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.1" y="1102.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.02%)</title><rect x="1114.1" y="1075.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.1" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (38 samples, 0.81%)</title><rect x="1114.4" y="1187.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.4" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (38 samples, 0.81%)</title><rect x="1114.4" y="1171.0" width="9.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (36 samples, 0.77%)</title><rect x="1114.4" y="1155.0" width="9.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (35 samples, 0.75%)</title><rect x="1114.4" y="1139.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1117.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (35 samples, 0.75%)</title><rect x="1114.4" y="1123.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.4" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (33 samples, 0.70%)</title><rect x="1114.4" y="1107.0" width="8.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.4" y="1118.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (4 samples, 0.09%)</title><rect x="1114.4" y="1091.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.4" y="1102.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.02%)</title><rect x="1114.4" y="1075.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.4" y="1086.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.02%)</title><rect x="1114.4" y="1059.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.4" y="1070.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1114.4" y="1043.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.4" y="1054.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1114.4" y="1027.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.4" y="1038.0"></text>
</g>
<g>
<title>ciMethod::is_compiled_lambda_form() const (1 samples, 0.02%)</title><rect x="1114.4" y="1011.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.4" y="1022.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.02%)</title><rect x="1114.6" y="1075.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.6" y="1086.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.04%)</title><rect x="1114.9" y="1075.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.9" y="1086.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1114.9" y="1059.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.9" y="1070.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.02%)</title><rect x="1114.9" y="1043.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.9" y="1054.0"></text>
</g>
<g>
<title>DirectiveSet::should_inline(ciMethod*) (1 samples, 0.02%)</title><rect x="1114.9" y="1027.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.9" y="1038.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1115.1" y="1059.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.1" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1115.1" y="1043.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.1" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1115.1" y="1027.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.1" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1115.1" y="1011.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.1" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1115.1" y="995.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.1" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1115.1" y="979.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.1" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.02%)</title><rect x="1115.1" y="963.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.1" y="974.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1115.1" y="947.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.1" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1115.1" y="931.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.1" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1115.1" y="915.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.1" y="926.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1115.1" y="899.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.1" y="910.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1115.1" y="883.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.1" y="894.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.02%)</title><rect x="1115.1" y="867.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.1" y="878.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.02%)</title><rect x="1115.4" y="1091.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.4" y="1102.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.02%)</title><rect x="1115.4" y="1075.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.4" y="1086.0"></text>
</g>
<g>
<title>TypeTuple::make_range(ciSignature*) (1 samples, 0.02%)</title><rect x="1115.4" y="1059.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.4" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (27 samples, 0.58%)</title><rect x="1115.7" y="1091.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.7" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (27 samples, 0.58%)</title><rect x="1115.7" y="1075.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.7" y="1086.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.02%)</title><rect x="1115.7" y="1059.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.7" y="1070.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1115.7" y="1043.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.7" y="1054.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1115.7" y="1027.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.7" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1115.7" y="1011.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.7" y="1022.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.02%)</title><rect x="1115.7" y="995.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.7" y="1006.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.02%)</title><rect x="1115.7" y="979.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (26 samples, 0.56%)</title><rect x="1115.9" y="1059.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (26 samples, 0.56%)</title><rect x="1115.9" y="1043.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (26 samples, 0.56%)</title><rect x="1115.9" y="1027.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (26 samples, 0.56%)</title><rect x="1115.9" y="1011.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.9" y="1022.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.04%)</title><rect x="1115.9" y="995.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.9" y="1006.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.04%)</title><rect x="1115.9" y="979.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.9" y="990.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1115.9" y="963.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.9" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1116.2" y="963.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.2" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1116.2" y="947.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.2" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1116.2" y="931.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.2" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1116.2" y="915.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.2" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1116.2" y="899.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.2" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1116.2" y="883.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.2" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.02%)</title><rect x="1116.2" y="867.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.2" y="878.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1116.2" y="851.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.2" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1116.2" y="835.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.2" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1116.2" y="819.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.2" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1116.2" y="803.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.2" y="814.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1116.2" y="787.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.2" y="798.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.02%)</title><rect x="1116.2" y="771.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.2" y="782.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.02%)</title><rect x="1116.2" y="755.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.2" y="766.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.02%)</title><rect x="1116.2" y="739.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.2" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (24 samples, 0.51%)</title><rect x="1116.4" y="995.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.4" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (24 samples, 0.51%)</title><rect x="1116.4" y="979.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.4" y="990.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.02%)</title><rect x="1116.4" y="963.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.4" y="974.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.02%)</title><rect x="1116.4" y="947.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.4" y="958.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.02%)</title><rect x="1116.7" y="963.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.7" y="974.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.02%)</title><rect x="1116.7" y="947.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.7" y="958.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.02%)</title><rect x="1116.7" y="931.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1119.7" y="942.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.02%)</title><rect x="1116.7" y="915.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.7" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.02%)</title><rect x="1116.7" y="899.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.7" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1116.7" y="883.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.7" y="894.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1116.7" y="867.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1119.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (21 samples, 0.45%)</title><rect x="1116.9" y="963.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (21 samples, 0.45%)</title><rect x="1116.9" y="947.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (21 samples, 0.45%)</title><rect x="1116.9" y="931.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (17 samples, 0.36%)</title><rect x="1116.9" y="915.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.9" y="926.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.04%)</title><rect x="1116.9" y="899.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.9" y="910.0"></text>
</g>
<g>
<title>InlineTree::find_subtree_from_root(InlineTree*, JVMState*, ciMethod*) (1 samples, 0.02%)</title><rect x="1116.9" y="883.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.9" y="894.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1117.2" y="883.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1120.2" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1117.2" y="867.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.2" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1117.2" y="851.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.2" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1117.2" y="835.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.2" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1117.2" y="819.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.2" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1117.2" y="803.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.2" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1117.2" y="787.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.2" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1117.2" y="771.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.2" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.02%)</title><rect x="1117.2" y="755.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.2" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1117.2" y="739.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.2" y="750.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1117.4" y="899.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.4" y="910.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.02%)</title><rect x="1117.4" y="883.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.4" y="894.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1117.4" y="867.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.4" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.26%)</title><rect x="1117.7" y="899.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1120.7" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.26%)</title><rect x="1117.7" y="883.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.21%)</title><rect x="1117.7" y="867.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.21%)</title><rect x="1117.7" y="851.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.02%)</title><rect x="1117.7" y="835.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.7" y="846.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.02%)</title><rect x="1117.7" y="819.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1120.7" y="830.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.02%)</title><rect x="1117.7" y="803.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.7" y="814.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.02%)</title><rect x="1117.7" y="787.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.7" y="798.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.02%)</title><rect x="1117.7" y="771.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.7" y="782.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.02%)</title><rect x="1117.7" y="755.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.19%)</title><rect x="1117.9" y="835.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1120.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.13%)</title><rect x="1117.9" y="819.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.9" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.04%)</title><rect x="1117.9" y="803.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.9" y="814.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.02%)</title><rect x="1117.9" y="787.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.9" y="798.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.02%)</title><rect x="1117.9" y="771.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.9" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1117.9" y="755.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.9" y="766.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1117.9" y="739.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.9" y="750.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1117.9" y="723.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1120.9" y="734.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.02%)</title><rect x="1117.9" y="707.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.9" y="718.0"></text>
</g>
<g>
<title>ciKlass::is_subclass_of(ciKlass*) (1 samples, 0.02%)</title><rect x="1117.9" y="691.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1120.9" y="702.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1118.2" y="787.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.2" y="798.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1118.2" y="771.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.2" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1118.2" y="755.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.2" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1118.2" y="739.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.2" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1118.2" y="723.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1121.2" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1118.2" y="707.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.2" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1118.2" y="691.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.2" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_new(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1118.2" y="675.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.2" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.02%)</title><rect x="1118.2" y="659.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.2" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1118.2" y="643.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.2" y="654.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle const&amp;, int) (1 samples, 0.02%)</title><rect x="1118.2" y="627.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.2" y="638.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.02%)</title><rect x="1118.2" y="611.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.09%)</title><rect x="1118.4" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.4" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.09%)</title><rect x="1118.4" y="787.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.4" y="798.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.02%)</title><rect x="1118.4" y="771.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1118.7" y="771.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1118.7" y="755.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.06%)</title><rect x="1118.7" y="739.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1118.7" y="723.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1121.7" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1118.7" y="707.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1121.7" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1118.7" y="691.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1118.7" y="675.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1121.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1118.7" y="659.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1118.7" y="643.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1118.7" y="627.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.7" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1118.7" y="611.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1118.7" y="595.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1118.7" y="579.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1118.7" y="563.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1121.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1118.7" y="547.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1118.7" y="531.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.7" y="542.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1118.7" y="515.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.7" y="526.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.02%)</title><rect x="1118.7" y="499.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.7" y="510.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, BasicType, LibraryCallKit::AccessKind, bool) (1 samples, 0.02%)</title><rect x="1118.7" y="483.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.7" y="494.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1118.7" y="467.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.7" y="478.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1118.7" y="451.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.7" y="462.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1118.7" y="435.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.7" y="446.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.02%)</title><rect x="1118.7" y="419.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.7" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1118.9" y="515.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.9" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1118.9" y="499.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.9" y="510.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.02%)</title><rect x="1118.9" y="483.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.9" y="494.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.02%)</title><rect x="1118.9" y="467.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.9" y="478.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="1118.9" y="451.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.9" y="462.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.02%)</title><rect x="1118.9" y="435.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.9" y="446.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.02%)</title><rect x="1118.9" y="419.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.9" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.02%)</title><rect x="1118.9" y="403.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.9" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.02%)</title><rect x="1118.9" y="387.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.9" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1119.2" y="707.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1119.2" y="691.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1119.2" y="675.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1119.2" y="659.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1119.2" y="643.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1119.2" y="627.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1119.2" y="611.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1119.2" y="595.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1119.2" y="579.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1119.2" y="563.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1119.2" y="547.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1119.2" y="531.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1119.2" y="515.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1119.2" y="499.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1119.2" y="483.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1119.2" y="467.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1119.2" y="451.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1119.2" y="435.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.02%)</title><rect x="1119.2" y="419.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.2" y="430.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1119.2" y="403.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.2" y="414.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1119.2" y="387.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.2" y="398.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.02%)</title><rect x="1119.2" y="371.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.2" y="382.0"></text>
</g>
<g>
<title>JVMState::clone_deep(Compile*) const (1 samples, 0.02%)</title><rect x="1119.2" y="355.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.04%)</title><rect x="1119.4" y="819.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.04%)</title><rect x="1119.4" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.4" y="814.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (2 samples, 0.04%)</title><rect x="1119.4" y="787.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.4" y="798.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.04%)</title><rect x="1119.4" y="771.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.4" y="782.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.04%)</title><rect x="1119.4" y="755.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.4" y="766.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1119.4" y="739.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.4" y="750.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1119.4" y="723.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.4" y="734.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1119.4" y="707.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.4" y="718.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1119.4" y="691.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.4" y="702.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.02%)</title><rect x="1119.4" y="675.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.4" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="659.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.4" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="643.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.4" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="627.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.4" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="611.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.4" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="595.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.4" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="579.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.4" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="563.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.4" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="547.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.4" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="531.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.4" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="515.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.4" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="499.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.4" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="483.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.4" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="467.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.4" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="451.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.4" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="435.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.4" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="419.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.4" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="403.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.4" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="387.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.4" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="371.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.4" y="382.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="355.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.4" y="366.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="339.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.4" y="350.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1119.4" y="323.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.4" y="334.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1119.4" y="307.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.4" y="318.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.02%)</title><rect x="1119.7" y="739.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.7" y="750.0"></text>
</g>
<g>
<title>GraphKit::final_sync(IdealKit&amp;) (1 samples, 0.02%)</title><rect x="1119.7" y="723.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.7" y="734.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.02%)</title><rect x="1119.7" y="707.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.7" y="718.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.02%)</title><rect x="1119.7" y="691.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.02%)</title><rect x="1119.9" y="819.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.9" y="830.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.02%)</title><rect x="1119.9" y="803.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.9" y="814.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.02%)</title><rect x="1119.9" y="787.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.9" y="798.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.02%)</title><rect x="1119.9" y="771.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.9" y="782.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.02%)</title><rect x="1119.9" y="755.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_exits() (2 samples, 0.04%)</title><rect x="1120.2" y="867.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.2" y="878.0"></text>
</g>
<g>
<title>AllocateNode::compute_MemBar_redundancy(ciMethod*) (1 samples, 0.02%)</title><rect x="1120.2" y="851.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.2" y="862.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1120.4" y="851.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.4" y="862.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1120.4" y="835.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.4" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.04%)</title><rect x="1120.7" y="899.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.7" y="910.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_method_type() (1 samples, 0.02%)</title><rect x="1120.7" y="883.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.7" y="894.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1120.7" y="867.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1123.7" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1120.9" y="883.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.9" y="894.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.02%)</title><rect x="1120.9" y="867.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.9" y="878.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.02%)</title><rect x="1120.9" y="851.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.9" y="862.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="1120.9" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.9" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.02%)</title><rect x="1120.9" y="819.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1121.2" y="915.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1121.2" y="899.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.2" y="910.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1121.2" y="883.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.2" y="894.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1121.2" y="867.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.2" y="878.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1121.2" y="851.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1124.2" y="862.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.02%)</title><rect x="1121.2" y="835.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.2" y="846.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.02%)</title><rect x="1121.2" y="819.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.2" y="830.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1121.2" y="803.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.2" y="814.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1121.2" y="787.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.02%)</title><rect x="1121.4" y="915.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.4" y="926.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.02%)</title><rect x="1121.4" y="899.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.4" y="910.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1121.4" y="883.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1124.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.02%)</title><rect x="1121.7" y="915.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.7" y="926.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.02%)</title><rect x="1121.7" y="899.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.7" y="910.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.02%)</title><rect x="1121.7" y="883.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.7" y="894.0"></text>
</g>
<g>
<title>ReplacedNodes::record(Node*, Node*) (1 samples, 0.02%)</title><rect x="1121.7" y="867.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.7" y="878.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.02%)</title><rect x="1122.0" y="915.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.0" y="926.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.02%)</title><rect x="1122.0" y="899.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.0" y="910.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.02%)</title><rect x="1122.0" y="883.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.0" y="894.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.164] (1 samples, 0.02%)</title><rect x="1122.2" y="963.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.2" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1122.2" y="947.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.2" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1122.2" y="931.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.2" y="942.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 0.02%)</title><rect x="1122.2" y="915.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.2" y="926.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1122.5" y="1091.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.5" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1122.5" y="1075.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.5" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1122.5" y="1059.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1122.5" y="1043.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1122.5" y="1027.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1122.5" y="1011.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1122.5" y="995.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.5" y="1006.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1122.5" y="979.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.5" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1122.5" y="963.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.5" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1122.5" y="947.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1122.5" y="931.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1122.5" y="915.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1122.5" y="899.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1122.5" y="883.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.5" y="894.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1122.5" y="867.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.5" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1122.5" y="851.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.5" y="862.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1122.5" y="835.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.5" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1122.5" y="819.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.5" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1122.5" y="803.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.5" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1122.5" y="787.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.5" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1122.5" y="771.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.5" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1122.5" y="755.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.04%)</title><rect x="1122.7" y="1107.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.04%)</title><rect x="1122.7" y="1091.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.7" y="1102.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (2 samples, 0.04%)</title><rect x="1122.7" y="1075.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.7" y="1086.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.04%)</title><rect x="1122.7" y="1059.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.7" y="1070.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.04%)</title><rect x="1122.7" y="1043.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.7" y="1054.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.02%)</title><rect x="1122.7" y="1027.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.7" y="1038.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.02%)</title><rect x="1122.7" y="1011.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.7" y="1022.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.02%)</title><rect x="1122.7" y="995.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.7" y="1006.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1122.7" y="979.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.7" y="990.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.02%)</title><rect x="1123.0" y="1027.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.0" y="1038.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.02%)</title><rect x="1123.0" y="1011.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.0" y="1022.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.02%)</title><rect x="1123.0" y="995.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.0" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1123.0" y="979.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.0" y="990.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1123.0" y="963.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.0" y="974.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1123.0" y="947.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.0" y="958.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.02%)</title><rect x="1123.0" y="931.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.0" y="942.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.02%)</title><rect x="1123.0" y="915.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.0" y="926.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1123.0" y="899.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.0" y="910.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1123.0" y="883.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.0" y="894.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.02%)</title><rect x="1123.0" y="867.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.0" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.02%)</title><rect x="1123.0" y="851.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.0" y="862.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.02%)</title><rect x="1123.2" y="1139.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.2" y="1150.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.164] (2 samples, 0.04%)</title><rect x="1123.5" y="1155.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.5" y="1166.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.02%)</title><rect x="1123.5" y="1139.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.5" y="1150.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::is_mature(Method*) (1 samples, 0.02%)</title><rect x="1123.5" y="1123.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.5" y="1134.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1123.7" y="1139.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.7" y="1150.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1123.7" y="1123.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.7" y="1134.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 0.02%)</title><rect x="1123.7" y="1107.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.7" y="1118.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (20 samples, 0.43%)</title><rect x="1124.0" y="1187.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.0" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 0.32%)</title><rect x="1124.0" y="1171.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.0" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 0.32%)</title><rect x="1124.0" y="1155.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.0" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.30%)</title><rect x="1124.0" y="1139.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.30%)</title><rect x="1124.0" y="1123.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 0.30%)</title><rect x="1124.0" y="1107.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.28%)</title><rect x="1124.0" y="1091.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.0" y="1102.0"></text>
</g>
<g>
<title>GraphKit::add_exception_states_from(JVMState*) (1 samples, 0.02%)</title><rect x="1124.0" y="1075.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.0" y="1086.0"></text>
</g>
<g>
<title>GraphKit::add_exception_state(SafePointNode*) (1 samples, 0.02%)</title><rect x="1124.0" y="1059.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.0" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.21%)</title><rect x="1124.2" y="1075.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.2" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.21%)</title><rect x="1124.2" y="1059.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.21%)</title><rect x="1124.2" y="1043.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.21%)</title><rect x="1124.2" y="1027.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.21%)</title><rect x="1124.2" y="1011.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.21%)</title><rect x="1124.2" y="995.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.2" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.19%)</title><rect x="1124.2" y="979.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.2" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.19%)</title><rect x="1124.2" y="963.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.19%)</title><rect x="1124.2" y="947.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.19%)</title><rect x="1124.2" y="931.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.19%)</title><rect x="1124.2" y="915.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.15%)</title><rect x="1124.2" y="899.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.2" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.09%)</title><rect x="1124.2" y="883.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.2" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.09%)</title><rect x="1124.2" y="867.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.09%)</title><rect x="1124.2" y="851.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.09%)</title><rect x="1124.2" y="835.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.09%)</title><rect x="1124.2" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1124.2" y="803.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.2" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1124.2" y="787.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.2" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1124.2" y="771.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1124.2" y="755.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1127.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1124.2" y="739.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.06%)</title><rect x="1124.2" y="723.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1124.2" y="707.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1124.2" y="691.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1124.2" y="675.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1124.2" y="659.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1124.2" y="643.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.06%)</title><rect x="1124.2" y="627.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1124.2" y="611.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.2" y="622.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.02%)</title><rect x="1124.2" y="595.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.2" y="606.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.02%)</title><rect x="1124.2" y="579.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.2" y="590.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.02%)</title><rect x="1124.2" y="563.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.2" y="574.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1124.2" y="547.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.2" y="558.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1124.2" y="531.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.2" y="542.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1124.2" y="515.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.2" y="526.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.02%)</title><rect x="1124.2" y="499.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.2" y="510.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const [clone .part.150] (1 samples, 0.02%)</title><rect x="1124.2" y="483.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1124.5" y="595.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.5" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1124.5" y="579.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1124.5" y="563.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1124.5" y="547.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1124.5" y="531.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1124.5" y="515.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1124.5" y="499.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1124.5" y="483.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1124.5" y="467.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1124.5" y="451.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1124.5" y="435.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1124.5" y="419.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.5" y="430.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1124.5" y="403.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.5" y="414.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1124.5" y="387.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.5" y="398.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1124.5" y="371.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.5" y="382.0"></text>
</g>
<g>
<title>ciMethod::is_accessor() const (1 samples, 0.02%)</title><rect x="1124.5" y="355.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.5" y="366.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.02%)</title><rect x="1124.7" y="515.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1127.7" y="526.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.02%)</title><rect x="1124.7" y="499.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.7" y="510.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.02%)</title><rect x="1124.7" y="483.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.7" y="494.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1124.7" y="467.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.7" y="478.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1124.7" y="451.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.7" y="462.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.02%)</title><rect x="1124.7" y="435.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.7" y="446.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1124.7" y="419.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.7" y="430.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1124.7" y="403.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.7" y="414.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1124.7" y="387.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.02%)</title><rect x="1125.0" y="803.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.0" y="814.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.02%)</title><rect x="1125.0" y="787.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.0" y="798.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.02%)</title><rect x="1125.0" y="771.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.0" y="782.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.02%)</title><rect x="1125.0" y="755.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.0" y="766.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1125.0" y="739.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.0" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1125.2" y="883.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.2" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1125.2" y="867.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.2" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1125.2" y="851.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1125.2" y="835.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1125.2" y="819.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.06%)</title><rect x="1125.2" y="803.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1125.2" y="787.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1125.2" y="771.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.2" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1125.2" y="755.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1125.2" y="739.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1125.2" y="723.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1125.2" y="707.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1125.2" y="691.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1125.2" y="675.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1125.2" y="659.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1125.2" y="643.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1125.2" y="627.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1128.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1125.2" y="611.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1125.2" y="595.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.2" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1125.2" y="579.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.2" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1125.2" y="563.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.02%)</title><rect x="1125.2" y="547.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.2" y="558.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1125.2" y="531.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.2" y="542.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1125.2" y="515.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.2" y="526.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.02%)</title><rect x="1125.2" y="499.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1125.5" y="595.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1125.5" y="579.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.5" y="590.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.02%)</title><rect x="1125.5" y="563.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.5" y="574.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1125.5" y="547.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.5" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1125.5" y="531.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.5" y="542.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1125.5" y="515.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.5" y="526.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.02%)</title><rect x="1125.5" y="499.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.5" y="510.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.02%)</title><rect x="1125.5" y="483.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.5" y="494.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.02%)</title><rect x="1125.5" y="467.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.5" y="478.0"></text>
</g>
<g>
<title>ciField::ciField(fieldDescriptor*) (1 samples, 0.02%)</title><rect x="1125.5" y="451.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.5" y="462.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.02%)</title><rect x="1125.5" y="435.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.5" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1125.5" y="419.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.5" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1125.7" y="771.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.7" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1125.7" y="755.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1125.7" y="739.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1125.7" y="723.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1125.7" y="707.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1125.7" y="691.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1125.7" y="675.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1125.7" y="659.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1125.7" y="643.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1128.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1125.7" y="627.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1125.7" y="611.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1125.7" y="595.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1125.7" y="579.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1125.7" y="563.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1125.7" y="547.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1125.7" y="531.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1125.7" y="515.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1125.7" y="499.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1125.7" y="483.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1125.7" y="467.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.7" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1125.7" y="451.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1125.7" y="435.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1125.7" y="419.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1125.7" y="403.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1125.7" y="387.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.7" y="398.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.02%)</title><rect x="1125.7" y="371.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.7" y="382.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1125.7" y="355.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.7" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::uncommon_trap_Type() (1 samples, 0.02%)</title><rect x="1125.7" y="339.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.7" y="350.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1125.7" y="323.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.04%)</title><rect x="1126.0" y="899.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (2 samples, 0.04%)</title><rect x="1126.0" y="883.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.0" y="894.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.02%)</title><rect x="1126.0" y="867.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.0" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1126.0" y="851.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.0" y="862.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1126.0" y="835.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.0" y="846.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1126.0" y="819.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.0" y="830.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.02%)</title><rect x="1126.0" y="803.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.0" y="814.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1126.2" y="867.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.2" y="878.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1126.2" y="851.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.2" y="862.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1126.2" y="835.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.2" y="846.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.02%)</title><rect x="1126.2" y="819.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.2" y="830.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1126.5" y="979.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.5" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1126.5" y="963.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.5" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1126.5" y="947.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1126.5" y="931.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1126.5" y="915.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1126.5" y="899.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1126.5" y="883.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.5" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1126.5" y="867.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.5" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1126.5" y="851.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1126.5" y="835.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1126.5" y="819.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1126.5" y="803.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1126.5" y="787.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.5" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1126.5" y="771.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.5" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1126.5" y="755.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1126.5" y="739.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1126.5" y="723.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1126.5" y="707.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1126.5" y="691.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.5" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1126.5" y="675.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.5" y="686.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.02%)</title><rect x="1126.5" y="659.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.5" y="670.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.02%)</title><rect x="1126.5" y="643.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.5" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1126.7" y="1075.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.7" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1126.7" y="1059.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.7" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1126.7" y="1043.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1126.7" y="1027.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1126.7" y="1011.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1126.7" y="995.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1126.7" y="979.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.7" y="990.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1126.7" y="963.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.7" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1126.7" y="947.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.7" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1126.7" y="931.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1126.7" y="915.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1126.7" y="899.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1126.7" y="883.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1126.7" y="867.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.7" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1126.7" y="851.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.7" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1126.7" y="835.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1126.7" y="819.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1126.7" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1126.7" y="787.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1126.7" y="771.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.7" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1126.7" y="755.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1126.7" y="739.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1126.7" y="723.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1126.7" y="707.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1126.7" y="691.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1126.7" y="675.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1126.7" y="659.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1126.7" y="643.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1126.7" y="627.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1126.7" y="611.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1126.7" y="595.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1126.7" y="579.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1126.7" y="563.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1126.7" y="547.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1126.7" y="531.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1126.7" y="515.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1126.7" y="499.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1126.7" y="483.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1126.7" y="467.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.7" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1126.7" y="451.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1126.7" y="435.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1126.7" y="419.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1126.7" y="403.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1126.7" y="387.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1126.7" y="371.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.7" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1126.7" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1126.7" y="339.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1126.7" y="323.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1126.7" y="307.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.7" y="318.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.02%)</title><rect x="1126.7" y="291.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.7" y="302.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.02%)</title><rect x="1126.7" y="275.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.7" y="286.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1127.0" y="563.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1127.0" y="547.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1127.0" y="531.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1127.0" y="515.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1127.0" y="499.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1127.0" y="483.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1127.0" y="467.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1127.0" y="451.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1127.0" y="435.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1127.0" y="419.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1127.0" y="403.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1127.0" y="387.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1127.0" y="371.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1127.0" y="355.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.0" y="366.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1127.0" y="339.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.0" y="350.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1127.0" y="323.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.0" y="334.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1127.0" y="307.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.0" y="318.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1127.0" y="291.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.0" y="302.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1127.0" y="275.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.0" y="286.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1127.0" y="259.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.0" y="270.0"></text>
</g>
<g>
<title>LoadUBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1127.0" y="243.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.0" y="254.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.02%)</title><rect x="1127.0" y="227.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.0" y="238.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.02%)</title><rect x="1127.0" y="211.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.0" y="222.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.02%)</title><rect x="1127.0" y="195.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.0" y="206.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1127.0" y="179.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.0" y="190.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1127.0" y="163.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.0" y="174.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.02%)</title><rect x="1127.0" y="147.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.0" y="158.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.02%)</title><rect x="1127.2" y="1091.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.2" y="1102.0"></text>
</g>
<g>
<title>ReplacedNodes::transfer_from(ReplacedNodes const&amp;, unsigned int) (1 samples, 0.02%)</title><rect x="1127.2" y="1075.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.2" y="1086.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.164] (1 samples, 0.02%)</title><rect x="1127.5" y="1139.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.5" y="1150.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1127.5" y="1123.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.5" y="1134.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.09%)</title><rect x="1127.7" y="1171.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.7" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.09%)</title><rect x="1127.7" y="1155.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.7" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.09%)</title><rect x="1127.7" y="1139.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.09%)</title><rect x="1127.7" y="1123.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.7" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.09%)</title><rect x="1127.7" y="1107.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.09%)</title><rect x="1127.7" y="1091.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.09%)</title><rect x="1127.7" y="1075.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.7" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1127.7" y="1059.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.7" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1127.7" y="1043.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1127.7" y="1027.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1127.7" y="1011.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.06%)</title><rect x="1127.7" y="995.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1127.7" y="979.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.7" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1127.7" y="963.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.7" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1127.7" y="947.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1127.7" y="931.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1127.7" y="915.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1127.7" y="899.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1127.7" y="883.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.7" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1127.7" y="867.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.7" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1127.7" y="851.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1127.7" y="835.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1127.7" y="819.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1127.7" y="803.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1127.7" y="787.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.7" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1127.7" y="771.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.7" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1127.7" y="755.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1127.7" y="739.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1127.7" y="723.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1127.7" y="707.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1127.7" y="691.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1127.7" y="675.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1127.7" y="659.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1127.7" y="643.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1127.7" y="627.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1127.7" y="611.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1127.7" y="595.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1127.7" y="579.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1127.7" y="563.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1127.7" y="547.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1127.7" y="531.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1127.7" y="515.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1127.7" y="499.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.7" y="510.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1127.7" y="483.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.7" y="494.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.02%)</title><rect x="1127.7" y="467.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.7" y="478.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind, LibraryCallKit::AccessKind) (1 samples, 0.02%)</title><rect x="1127.7" y="451.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.7" y="462.0"></text>
</g>
<g>
<title>GraphKit::access_atomic_cmpxchg_bool_at(Node*, Node*, Node*, TypePtr const*, int, Node*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1127.7" y="435.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.7" y="446.0"></text>
</g>
<g>
<title>BarrierSetC2::atomic_cmpxchg_bool_at(C2AtomicAccess&amp;, Node*, Node*, Type const*) const (1 samples, 0.02%)</title><rect x="1127.7" y="419.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.7" y="430.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::atomic_cmpxchg_bool_at_resolved(C2AtomicAccess&amp;, Node*, Node*, Type const*) const (1 samples, 0.02%)</title><rect x="1127.7" y="403.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.7" y="414.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.02%)</title><rect x="1127.7" y="387.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.7" y="398.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.02%)</title><rect x="1127.7" y="371.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.7" y="382.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1128.0" y="483.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.0" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1128.0" y="467.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.0" y="478.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.02%)</title><rect x="1128.0" y="451.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.0" y="462.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.02%)</title><rect x="1128.0" y="435.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.0" y="446.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.02%)</title><rect x="1128.0" y="419.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.0" y="430.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="1128.0" y="403.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.0" y="414.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.02%)</title><rect x="1128.0" y="387.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.0" y="398.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.02%)</title><rect x="1128.0" y="371.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.0" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.02%)</title><rect x="1128.0" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.0" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.02%)</title><rect x="1128.0" y="339.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.0" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1128.3" y="963.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.3" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1128.3" y="947.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.3" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1128.3" y="931.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1128.3" y="915.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1128.3" y="899.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1128.3" y="883.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1128.3" y="867.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1128.3" y="851.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.3" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1128.3" y="835.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1128.3" y="819.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1128.3" y="803.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1128.3" y="787.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1128.3" y="771.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.3" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1128.3" y="755.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1128.3" y="739.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1128.3" y="723.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1128.3" y="707.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1128.3" y="691.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1128.3" y="675.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1128.3" y="659.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1128.3" y="643.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1128.3" y="627.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1128.3" y="611.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1128.3" y="595.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1128.3" y="579.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1128.3" y="563.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1128.3" y="547.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1128.3" y="531.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1128.3" y="515.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1128.3" y="499.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1128.3" y="483.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.02%)</title><rect x="1128.3" y="467.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.3" y="478.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.02%)</title><rect x="1128.3" y="451.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.3" y="462.0"></text>
</g>
<g>
<title>ReplacedNodes::merge_with(ReplacedNodes const&amp;) (1 samples, 0.02%)</title><rect x="1128.3" y="435.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.3" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1128.5" y="1059.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.5" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1128.5" y="1043.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.5" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1128.5" y="1027.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1128.5" y="1011.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1128.5" y="995.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1128.5" y="979.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1128.5" y="963.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.5" y="974.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1128.5" y="947.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.5" y="958.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1128.5" y="931.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.5" y="942.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1128.5" y="915.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.5" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1128.5" y="899.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.5" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1128.5" y="883.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.5" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1128.5" y="867.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.5" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1128.5" y="851.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.5" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_successors(GrowableArray&lt;ciTypeFlow::Block*&gt;*, ciTypeFlow::StateVector*) (1 samples, 0.02%)</title><rect x="1128.5" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.5" y="846.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1128.8" y="1171.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.8" y="1182.0"></text>
</g>
<g>
<title>JVMState::JVMState(ciMethod*, JVMState*) (1 samples, 0.02%)</title><rect x="1128.8" y="1155.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.04%)</title><rect x="1129.0" y="1203.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.0" y="1214.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.04%)</title><rect x="1129.0" y="1187.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.0" y="1198.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (2 samples, 0.04%)</title><rect x="1129.0" y="1171.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.0" y="1182.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.04%)</title><rect x="1129.0" y="1155.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.0" y="1166.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.04%)</title><rect x="1129.0" y="1139.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.0" y="1150.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1129.0" y="1123.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.0" y="1134.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1129.0" y="1107.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.0" y="1118.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.02%)</title><rect x="1129.0" y="1091.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.0" y="1102.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.02%)</title><rect x="1129.3" y="1123.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.3" y="1134.0"></text>
</g>
<g>
<title>CardTableBarrierSetC2::byte_map_base_node(GraphKit*) const (1 samples, 0.02%)</title><rect x="1129.3" y="1107.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.3" y="1118.0"></text>
</g>
<g>
<title>TypeRawPtr::make(unsigned char*) (1 samples, 0.02%)</title><rect x="1129.3" y="1091.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.02%)</title><rect x="1129.5" y="1203.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.5" y="1214.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.02%)</title><rect x="1129.5" y="1187.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.5" y="1198.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.02%)</title><rect x="1129.5" y="1171.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.5" y="1182.0"></text>
</g>
<g>
<title>Node::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1129.5" y="1155.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.5" y="1166.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (2 samples, 0.04%)</title><rect x="1129.8" y="1235.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.8" y="1246.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.02%)</title><rect x="1129.8" y="1219.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.8" y="1230.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1129.8" y="1203.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1132.8" y="1214.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.02%)</title><rect x="1130.0" y="1219.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.0" y="1230.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.02%)</title><rect x="1130.0" y="1203.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.0" y="1214.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.164] (1 samples, 0.02%)</title><rect x="1130.3" y="1251.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.3" y="1262.0"></text>
</g>
<g>
<title>MethodData::next_data(ProfileData*) const (1 samples, 0.02%)</title><rect x="1130.3" y="1235.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.3" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (14 samples, 0.30%)</title><rect x="1130.5" y="1283.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.5" y="1294.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.02%)</title><rect x="1130.5" y="1267.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.5" y="1278.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1130.5" y="1251.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1133.5" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.21%)</title><rect x="1130.8" y="1267.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.8" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.21%)</title><rect x="1130.8" y="1251.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.21%)</title><rect x="1130.8" y="1235.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.8" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.21%)</title><rect x="1130.8" y="1219.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.21%)</title><rect x="1130.8" y="1203.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.21%)</title><rect x="1130.8" y="1187.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.8" y="1198.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1130.8" y="1171.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.8" y="1182.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1130.8" y="1155.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.8" y="1166.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1130.8" y="1139.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.8" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1130.8" y="1123.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.8" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1130.8" y="1107.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.8" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1130.8" y="1091.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.8" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1130.8" y="1075.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.8" y="1086.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_dest() const (1 samples, 0.02%)</title><rect x="1130.8" y="1059.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.8" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.17%)</title><rect x="1131.0" y="1171.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.0" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.17%)</title><rect x="1131.0" y="1155.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.0" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.17%)</title><rect x="1131.0" y="1139.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1134.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.17%)</title><rect x="1131.0" y="1123.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.17%)</title><rect x="1131.0" y="1107.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.13%)</title><rect x="1131.0" y="1091.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.0" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.11%)</title><rect x="1131.0" y="1075.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.0" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.11%)</title><rect x="1131.0" y="1059.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.0" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.11%)</title><rect x="1131.0" y="1043.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.11%)</title><rect x="1131.0" y="1027.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.11%)</title><rect x="1131.0" y="1011.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.11%)</title><rect x="1131.0" y="995.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.0" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.11%)</title><rect x="1131.0" y="979.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.0" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.11%)</title><rect x="1131.0" y="963.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.11%)</title><rect x="1131.0" y="947.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.11%)</title><rect x="1131.0" y="931.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.11%)</title><rect x="1131.0" y="915.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.11%)</title><rect x="1131.0" y="899.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.0" y="910.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.02%)</title><rect x="1131.0" y="883.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.0" y="894.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.02%)</title><rect x="1131.0" y="867.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.0" y="878.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.02%)</title><rect x="1131.0" y="851.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.0" y="862.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.02%)</title><rect x="1131.0" y="835.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1134.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1131.3" y="883.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1131.3" y="867.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1131.3" y="851.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1131.3" y="835.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1131.3" y="819.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1131.3" y="803.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1131.3" y="787.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1131.3" y="771.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1131.3" y="755.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1131.3" y="739.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1131.3" y="723.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1131.3" y="707.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1131.3" y="691.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.3" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1131.3" y="675.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1131.3" y="659.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1131.3" y="643.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1131.3" y="627.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1131.3" y="611.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1131.3" y="595.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1131.3" y="579.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1131.3" y="563.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1131.3" y="547.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1131.3" y="531.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1131.3" y="515.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.3" y="526.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.02%)</title><rect x="1131.3" y="499.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.3" y="510.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.02%)</title><rect x="1131.3" y="483.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.3" y="494.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.02%)</title><rect x="1131.3" y="467.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.3" y="478.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1131.3" y="451.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_newarray(BasicType) (1 samples, 0.02%)</title><rect x="1131.5" y="515.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.5" y="526.0"></text>
</g>
<g>
<title>GraphKit::new_array(Node*, Node*, int, Node**, bool) (1 samples, 0.02%)</title><rect x="1131.5" y="499.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.5" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1131.5" y="483.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.5" y="494.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1131.5" y="467.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.5" y="478.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.02%)</title><rect x="1131.5" y="451.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.5" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1131.8" y="883.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.8" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1131.8" y="867.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.8" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1131.8" y="851.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1131.8" y="835.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1131.8" y="819.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1131.8" y="803.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1131.8" y="787.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.8" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1131.8" y="771.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1131.8" y="755.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.8" y="766.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.164] (1 samples, 0.02%)</title><rect x="1131.8" y="739.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.8" y="750.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.02%)</title><rect x="1131.8" y="723.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.8" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1132.0" y="883.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.0" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1132.0" y="867.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.0" y="878.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.02%)</title><rect x="1132.0" y="851.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.0" y="862.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.02%)</title><rect x="1132.0" y="835.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.0" y="846.0"></text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (1 samples, 0.02%)</title><rect x="1132.0" y="819.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.0" y="830.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1132.3" y="1075.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.3" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1132.3" y="1059.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.3" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1132.3" y="1043.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1132.3" y="1027.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1132.3" y="1011.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1132.3" y="995.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1132.3" y="979.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.3" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1132.3" y="963.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.3" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1132.3" y="947.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1132.3" y="931.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1132.3" y="915.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1132.3" y="899.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1132.3" y="883.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.3" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1132.3" y="867.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1132.3" y="851.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.3" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1132.3" y="835.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1132.3" y="819.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1132.3" y="803.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1132.3" y="787.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1132.3" y="771.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.3" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1132.3" y="755.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1132.3" y="739.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1132.3" y="723.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1132.3" y="707.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1132.3" y="691.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1132.3" y="675.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1132.3" y="659.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1132.3" y="643.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1132.3" y="627.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1132.3" y="611.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1132.3" y="595.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1132.3" y="579.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1132.3" y="563.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1132.3" y="547.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1132.3" y="531.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1132.3" y="515.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1132.3" y="499.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1132.3" y="483.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1132.3" y="467.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1132.3" y="451.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.3" y="462.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1132.3" y="435.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.3" y="446.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1132.3" y="419.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.3" y="430.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.02%)</title><rect x="1132.3" y="403.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1132.5" y="1091.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1132.5" y="1075.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.5" y="1086.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.02%)</title><rect x="1132.5" y="1059.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.5" y="1070.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.02%)</title><rect x="1132.5" y="1043.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.02%)</title><rect x="1132.8" y="1091.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.8" y="1102.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1132.8" y="1075.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.8" y="1086.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.0" y="1171.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.0" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.0" y="1155.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.0" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1133.0" y="1139.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1133.0" y="1123.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1133.0" y="1107.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1133.0" y="1091.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1133.0" y="1075.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.0" y="1086.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.0" y="1059.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.0" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.0" y="1043.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.0" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1133.0" y="1027.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1133.0" y="1011.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1133.0" y="995.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1133.0" y="979.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1133.0" y="963.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.0" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.0" y="947.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.0" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1133.0" y="931.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1133.0" y="915.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1133.0" y="899.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1133.0" y="883.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1133.0" y="867.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.0" y="851.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.0" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1133.0" y="835.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1133.0" y="819.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1133.0" y="803.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1133.0" y="787.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1133.0" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.0" y="755.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1133.0" y="739.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1133.0" y="723.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1133.0" y="707.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1133.0" y="691.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1133.0" y="675.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.0" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1133.0" y="659.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.0" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1133.0" y="643.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.0" y="654.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.02%)</title><rect x="1133.0" y="627.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.0" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1133.3" y="1267.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.3" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1133.3" y="1251.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.3" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1133.3" y="1235.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.3" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1133.3" y="1219.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1133.3" y="1203.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.06%)</title><rect x="1133.3" y="1187.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1133.3" y="1171.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.3" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1133.3" y="1155.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.3" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1133.3" y="1139.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.3" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1133.3" y="1123.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1133.3" y="1107.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.06%)</title><rect x="1133.3" y="1091.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1133.3" y="1075.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.3" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1133.3" y="1059.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.3" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1133.3" y="1043.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1133.3" y="1027.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1133.3" y="1011.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1133.3" y="995.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1133.3" y="979.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.3" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1133.3" y="963.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.3" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1133.3" y="947.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1133.3" y="931.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1133.3" y="915.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1133.3" y="899.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1133.3" y="883.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.3" y="894.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1133.3" y="867.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.3" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1133.3" y="851.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.3" y="862.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1133.3" y="835.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.3" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1133.3" y="819.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.3" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1133.3" y="803.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.3" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1133.3" y="787.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.3" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1133.3" y="771.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.3" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1133.3" y="755.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.3" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_new(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1133.3" y="739.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.3" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.02%)</title><rect x="1133.3" y="723.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.3" y="734.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1133.3" y="707.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.3" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1133.3" y="691.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.3" y="702.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(Klass*) (1 samples, 0.02%)</title><rect x="1133.3" y="675.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.3" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.5" y="867.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.5" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1133.5" y="851.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1133.5" y="835.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1133.5" y="819.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1133.5" y="803.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1133.5" y="787.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.5" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.5" y="771.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.5" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1133.5" y="755.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1133.5" y="739.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1133.5" y="723.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1133.5" y="707.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1133.5" y="691.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.5" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1133.5" y="675.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.5" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1133.5" y="659.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.5" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1133.5" y="643.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.5" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1133.5" y="627.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.5" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1133.5" y="611.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.5" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1133.5" y="595.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.5" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1133.5" y="579.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.5" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1133.5" y="563.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.5" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.02%)</title><rect x="1133.5" y="547.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.5" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1133.5" y="531.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.5" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1133.5" y="515.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.5" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1133.5" y="499.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.5" y="510.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1133.5" y="483.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.5" y="494.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1133.5" y="467.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.5" y="478.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.02%)</title><rect x="1133.5" y="451.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.5" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.02%)</title><rect x="1133.5" y="435.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.5" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool) (1 samples, 0.02%)</title><rect x="1133.5" y="419.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.5" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.8" y="1059.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.8" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.8" y="1043.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.8" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1133.8" y="1027.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1133.8" y="1011.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1133.8" y="995.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1133.8" y="979.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1133.8" y="963.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.8" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.8" y="947.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.8" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1133.8" y="931.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1133.8" y="915.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1133.8" y="899.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1133.8" y="883.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1133.8" y="867.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.8" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.8" y="851.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1133.8" y="835.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1133.8" y="819.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1133.8" y="803.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1133.8" y="787.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1133.8" y="771.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.8" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.8" y="755.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1133.8" y="739.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1133.8" y="723.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1133.8" y="707.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1133.8" y="691.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1133.8" y="675.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.8" y="659.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1133.8" y="643.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1133.8" y="627.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1133.8" y="611.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1133.8" y="595.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1133.8" y="579.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.8" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1133.8" y="563.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.8" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1133.8" y="547.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1133.8" y="531.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1133.8" y="515.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1133.8" y="499.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1133.8" y="483.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1133.8" y="467.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.8" y="478.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1133.8" y="451.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.8" y="462.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1133.8" y="435.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.8" y="446.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1133.8" y="419.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.8" y="430.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1133.8" y="403.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.8" y="414.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1133.8" y="387.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.8" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1133.8" y="371.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.8" y="382.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1133.8" y="355.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.8" y="366.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.02%)</title><rect x="1133.8" y="339.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.8" y="350.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="323.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.8" y="334.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="307.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.8" y="318.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="291.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.8" y="302.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="275.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.8" y="286.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="259.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.8" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="243.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.8" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="227.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.8" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="211.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.8" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="195.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.8" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="179.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.8" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="163.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.8" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="147.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.8" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="131.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.8" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="115.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.8" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="99.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.8" y="110.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="83.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.8" y="94.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="67.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.8" y="78.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1133.8" y="51.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.8" y="62.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1133.8" y="35.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.04%)</title><rect x="1134.0" y="1299.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.0" y="1310.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1134.0" y="1283.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.0" y="1294.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1134.0" y="1267.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.0" y="1278.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1134.0" y="1251.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.0" y="1262.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1134.0" y="1235.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.0" y="1246.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1134.0" y="1219.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.0" y="1230.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1134.0" y="1203.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.0" y="1214.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.02%)</title><rect x="1134.0" y="1187.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.0" y="1198.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1134.0" y="1171.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.0" y="1182.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1134.0" y="1155.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.0" y="1166.0"></text>
</g>
<g>
<title>TypeNarrowPtr::hash() const (1 samples, 0.02%)</title><rect x="1134.0" y="1139.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.0" y="1150.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.02%)</title><rect x="1134.0" y="1123.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1134.3" y="1283.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.3" y="1294.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1134.3" y="1267.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.3" y="1278.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1134.3" y="1251.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.3" y="1262.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1134.3" y="1235.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.3" y="1246.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.02%)</title><rect x="1134.3" y="1219.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.3" y="1230.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.02%)</title><rect x="1134.3" y="1203.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.3" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.02%)</title><rect x="1134.6" y="1379.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.6" y="1390.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (5 samples, 0.11%)</title><rect x="1134.8" y="1379.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.8" y="1390.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.02%)</title><rect x="1134.8" y="1363.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.8" y="1374.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (4 samples, 0.09%)</title><rect x="1135.1" y="1363.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.1" y="1374.0"></text>
</g>
<g>
<title>LoadRangeNode::Opcode() const (1 samples, 0.02%)</title><rect x="1135.8" y="1347.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.8" y="1358.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.02%)</title><rect x="1136.1" y="1379.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.1" y="1390.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.02%)</title><rect x="1136.3" y="1379.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.3" y="1390.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.02%)</title><rect x="1136.3" y="1363.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.3" y="1374.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.02%)</title><rect x="1136.3" y="1347.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.3" y="1358.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.02%)</title><rect x="1136.3" y="1331.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.3" y="1342.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (3 samples, 0.06%)</title><rect x="1136.6" y="1379.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.6" y="1390.0"></text>
</g>
<g>
<title>Dependencies::DepStream::context_type() (1 samples, 0.02%)</title><rect x="1136.6" y="1363.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.6" y="1374.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (2 samples, 0.04%)</title><rect x="1136.8" y="1363.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.8" y="1374.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (2 samples, 0.04%)</title><rect x="1136.8" y="1347.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.8" y="1358.0"></text>
</g>
<g>
<title>CompiledMethod::CompiledMethod(Method*, char const*, CompilerType, int, int, CodeBuffer*, int, int, OopMapSet*, bool) (1 samples, 0.02%)</title><rect x="1136.8" y="1331.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.8" y="1342.0"></text>
</g>
<g>
<title>nmethod::copy_scopes_data(unsigned char*, int) (1 samples, 0.02%)</title><rect x="1137.1" y="1331.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.1" y="1342.0"></text>
</g>
<g>
<title>CompileBroker::collect_statistics(CompilerThread*, elapsedTimer, CompileTask*) (1 samples, 0.02%)</title><rect x="1137.3" y="1411.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.3" y="1422.0"></text>
</g>
<g>
<title>CompileTask::print(outputStream*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1137.6" y="1411.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.6" y="1422.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (1 samples, 0.02%)</title><rect x="1137.6" y="1395.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.6" y="1406.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (157 samples, 3.35%)</title><rect x="1137.8" y="1411.0" width="39.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.8" y="1422.0">Com..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (157 samples, 3.35%)</title><rect x="1137.8" y="1395.0" width="39.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.8" y="1406.0">Com..</text>
</g>
<g>
<title>Compilation::compile_method() (157 samples, 3.35%)</title><rect x="1137.8" y="1379.0" width="39.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.8" y="1390.0">Com..</text>
</g>
<g>
<title>Compilation::compile_java_method() (148 samples, 3.16%)</title><rect x="1138.1" y="1363.0" width="37.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.1" y="1374.0">Com..</text>
</g>
<g>
<title>Compilation::build_hir() (58 samples, 1.24%)</title><rect x="1138.1" y="1347.0" width="14.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.1" y="1358.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (4 samples, 0.09%)</title><rect x="1138.1" y="1331.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.1" y="1342.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (2 samples, 0.04%)</title><rect x="1138.1" y="1315.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.1" y="1326.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.04%)</title><rect x="1138.1" y="1299.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.1" y="1310.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.04%)</title><rect x="1138.1" y="1283.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.1" y="1294.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.02%)</title><rect x="1138.3" y="1267.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.3" y="1278.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.02%)</title><rect x="1138.3" y="1251.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.3" y="1262.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.02%)</title><rect x="1138.3" y="1235.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.3" y="1246.0"></text>
</g>
<g>
<title>Instruction::hash() const (1 samples, 0.02%)</title><rect x="1138.6" y="1315.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.6" y="1326.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.02%)</title><rect x="1138.8" y="1315.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.8" y="1326.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (48 samples, 1.03%)</title><rect x="1139.1" y="1331.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.1" y="1342.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (48 samples, 1.03%)</title><rect x="1139.1" y="1315.0" width="12.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.1" y="1326.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (48 samples, 1.03%)</title><rect x="1139.1" y="1299.0" width="12.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.1" y="1310.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (4 samples, 0.09%)</title><rect x="1139.1" y="1283.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.1" y="1294.0"></text>
</g>
<g>
<title>BlockListBuilder::set_entries(int) (1 samples, 0.02%)</title><rect x="1139.1" y="1267.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1142.1" y="1278.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) [clone .constprop.440] (1 samples, 0.02%)</title><rect x="1139.1" y="1251.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.1" y="1262.0"></text>
</g>
<g>
<title>BlockBegin::BlockBegin(int) (1 samples, 0.02%)</title><rect x="1139.1" y="1235.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.1" y="1246.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.02%)</title><rect x="1139.1" y="1219.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.1" y="1230.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (3 samples, 0.06%)</title><rect x="1139.3" y="1267.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.3" y="1278.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (3 samples, 0.06%)</title><rect x="1139.3" y="1251.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.3" y="1262.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (2 samples, 0.04%)</title><rect x="1139.3" y="1235.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.3" y="1246.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1139.3" y="1219.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.3" y="1230.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.02%)</title><rect x="1139.6" y="1219.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.6" y="1230.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.02%)</title><rect x="1139.6" y="1203.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.6" y="1214.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.02%)</title><rect x="1139.6" y="1187.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.6" y="1198.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.02%)</title><rect x="1139.6" y="1171.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.6" y="1182.0"></text>
</g>
<g>
<title>TraceTime::~TraceTime() (1 samples, 0.02%)</title><rect x="1139.8" y="1235.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.8" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (41 samples, 0.88%)</title><rect x="1140.1" y="1283.0" width="10.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.1" y="1294.0"></text>
</g>
<g>
<title>BlockEnd::as_BlockEnd() (1 samples, 0.02%)</title><rect x="1140.1" y="1267.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.1" y="1278.0"></text>
</g>
<g>
<title>BlockEnd::set_begin(BlockBegin*) (1 samples, 0.02%)</title><rect x="1140.4" y="1267.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.4" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::ScopeData::add_to_work_list(BlockBegin*) (1 samples, 0.02%)</title><rect x="1140.6" y="1267.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.6" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (38 samples, 0.81%)</title><rect x="1140.9" y="1267.0" width="9.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.9" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (6 samples, 0.13%)</title><rect x="1141.1" y="1251.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.1" y="1262.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::raw_at_put_grow(int, Instruction* const&amp;, Instruction* const&amp;) (1 samples, 0.02%)</title><rect x="1141.1" y="1235.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.1" y="1246.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (5 samples, 0.11%)</title><rect x="1141.4" y="1235.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.4" y="1246.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (5 samples, 0.11%)</title><rect x="1141.4" y="1219.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.4" y="1230.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (5 samples, 0.11%)</title><rect x="1141.4" y="1203.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.4" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.02%)</title><rect x="1141.4" y="1187.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.4" y="1198.0"></text>
</g>
<g>
<title>ciConstantPoolCache::get(int) (1 samples, 0.02%)</title><rect x="1141.6" y="1187.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.6" y="1198.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (3 samples, 0.06%)</title><rect x="1141.9" y="1187.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.9" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.02%)</title><rect x="1141.9" y="1171.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.9" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.02%)</title><rect x="1141.9" y="1155.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.9" y="1166.0"></text>
</g>
<g>
<title>constantPoolHandle::operator=(constantPoolHandle const&amp;) (1 samples, 0.02%)</title><rect x="1141.9" y="1139.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.9" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1142.1" y="1171.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.1" y="1182.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.02%)</title><rect x="1142.1" y="1155.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.1" y="1166.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.02%)</title><rect x="1142.1" y="1139.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.1" y="1150.0"></text>
</g>
<g>
<title>ciObjectFactory::vm_symbol_at(int) (1 samples, 0.02%)</title><rect x="1142.4" y="1171.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.4" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::copy_state_for_exception() (1 samples, 0.02%)</title><rect x="1142.6" y="1251.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.6" y="1262.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.02%)</title><rect x="1142.6" y="1235.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.6" y="1246.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1142.6" y="1219.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.6" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::if_node(Instruction*, Instruction::Condition, Instruction*, ValueStack*) (1 samples, 0.02%)</title><rect x="1142.9" y="1251.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.9" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (28 samples, 0.60%)</title><rect x="1143.1" y="1251.0" width="7.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.1" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (22 samples, 0.47%)</title><rect x="1143.4" y="1235.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.4" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (22 samples, 0.47%)</title><rect x="1143.4" y="1219.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.4" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.02%)</title><rect x="1143.4" y="1203.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.4" y="1214.0"></text>
</g>
<g>
<title>NullCheck::hash() const (1 samples, 0.02%)</title><rect x="1143.4" y="1187.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.4" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (16 samples, 0.34%)</title><rect x="1143.6" y="1203.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.6" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (16 samples, 0.34%)</title><rect x="1143.6" y="1187.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.6" y="1198.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.02%)</title><rect x="1143.6" y="1171.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.6" y="1182.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.02%)</title><rect x="1143.6" y="1155.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.6" y="1166.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.02%)</title><rect x="1143.6" y="1139.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.6" y="1150.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1143.6" y="1123.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1146.6" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (2 samples, 0.04%)</title><rect x="1143.9" y="1171.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.9" y="1182.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (2 samples, 0.04%)</title><rect x="1143.9" y="1155.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.9" y="1166.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (2 samples, 0.04%)</title><rect x="1143.9" y="1139.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.9" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (2 samples, 0.04%)</title><rect x="1143.9" y="1123.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.9" y="1134.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (2 samples, 0.04%)</title><rect x="1143.9" y="1107.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.9" y="1118.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1143.9" y="1091.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.9" y="1102.0"></text>
</g>
<g>
<title>ciEnv::check_klass_accessibility(ciKlass*, Klass*) (1 samples, 0.02%)</title><rect x="1143.9" y="1075.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.9" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::is_same_class_package(Klass const*) const (1 samples, 0.02%)</title><rect x="1143.9" y="1059.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.9" y="1070.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.02%)</title><rect x="1144.1" y="1091.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.1" y="1102.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_in_package(char const*, int) (1 samples, 0.02%)</title><rect x="1144.1" y="1075.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.1" y="1086.0"></text>
</g>
<g>
<title>ciEnv::is_in_vm() (1 samples, 0.02%)</title><rect x="1144.1" y="1059.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.1" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (13 samples, 0.28%)</title><rect x="1144.4" y="1171.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.4" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::profile_call(ciMethod*, Instruction*, ciKlass*, GrowableArray&lt;Instruction*&gt;*, bool) (1 samples, 0.02%)</title><rect x="1144.4" y="1155.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.4" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (12 samples, 0.26%)</title><rect x="1144.6" y="1155.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.6" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (9 samples, 0.19%)</title><rect x="1144.6" y="1139.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.6" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (6 samples, 0.13%)</title><rect x="1144.6" y="1123.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.6" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (6 samples, 0.13%)</title><rect x="1144.6" y="1107.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.6" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (6 samples, 0.13%)</title><rect x="1144.6" y="1091.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.6" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.02%)</title><rect x="1144.6" y="1075.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.6" y="1086.0"></text>
</g>
<g>
<title>ValueMap::kill_memory() (1 samples, 0.02%)</title><rect x="1144.6" y="1059.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.6" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (5 samples, 0.11%)</title><rect x="1144.9" y="1075.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.9" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (5 samples, 0.11%)</title><rect x="1144.9" y="1059.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.9" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.09%)</title><rect x="1145.1" y="1043.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.1" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.09%)</title><rect x="1145.1" y="1027.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.1" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::if_node(Instruction*, Instruction::Condition, Instruction*, ValueStack*) (1 samples, 0.02%)</title><rect x="1145.1" y="1011.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.1" y="1022.0"></text>
</g>
<g>
<title>ValueNumberingVisitor::do_If(If*) (1 samples, 0.02%)</title><rect x="1145.1" y="995.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.1" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.02%)</title><rect x="1145.4" y="1011.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.4" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.02%)</title><rect x="1145.4" y="995.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.4" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.02%)</title><rect x="1145.4" y="979.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.4" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.02%)</title><rect x="1145.4" y="963.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.4" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.02%)</title><rect x="1145.4" y="947.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.4" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.02%)</title><rect x="1145.4" y="931.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.4" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.02%)</title><rect x="1145.4" y="915.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.4" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.02%)</title><rect x="1145.4" y="899.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.4" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.02%)</title><rect x="1145.4" y="883.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.4" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.02%)</title><rect x="1145.4" y="867.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.4" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.02%)</title><rect x="1145.4" y="851.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.4" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.02%)</title><rect x="1145.4" y="835.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.4" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.02%)</title><rect x="1145.4" y="819.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.4" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*, bool) (1 samples, 0.02%)</title><rect x="1145.6" y="1011.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.6" y="1022.0"></text>
</g>
<g>
<title>Canonicalizer::do_Goto(Goto*) (1 samples, 0.02%)</title><rect x="1145.6" y="995.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.6" y="1006.0"></text>
</g>
<g>
<title>MemoryBuffer::is_default_value(Instruction*) (1 samples, 0.02%)</title><rect x="1145.9" y="1011.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.9" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (2 samples, 0.04%)</title><rect x="1146.1" y="1123.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.1" y="1134.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.02%)</title><rect x="1146.1" y="1107.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.1" y="1118.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.02%)</title><rect x="1146.1" y="1091.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.1" y="1102.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.02%)</title><rect x="1146.1" y="1075.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.1" y="1086.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.02%)</title><rect x="1146.1" y="1059.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.1" y="1070.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.02%)</title><rect x="1146.1" y="1043.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.1" y="1054.0"></text>
</g>
<g>
<title>BlockListBuilder::mark_loops() (1 samples, 0.02%)</title><rect x="1146.4" y="1107.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.4" y="1118.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.02%)</title><rect x="1146.7" y="1123.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.7" y="1134.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.02%)</title><rect x="1146.7" y="1107.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.7" y="1118.0"></text>
</g>
<g>
<title>ProfileData::translate_from(ProfileData const*) (1 samples, 0.02%)</title><rect x="1146.7" y="1091.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.7" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (3 samples, 0.06%)</title><rect x="1146.9" y="1139.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.9" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.06%)</title><rect x="1146.9" y="1123.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.9" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.06%)</title><rect x="1146.9" y="1107.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.9" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.06%)</title><rect x="1146.9" y="1091.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.9" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.06%)</title><rect x="1146.9" y="1075.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.9" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.06%)</title><rect x="1146.9" y="1059.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.9" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.06%)</title><rect x="1146.9" y="1043.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.9" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.04%)</title><rect x="1146.9" y="1027.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.9" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.04%)</title><rect x="1146.9" y="1011.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.9" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.04%)</title><rect x="1146.9" y="995.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.9" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.02%)</title><rect x="1146.9" y="979.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.9" y="990.0"></text>
</g>
<g>
<title>Dependencies::assert_evol_method(ciMethod*) (1 samples, 0.02%)</title><rect x="1146.9" y="963.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.9" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::new_instance(int) (1 samples, 0.02%)</title><rect x="1147.2" y="979.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.2" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.02%)</title><rect x="1147.4" y="1027.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.4" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.02%)</title><rect x="1147.4" y="1011.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.4" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.02%)</title><rect x="1147.4" y="995.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.4" y="1006.0"></text>
</g>
<g>
<title>CompilerOracle::should_inline(methodHandle const&amp;) (1 samples, 0.02%)</title><rect x="1147.4" y="979.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.4" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (3 samples, 0.06%)</title><rect x="1147.7" y="1203.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.7" y="1214.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.02%)</title><rect x="1147.7" y="1187.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.7" y="1198.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.02%)</title><rect x="1147.7" y="1171.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.7" y="1182.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.02%)</title><rect x="1147.7" y="1155.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.7" y="1166.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.02%)</title><rect x="1147.7" y="1139.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.7" y="1150.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.02%)</title><rect x="1147.7" y="1123.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.7" y="1134.0"></text>
</g>
<g>
<title>ArenaBitMap::ArenaBitMap(Arena*, unsigned long) (1 samples, 0.02%)</title><rect x="1147.7" y="1107.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.7" y="1118.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.02%)</title><rect x="1147.9" y="1187.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.9" y="1198.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.02%)</title><rect x="1148.2" y="1187.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.2" y="1198.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1148.2" y="1171.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.2" y="1182.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.02%)</title><rect x="1148.4" y="1203.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.4" y="1214.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.02%)</title><rect x="1148.4" y="1187.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.4" y="1198.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="1148.4" y="1171.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.4" y="1182.0"></text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="1148.4" y="1155.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.4" y="1166.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.02%)</title><rect x="1148.4" y="1139.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.4" y="1150.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::allocate(unsigned long) (1 samples, 0.02%)</title><rect x="1148.4" y="1123.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.4" y="1134.0"></text>
</g>
<g>
<title>ciMethod::has_jsrs() const (1 samples, 0.02%)</title><rect x="1148.7" y="1203.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.7" y="1214.0"></text>
</g>
<g>
<title>Instruction::exact_type() const (1 samples, 0.02%)</title><rect x="1148.9" y="1235.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.9" y="1246.0"></text>
</g>
<g>
<title>Invoke::declared_type() const (1 samples, 0.02%)</title><rect x="1148.9" y="1219.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.9" y="1230.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1148.9" y="1203.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.9" y="1214.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1148.9" y="1187.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.9" y="1198.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1148.9" y="1171.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.9" y="1182.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (4 samples, 0.09%)</title><rect x="1149.2" y="1235.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.2" y="1246.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (4 samples, 0.09%)</title><rect x="1149.2" y="1219.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.2" y="1230.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.02%)</title><rect x="1149.2" y="1203.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.2" y="1214.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (2 samples, 0.04%)</title><rect x="1149.4" y="1203.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.4" y="1214.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.02%)</title><rect x="1149.4" y="1187.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.4" y="1198.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="1149.4" y="1171.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.4" y="1182.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.02%)</title><rect x="1149.4" y="1155.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.4" y="1166.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.02%)</title><rect x="1149.4" y="1139.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.4" y="1150.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.02%)</title><rect x="1149.4" y="1123.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.4" y="1134.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.02%)</title><rect x="1149.4" y="1107.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.4" y="1118.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.02%)</title><rect x="1149.4" y="1091.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.4" y="1102.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.02%)</title><rect x="1149.7" y="1187.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.7" y="1198.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.02%)</title><rect x="1149.7" y="1171.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.7" y="1182.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="1149.7" y="1155.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.7" y="1166.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.02%)</title><rect x="1149.7" y="1139.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.7" y="1150.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.02%)</title><rect x="1149.7" y="1123.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.7" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.02%)</title><rect x="1149.7" y="1107.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.7" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.02%)</title><rect x="1149.7" y="1091.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.7" y="1102.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1149.9" y="1203.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.9" y="1214.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1149.9" y="1187.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.9" y="1198.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1149.9" y="1171.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.9" y="1182.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.02%)</title><rect x="1149.9" y="1155.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.9" y="1166.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.02%)</title><rect x="1149.9" y="1139.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.9" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*, bool) (1 samples, 0.02%)</title><rect x="1150.2" y="1251.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.2" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.02%)</title><rect x="1150.2" y="1235.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.2" y="1246.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.02%)</title><rect x="1150.2" y="1219.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.2" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::setup_start_block(int, BlockBegin*, BlockBegin*, ValueStack*) (1 samples, 0.02%)</title><rect x="1150.4" y="1283.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.4" y="1294.0"></text>
</g>
<g>
<title>GraphBuilder::header_block(BlockBegin*, BlockBegin::Flag, ValueStack*) (1 samples, 0.02%)</title><rect x="1150.4" y="1267.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.4" y="1278.0"></text>
</g>
<g>
<title>PhiSimplifier::PhiSimplifier(BlockBegin*) (2 samples, 0.04%)</title><rect x="1150.7" y="1283.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.7" y="1294.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (2 samples, 0.04%)</title><rect x="1150.7" y="1267.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.7" y="1278.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.04%)</title><rect x="1150.7" y="1251.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.7" y="1262.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.04%)</title><rect x="1150.7" y="1235.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.7" y="1246.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.02%)</title><rect x="1150.9" y="1219.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.9" y="1230.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.02%)</title><rect x="1150.9" y="1203.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.9" y="1214.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.02%)</title><rect x="1150.9" y="1187.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.9" y="1198.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.02%)</title><rect x="1150.9" y="1171.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.9" y="1182.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.02%)</title><rect x="1150.9" y="1155.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.9" y="1166.0"></text>
</g>
<g>
<title>PhiSimplifier::block_do(BlockBegin*) (1 samples, 0.02%)</title><rect x="1150.9" y="1139.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.9" y="1150.0"></text>
</g>
<g>
<title>IR::compute_use_counts() (4 samples, 0.09%)</title><rect x="1151.2" y="1331.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.2" y="1342.0"></text>
</g>
<g>
<title>BlockList::iterate_backward(BlockClosure*) (4 samples, 0.09%)</title><rect x="1151.2" y="1315.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.2" y="1326.0"></text>
</g>
<g>
<title>UseCountComputer::block_do(BlockBegin*) (4 samples, 0.09%)</title><rect x="1151.2" y="1299.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.2" y="1310.0"></text>
</g>
<g>
<title>StateSplit::state_values_do(ValueVisitor*) (1 samples, 0.02%)</title><rect x="1151.4" y="1283.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.4" y="1294.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.02%)</title><rect x="1151.4" y="1267.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.4" y="1278.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (2 samples, 0.04%)</title><rect x="1151.7" y="1283.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.7" y="1294.0"></text>
</g>
<g>
<title>UseCountComputer::visit(Instruction**) (2 samples, 0.04%)</title><rect x="1151.7" y="1267.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.7" y="1278.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.02%)</title><rect x="1152.2" y="1331.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.2" y="1342.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.02%)</title><rect x="1152.2" y="1315.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.2" y="1326.0"></text>
</g>
<g>
<title>IR::split_critical_edges() (1 samples, 0.02%)</title><rect x="1152.4" y="1331.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="1342.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.02%)</title><rect x="1152.4" y="1315.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.4" y="1326.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (24 samples, 0.51%)</title><rect x="1152.7" y="1347.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.7" y="1358.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (11 samples, 0.23%)</title><rect x="1152.7" y="1331.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.7" y="1342.0"></text>
</g>
<g>
<title>Assembler::pop(RegisterImpl*) (1 samples, 0.02%)</title><rect x="1153.0" y="1315.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.0" y="1326.0"></text>
</g>
<g>
<title>LIR_Assembler::check_icache() (1 samples, 0.02%)</title><rect x="1153.2" y="1315.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.2" y="1326.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (3 samples, 0.06%)</title><rect x="1153.5" y="1315.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.5" y="1326.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (3 samples, 0.06%)</title><rect x="1153.5" y="1299.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.5" y="1310.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.02%)</title><rect x="1153.5" y="1283.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.5" y="1294.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (2 samples, 0.04%)</title><rect x="1153.7" y="1283.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.7" y="1294.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (2 samples, 0.04%)</title><rect x="1153.7" y="1267.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.7" y="1278.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.02%)</title><rect x="1154.0" y="1251.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.0" y="1262.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_profile_call(LIR_OpProfileCall*) (1 samples, 0.02%)</title><rect x="1154.2" y="1315.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.2" y="1326.0"></text>
</g>
<g>
<title>MacroAssembler::mov_metadata(RegisterImpl*, Metadata*) (1 samples, 0.02%)</title><rect x="1154.2" y="1299.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.2" y="1310.0"></text>
</g>
<g>
<title>Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&amp;) (1 samples, 0.02%)</title><rect x="1154.2" y="1283.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.2" y="1294.0"></text>
</g>
<g>
<title>CodeSection::relocate(unsigned char*, RelocationHolder const&amp;, int) (1 samples, 0.02%)</title><rect x="1154.2" y="1267.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.2" y="1278.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.02%)</title><rect x="1154.5" y="1315.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.5" y="1326.0"></text>
</g>
<g>
<title>Compilation::debug_info_recorder() const (1 samples, 0.02%)</title><rect x="1154.5" y="1299.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.5" y="1310.0"></text>
</g>
<g>
<title>LIR_Assembler::shift_op(LIR_Code, LIR_OprDesc*, int, LIR_OprDesc*) (1 samples, 0.02%)</title><rect x="1154.7" y="1315.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.7" y="1326.0"></text>
</g>
<g>
<title>LIR_OpAllocObj::emit_code(LIR_Assembler*) (1 samples, 0.02%)</title><rect x="1155.0" y="1315.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.0" y="1326.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_alloc_obj(LIR_OpAllocObj*) (1 samples, 0.02%)</title><rect x="1155.0" y="1299.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.0" y="1310.0"></text>
</g>
<g>
<title>C1_MacroAssembler::initialize_object(RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, RegisterImpl*, bool) (1 samples, 0.02%)</title><rect x="1155.0" y="1283.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="1294.0"></text>
</g>
<g>
<title>Assembler::movq(Address, RegisterImpl*) (1 samples, 0.02%)</title><rect x="1155.0" y="1267.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.0" y="1278.0"></text>
</g>
<g>
<title>LIR_OpLock::emit_code(LIR_Assembler*) (1 samples, 0.02%)</title><rect x="1155.2" y="1315.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.2" y="1326.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lock(LIR_OpLock*) (1 samples, 0.02%)</title><rect x="1155.2" y="1299.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.2" y="1310.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_exception_handler() (2 samples, 0.04%)</title><rect x="1155.5" y="1331.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.5" y="1342.0"></text>
</g>
<g>
<title>MacroAssembler::stop(char const*) (2 samples, 0.04%)</title><rect x="1155.5" y="1315.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.5" y="1326.0"></text>
</g>
<g>
<title>Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&amp;) (1 samples, 0.02%)</title><rect x="1155.5" y="1299.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.5" y="1310.0"></text>
</g>
<g>
<title>relocInfo::initialize(CodeSection*, Relocation*) (1 samples, 0.02%)</title><rect x="1155.5" y="1283.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.5" y="1294.0"></text>
</g>
<g>
<title>internal_word_Relocation::pack_data_to(CodeSection*) (1 samples, 0.02%)</title><rect x="1155.5" y="1267.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.5" y="1278.0"></text>
</g>
<g>
<title>Assembler::pusha() (1 samples, 0.02%)</title><rect x="1155.7" y="1299.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.7" y="1310.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (9 samples, 0.19%)</title><rect x="1156.0" y="1331.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="1342.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (2 samples, 0.04%)</title><rect x="1156.2" y="1315.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.2" y="1326.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (2 samples, 0.04%)</title><rect x="1156.2" y="1299.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.2" y="1310.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (2 samples, 0.04%)</title><rect x="1156.2" y="1283.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.2" y="1294.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.04%)</title><rect x="1156.2" y="1267.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.2" y="1278.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.02%)</title><rect x="1156.2" y="1251.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.2" y="1262.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="1156.5" y="1251.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1159.5" y="1262.0"></text>
</g>
<g>
<title>ImplicitNullCheckStub::emit_code(LIR_Assembler*) (3 samples, 0.06%)</title><rect x="1156.7" y="1315.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.7" y="1326.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (3 samples, 0.06%)</title><rect x="1156.7" y="1299.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.7" y="1310.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (3 samples, 0.06%)</title><rect x="1156.7" y="1283.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.7" y="1294.0"></text>
</g>
<g>
<title>MonitorValue::write_on(DebugInfoWriteStream*) (1 samples, 0.02%)</title><rect x="1157.0" y="1267.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.0" y="1278.0"></text>
</g>
<g>
<title>OopMap::deep_copy() (1 samples, 0.02%)</title><rect x="1157.2" y="1267.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.2" y="1278.0"></text>
</g>
<g>
<title>OopMap::OopMap(OopMap::DeepCopyToken, OopMap*) (1 samples, 0.02%)</title><rect x="1157.2" y="1251.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.2" y="1262.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.02%)</title><rect x="1157.2" y="1235.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.2" y="1246.0"></text>
</g>
<g>
<title>LIR_Assembler::code_offset() const (1 samples, 0.02%)</title><rect x="1157.5" y="1315.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.5" y="1326.0"></text>
</g>
<g>
<title>NewTypeArrayStub::emit_code(LIR_Assembler*) (1 samples, 0.02%)</title><rect x="1157.7" y="1315.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.7" y="1326.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.02%)</title><rect x="1157.7" y="1299.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.7" y="1310.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.02%)</title><rect x="1157.7" y="1283.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.7" y="1294.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.02%)</title><rect x="1157.7" y="1267.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.7" y="1278.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.02%)</title><rect x="1157.7" y="1251.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.7" y="1262.0"></text>
</g>
<g>
<title>PatchingStub::emit_code(LIR_Assembler*) (1 samples, 0.02%)</title><rect x="1158.0" y="1315.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.0" y="1326.0"></text>
</g>
<g>
<title>RelocIterator::RelocIterator(CodeSection*, unsigned char*, unsigned char*) (1 samples, 0.02%)</title><rect x="1158.0" y="1299.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.0" y="1310.0"></text>
</g>
<g>
<title>LIR_OpProfileCall::emit_code(LIR_Assembler*) (1 samples, 0.02%)</title><rect x="1158.2" y="1331.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.2" y="1342.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1158.5" y="1331.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.5" y="1342.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (66 samples, 1.41%)</title><rect x="1158.7" y="1347.0" width="16.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.7" y="1358.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (16 samples, 0.34%)</title><rect x="1158.7" y="1331.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.7" y="1342.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (14 samples, 0.30%)</title><rect x="1159.0" y="1315.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.0" y="1326.0"></text>
</g>
<g>
<title>LIRGenerator::do_Base(Base*) (2 samples, 0.04%)</title><rect x="1159.0" y="1299.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.0" y="1310.0"></text>
</g>
<g>
<title>LIRGenerator::increment_event_counter(CodeEmitInfo*, LIR_OprDesc*, int, bool) (2 samples, 0.04%)</title><rect x="1159.0" y="1283.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.0" y="1294.0"></text>
</g>
<g>
<title>LIR_List::logical_and(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*) (1 samples, 0.02%)</title><rect x="1159.0" y="1267.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.0" y="1278.0"></text>
</g>
<g>
<title>ciMethod::has_option_value(char const*, double&amp;) (1 samples, 0.02%)</title><rect x="1159.3" y="1267.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.3" y="1278.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.178] (1 samples, 0.02%)</title><rect x="1159.3" y="1251.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.3" y="1262.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (3 samples, 0.06%)</title><rect x="1159.5" y="1299.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.5" y="1310.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (3 samples, 0.06%)</title><rect x="1159.5" y="1283.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.5" y="1294.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(PhiResolver*, Instruction*, Instruction*) (1 samples, 0.02%)</title><rect x="1159.5" y="1267.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.5" y="1278.0"></text>
</g>
<g>
<title>PhiResolver::create_node(LIR_OprDesc*, bool) (1 samples, 0.02%)</title><rect x="1159.5" y="1251.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.5" y="1262.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (2 samples, 0.04%)</title><rect x="1159.8" y="1267.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.8" y="1278.0"></text>
</g>
<g>
<title>GrowableArray&lt;ResolveNode*&gt;::grow(int) (2 samples, 0.04%)</title><rect x="1159.8" y="1251.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1160.0" y="1235.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1163.0" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1160.0" y="1219.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1163.0" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1160.0" y="1203.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1163.0" y="1214.0"></text>
</g>
<g>
<title>LIRGenerator::do_Invoke(Invoke*) (1 samples, 0.02%)</title><rect x="1160.3" y="1299.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.3" y="1310.0"></text>
</g>
<g>
<title>LIRGenerator::invoke_visit_arguments(Invoke*) (1 samples, 0.02%)</title><rect x="1160.3" y="1283.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.3" y="1294.0"></text>
</g>
<g>
<title>LIRItem::set_instruction(Instruction*) (1 samples, 0.02%)</title><rect x="1160.3" y="1267.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.3" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1160.3" y="1251.0" width="0.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1163.3" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1160.3" y="1235.0" width="0.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1163.3" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1160.3" y="1219.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1163.3" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1160.3" y="1203.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1163.3" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1160.3" y="1187.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1163.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1160.3" y="1171.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1163.3" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1160.3" y="1155.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1163.3" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1160.3" y="1139.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1163.3" y="1150.0"></text>
</g>
<g>
<title>LIRGenerator::do_NewInstance(NewInstance*) (1 samples, 0.02%)</title><rect x="1160.5" y="1299.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.5" y="1310.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.02%)</title><rect x="1160.5" y="1283.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.5" y="1294.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.02%)</title><rect x="1160.5" y="1267.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.5" y="1278.0"></text>
</g>
<g>
<title>LIRGenerator::do_NullCheck(NullCheck*) (1 samples, 0.02%)</title><rect x="1160.8" y="1299.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.8" y="1310.0"></text>
</g>
<g>
<title>LIR_List::null_check(LIR_OprDesc*, CodeEmitInfo*, bool) (1 samples, 0.02%)</title><rect x="1160.8" y="1283.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.8" y="1294.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileCall(ProfileCall*) (3 samples, 0.06%)</title><rect x="1161.0" y="1299.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.0" y="1310.0"></text>
</g>
<g>
<title>LIRGenerator::profile_arguments(ProfileCall*) (3 samples, 0.06%)</title><rect x="1161.0" y="1283.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.0" y="1294.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (2 samples, 0.04%)</title><rect x="1161.0" y="1267.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.0" y="1278.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.04%)</title><rect x="1161.0" y="1251.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.0" y="1262.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method_type() (1 samples, 0.02%)</title><rect x="1161.0" y="1235.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.0" y="1246.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.02%)</title><rect x="1161.0" y="1219.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.0" y="1230.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1161.3" y="1235.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.3" y="1246.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.02%)</title><rect x="1161.3" y="1219.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.3" y="1230.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.02%)</title><rect x="1161.3" y="1203.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.3" y="1214.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="1161.3" y="1187.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.3" y="1198.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.02%)</title><rect x="1161.3" y="1171.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.3" y="1182.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.02%)</title><rect x="1161.3" y="1155.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.3" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.02%)</title><rect x="1161.3" y="1139.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.3" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.02%)</title><rect x="1161.3" y="1123.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.3" y="1134.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.02%)</title><rect x="1161.5" y="1267.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.5" y="1278.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.02%)</title><rect x="1161.5" y="1251.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.5" y="1262.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1161.5" y="1235.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1161.5" y="1219.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1164.5" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1161.5" y="1203.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1164.5" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1161.5" y="1187.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1164.5" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1161.5" y="1171.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1164.5" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1161.5" y="1155.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1164.5" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1161.5" y="1139.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1164.5" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1161.5" y="1123.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1164.5" y="1134.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileInvoke(ProfileInvoke*) (1 samples, 0.02%)</title><rect x="1161.8" y="1299.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.8" y="1310.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.02%)</title><rect x="1161.8" y="1283.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.8" y="1294.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.02%)</title><rect x="1161.8" y="1267.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.8" y="1278.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.02%)</title><rect x="1161.8" y="1251.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.8" y="1262.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.02%)</title><rect x="1161.8" y="1235.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.8" y="1246.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1161.8" y="1219.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.8" y="1230.0"></text>
</g>
<g>
<title>LIRGenerator::do_Return(Return*) (1 samples, 0.02%)</title><rect x="1162.0" y="1299.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.0" y="1310.0"></text>
</g>
<g>
<title>LIRItem::result() (1 samples, 0.02%)</title><rect x="1162.0" y="1283.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.0" y="1294.0"></text>
</g>
<g>
<title>LIRGenerator::result_register_for(ValueType*, bool) (1 samples, 0.02%)</title><rect x="1162.3" y="1299.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.3" y="1310.0"></text>
</g>
<g>
<title>Return::visit(InstructionVisitor*) (1 samples, 0.02%)</title><rect x="1162.5" y="1315.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.5" y="1326.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (50 samples, 1.07%)</title><rect x="1162.8" y="1331.0" width="12.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.8" y="1342.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (20 samples, 0.43%)</title><rect x="1162.8" y="1315.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.8" y="1326.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (20 samples, 0.43%)</title><rect x="1162.8" y="1299.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.8" y="1310.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (13 samples, 0.28%)</title><rect x="1164.5" y="1283.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.5" y="1294.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (11 samples, 0.23%)</title><rect x="1164.5" y="1267.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.5" y="1278.0"></text>
</g>
<g>
<title>LinearScanWalker::find_free_reg(int, int, int, int, bool*) (3 samples, 0.06%)</title><rect x="1165.3" y="1251.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.3" y="1262.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_fixed(Interval*) (4 samples, 0.09%)</title><rect x="1166.1" y="1251.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.1" y="1262.0"></text>
</g>
<g>
<title>LinearScanWalker::split_before_usage(Interval*, int, int) (1 samples, 0.02%)</title><rect x="1167.1" y="1251.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.1" y="1262.0"></text>
</g>
<g>
<title>LinearScanWalker::find_optimal_split_pos(Interval*, int, int, bool) (1 samples, 0.02%)</title><rect x="1167.1" y="1235.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.1" y="1246.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_locked_reg(Interval*) (2 samples, 0.04%)</title><rect x="1167.3" y="1267.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.3" y="1278.0"></text>
</g>
<g>
<title>LinearScanWalker::split_and_spill_interval(Interval*) (2 samples, 0.04%)</title><rect x="1167.3" y="1251.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.3" y="1262.0"></text>
</g>
<g>
<title>LinearScanWalker::split_before_usage(Interval*, int, int) (2 samples, 0.04%)</title><rect x="1167.3" y="1235.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.3" y="1246.0"></text>
</g>
<g>
<title>GrowableArray&lt;Interval*&gt;::grow(int) (1 samples, 0.02%)</title><rect x="1167.3" y="1219.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.3" y="1230.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1167.3" y="1203.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.3" y="1214.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.02%)</title><rect x="1167.3" y="1187.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1170.3" y="1198.0"></text>
</g>
<g>
<title>Interval::split(int) (1 samples, 0.02%)</title><rect x="1167.6" y="1219.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.6" y="1230.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1167.6" y="1203.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.6" y="1214.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (10 samples, 0.21%)</title><rect x="1167.8" y="1315.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.8" y="1326.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (9 samples, 0.19%)</title><rect x="1167.8" y="1299.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.8" y="1310.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.02%)</title><rect x="1168.6" y="1283.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.6" y="1294.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.02%)</title><rect x="1168.6" y="1267.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.6" y="1278.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.02%)</title><rect x="1168.6" y="1251.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.6" y="1262.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.02%)</title><rect x="1168.6" y="1235.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.6" y="1246.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.02%)</title><rect x="1168.6" y="1219.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.6" y="1230.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (5 samples, 0.11%)</title><rect x="1168.8" y="1283.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.8" y="1294.0"></text>
</g>
<g>
<title>IntervalWalker::activate_current() (1 samples, 0.02%)</title><rect x="1169.1" y="1267.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.1" y="1278.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (2 samples, 0.04%)</title><rect x="1169.3" y="1267.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.3" y="1278.0"></text>
</g>
<g>
<title>ValueStack::total_locks_size() const (1 samples, 0.02%)</title><rect x="1169.8" y="1267.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.8" y="1278.0"></text>
</g>
<g>
<title>LinearScan::init_compute_oop_maps() (1 samples, 0.02%)</title><rect x="1170.1" y="1299.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.1" y="1310.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.02%)</title><rect x="1170.3" y="1315.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="1326.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (12 samples, 0.26%)</title><rect x="1170.6" y="1315.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.6" y="1326.0"></text>
</g>
<g>
<title>LinearScan::add_register_hints(LIR_Op*) (1 samples, 0.02%)</title><rect x="1171.9" y="1299.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.9" y="1310.0"></text>
</g>
<g>
<title>LinearScan::add_temp(int, int, IntervalUseKind, BasicType) (1 samples, 0.02%)</title><rect x="1172.1" y="1299.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.1" y="1310.0"></text>
</g>
<g>
<title>LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind) (3 samples, 0.06%)</title><rect x="1172.4" y="1299.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.4" y="1310.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (3 samples, 0.06%)</title><rect x="1172.4" y="1283.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.4" y="1294.0"></text>
</g>
<g>
<title>Interval::Interval(int) (2 samples, 0.04%)</title><rect x="1172.6" y="1267.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="1278.0"></text>
</g>
<g>
<title>LinearScan::use_kind_of_input_operand(LIR_Op*, LIR_OprDesc*) (1 samples, 0.02%)</title><rect x="1173.1" y="1299.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.1" y="1310.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1173.4" y="1299.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1176.4" y="1310.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (5 samples, 0.11%)</title><rect x="1173.6" y="1315.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.6" y="1326.0"></text>
</g>
<g>
<title>LIR_OpVisitState::append(LIR_OprDesc*&amp;, LIR_OpVisitState::OprMode) (1 samples, 0.02%)</title><rect x="1174.1" y="1299.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.1" y="1310.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.02%)</title><rect x="1174.4" y="1299.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="1310.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="1174.6" y="1299.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1177.6" y="1310.0"></text>
</g>
<g>
<title>LinearScan::number_instructions() (1 samples, 0.02%)</title><rect x="1174.9" y="1315.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.9" y="1326.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.02%)</title><rect x="1175.1" y="1315.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.1" y="1326.0"></text>
</g>
<g>
<title>LinearScan::resolve_collect_mappings(BlockBegin*, BlockBegin*, MoveResolver&amp;) (1 samples, 0.02%)</title><rect x="1175.1" y="1299.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.1" y="1310.0"></text>
</g>
<g>
<title>Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode) (1 samples, 0.02%)</title><rect x="1175.1" y="1283.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.1" y="1294.0"></text>
</g>
<g>
<title>Dependencies::assert_evol_method(ciMethod*) (1 samples, 0.02%)</title><rect x="1175.4" y="1363.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.4" y="1374.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::grow(int) (1 samples, 0.02%)</title><rect x="1175.4" y="1347.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.4" y="1358.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (7 samples, 0.15%)</title><rect x="1175.6" y="1363.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.6" y="1374.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (7 samples, 0.15%)</title><rect x="1175.6" y="1347.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.6" y="1358.0"></text>
</g>
<g>
<title>NMethodSweeper::hotness_counter_reset_val() (1 samples, 0.02%)</title><rect x="1175.6" y="1331.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.6" y="1342.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (6 samples, 0.13%)</title><rect x="1175.9" y="1331.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.9" y="1342.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (3 samples, 0.06%)</title><rect x="1175.9" y="1315.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.9" y="1326.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (2 samples, 0.04%)</title><rect x="1175.9" y="1299.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="1310.0"></text>
</g>
<g>
<title>CallRelocation::fix_relocation_after_move(CodeBuffer const*, CodeBuffer*) (2 samples, 0.04%)</title><rect x="1175.9" y="1283.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="1294.0"></text>
</g>
<g>
<title>Relocation::pd_call_destination(unsigned char*) (2 samples, 0.04%)</title><rect x="1175.9" y="1267.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.9" y="1278.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1176.4" y="1299.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1179.4" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1176.4" y="1283.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1179.4" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1176.4" y="1267.0" width="0.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1179.4" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1176.4" y="1251.0" width="0.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1179.4" y="1262.0"></text>
</g>
<g>
<title>CompiledMethod::CompiledMethod(Method*, char const*, CompilerType, int, int, CodeBuffer*, int, int, OopMapSet*, bool) (2 samples, 0.04%)</title><rect x="1176.6" y="1315.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.6" y="1326.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CompilerType, CodeBlobLayout const&amp;, CodeBuffer*, int, int, OopMapSet*, bool) (2 samples, 0.04%)</title><rect x="1176.6" y="1299.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.6" y="1310.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::build_from(OopMapSet const*) (1 samples, 0.02%)</title><rect x="1176.6" y="1283.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.6" y="1294.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1176.9" y="1283.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1179.9" y="1294.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.02%)</title><rect x="1177.1" y="1315.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="1326.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.02%)</title><rect x="1177.4" y="1411.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="1422.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (2 samples, 0.04%)</title><rect x="1177.7" y="1411.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.7" y="1422.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 0.04%)</title><rect x="1177.7" y="1395.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.7" y="1406.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (2 samples, 0.04%)</title><rect x="1177.7" y="1379.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.7" y="1390.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (2 samples, 0.04%)</title><rect x="1177.7" y="1363.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="1374.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (2 samples, 0.04%)</title><rect x="1177.7" y="1347.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="1358.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.02%)</title><rect x="1177.9" y="1331.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="1342.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.02%)</title><rect x="1177.9" y="1315.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.9" y="1326.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (3 samples, 0.06%)</title><rect x="1178.2" y="1411.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.2" y="1422.0"></text>
</g>
<g>
<title>ciObjectFactory::remove_symbols() (3 samples, 0.06%)</title><rect x="1178.2" y="1395.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.2" y="1406.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (2 samples, 0.04%)</title><rect x="1178.4" y="1379.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="1390.0"></text>
</g>
<g>
<title>CompileBroker::possibly_add_compiler_threads() (2 samples, 0.04%)</title><rect x="1178.9" y="1427.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.9" y="1438.0"></text>
</g>
<g>
<title>os::available_memory() (2 samples, 0.04%)</title><rect x="1178.9" y="1411.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="1422.0"></text>
</g>
<g>
<title>OSContainer::memory_limit_in_bytes() (2 samples, 0.04%)</title><rect x="1178.9" y="1395.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="1406.0"></text>
</g>
<g>
<title>__vsscanf (1 samples, 0.02%)</title><rect x="1178.9" y="1379.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1181.9" y="1390.0"></text>
</g>
<g>
<title>fgets (1 samples, 0.02%)</title><rect x="1179.2" y="1379.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1182.2" y="1390.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.02%)</title><rect x="1179.4" y="1427.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="1438.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="1179.4" y="1411.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="1422.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (3 samples, 0.06%)</title><rect x="1179.7" y="1443.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.7" y="1454.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (3 samples, 0.06%)</title><rect x="1179.7" y="1427.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.7" y="1438.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (3 samples, 0.06%)</title><rect x="1179.7" y="1411.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="1422.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.02%)</title><rect x="1179.7" y="1395.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.7" y="1406.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (2 samples, 0.04%)</title><rect x="1179.9" y="1395.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="1406.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool, bool) (1 samples, 0.02%)</title><rect x="1179.9" y="1379.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="1390.0"></text>
</g>
<g>
<title>CompiledMethod::clear_ic_stubs() (1 samples, 0.02%)</title><rect x="1180.2" y="1379.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="1390.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (27 samples, 0.58%)</title><rect x="1180.4" y="1443.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="1454.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (25 samples, 0.53%)</title><rect x="1180.4" y="1427.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.4" y="1438.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (25 samples, 0.53%)</title><rect x="1180.4" y="1411.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="1422.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.02%)</title><rect x="1180.7" y="1395.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="1406.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (6 samples, 0.13%)</title><rect x="1180.9" y="1395.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="1406.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (5 samples, 0.11%)</title><rect x="1181.2" y="1379.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="1390.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (3 samples, 0.06%)</title><rect x="1181.2" y="1363.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="1374.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1181.7" y="1347.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="1358.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.04%)</title><rect x="1181.9" y="1363.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.9" y="1374.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (17 samples, 0.36%)</title><rect x="1182.4" y="1395.0" width="4.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1185.4" y="1406.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (3 samples, 0.06%)</title><rect x="1184.0" y="1379.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.0" y="1390.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(CompiledMethod const*, int, int, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1184.0" y="1363.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.0" y="1374.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.02%)</title><rect x="1184.2" y="1363.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="1374.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1184.2" y="1347.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="1358.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1184.5" y="1363.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1187.5" y="1374.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (5 samples, 0.11%)</title><rect x="1184.7" y="1379.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.7" y="1390.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (4 samples, 0.09%)</title><rect x="1184.7" y="1363.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.7" y="1374.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1185.7" y="1363.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.7" y="1374.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (3 samples, 0.06%)</title><rect x="1186.0" y="1379.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.0" y="1390.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="1186.7" y="1427.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.7" y="1438.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title><rect x="1186.7" y="1411.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="1422.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.02%)</title><rect x="1186.7" y="1395.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.7" y="1406.0"></text>
</g>
<g>
<title>nmethodLocker::unlock_nmethod(CompiledMethod*) (1 samples, 0.02%)</title><rect x="1187.0" y="1427.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.0" y="1438.0"></text>
</g>
<g>
<title>VMThread::run() (9 samples, 0.19%)</title><rect x="1187.2" y="1475.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.2" y="1486.0"></text>
</g>
<g>
<title>VMThread::loop() (9 samples, 0.19%)</title><rect x="1187.2" y="1459.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.2" y="1470.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (6 samples, 0.13%)</title><rect x="1187.2" y="1443.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.2" y="1454.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.02%)</title><rect x="1188.2" y="1427.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.2" y="1438.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (1 samples, 0.02%)</title><rect x="1188.2" y="1411.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.2" y="1422.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.02%)</title><rect x="1188.2" y="1395.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.2" y="1406.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1188.2" y="1379.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1191.2" y="1390.0"></text>
</g>
<g>
<title>ThreadSafepointState::examine_state_of_thread() (1 samples, 0.02%)</title><rect x="1188.5" y="1427.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.5" y="1438.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.02%)</title><rect x="1188.7" y="1443.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.7" y="1454.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.02%)</title><rect x="1188.7" y="1427.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.7" y="1438.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.02%)</title><rect x="1188.7" y="1411.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.7" y="1422.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.02%)</title><rect x="1188.7" y="1395.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.7" y="1406.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.02%)</title><rect x="1188.7" y="1379.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.7" y="1390.0"></text>
</g>
<g>
<title>WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.02%)</title><rect x="1188.7" y="1363.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.7" y="1374.0"></text>
</g>
<g>
<title>__GI___sched_yield (2 samples, 0.04%)</title><rect x="1189.0" y="1443.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1192.0" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1189.2" y="1427.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1192.2" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1189.2" y="1411.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1192.2" y="1422.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.02%)</title><rect x="1189.5" y="1475.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.5" y="1486.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.02%)</title><rect x="1189.5" y="1459.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.5" y="1470.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="1189.5" y="1443.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.5" y="1454.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title><rect x="1189.5" y="1427.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.5" y="1438.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.02%)</title><rect x="1189.5" y="1411.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.5" y="1422.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.02%)</title><rect x="1189.7" y="1523.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1192.7" y="1534.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.02%)</title><rect x="1189.7" y="1507.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1192.7" y="1518.0"></text>
</g>
</g>
</svg>
